1
00:00:00,000 --> 00:00:05,000
 It'll be due in another week from Friday.

2
00:00:05,000 --> 00:00:07,040
 If you have questions about your projects,

3
00:00:07,040 --> 00:00:10,000
 whether you should run things on DeepNote

4
00:00:10,000 --> 00:00:14,600
 or on your local machine, if you have trouble installing stuff,

5
00:00:14,600 --> 00:00:18,080
 just ask.

6
00:00:18,080 --> 00:00:20,320
 Consider, by the way, asking-- if you're asking questions

7
00:00:20,320 --> 00:00:22,280
 about Drake, you can ask them, of course, on Piazza.

8
00:00:22,280 --> 00:00:23,360
 We'll try to answer them.

9
00:00:23,360 --> 00:00:26,120
 I love it when people ask them on Stack Overflow,

10
00:00:26,120 --> 00:00:29,080
 because then we get questions that--

11
00:00:29,080 --> 00:00:31,040
 it kind of builds up the answer base in general,

12
00:00:31,040 --> 00:00:32,260
 so we don't answer the same.

13
00:00:32,260 --> 00:00:35,840
 There's like a wealth of answers on Piazza

14
00:00:35,840 --> 00:00:38,280
 that are locked away from previous years.

15
00:00:38,280 --> 00:00:40,160
 If only those had been on Stack Overflow,

16
00:00:40,160 --> 00:00:42,120
 then the question would already be answered.

17
00:00:42,120 --> 00:00:45,640
 And consider checking Stack Overflow.

18
00:00:45,640 --> 00:00:47,340
 The question might already be answered.

19
00:00:47,340 --> 00:00:52,640
 OK, so today we're going to start

20
00:00:52,640 --> 00:00:55,880
 talking about motion planning.

21
00:00:55,880 --> 00:00:58,760
 I think we've already motivated it fairly well.

22
00:00:58,760 --> 00:01:03,720
 I'll remind you that one particular motivation was

23
00:01:03,720 --> 00:01:06,360
 we built this clutter clearing example where

24
00:01:06,360 --> 00:01:08,920
 it took the YCB objects from one bin,

25
00:01:08,920 --> 00:01:11,400
 dropped them off in another bin, and I got it

26
00:01:11,400 --> 00:01:13,440
 to some moderate level of robustness,

27
00:01:13,440 --> 00:01:17,840
 like it would run all night long and wouldn't crash.

28
00:01:17,840 --> 00:01:20,720
 But there were some pain points.

29
00:01:20,720 --> 00:01:22,520
 There were some failure modes in that.

30
00:01:22,520 --> 00:01:24,560
 And the biggest one, I would say,

31
00:01:24,560 --> 00:01:29,000
 the one that was most painful to watch for me

32
00:01:29,000 --> 00:01:30,960
 was that it would occasionally do a couple very

33
00:01:30,960 --> 00:01:34,000
 bad things with the simple version of planning

34
00:01:34,000 --> 00:01:36,340
 we did, which was just sort of straight interpolation

35
00:01:36,340 --> 00:01:37,960
 of the end effectors.

36
00:01:37,960 --> 00:01:40,560
 Occasionally, it would smack into the cameras.

37
00:01:40,560 --> 00:01:42,200
 Admittedly, I did put the cameras, like,

38
00:01:42,200 --> 00:01:44,480
 right in the middle of the workspace

39
00:01:44,480 --> 00:01:46,160
 to try to make the point clouds good,

40
00:01:46,160 --> 00:01:48,640
 but it would occasionally smack into the cameras.

41
00:01:48,640 --> 00:01:50,440
 The other thing is that if it happened

42
00:01:50,440 --> 00:01:53,000
 to pick something that was sort of right in this bin

43
00:01:53,000 --> 00:01:56,200
 and right in this bin, it would try to almost drive itself

44
00:01:56,200 --> 00:01:58,880
 through the base of the robot.

45
00:01:58,880 --> 00:02:00,920
 And differential IK would do its best,

46
00:02:00,920 --> 00:02:03,480
 but sometimes the robot would almost fold in on itself,

47
00:02:03,480 --> 00:02:05,600
 and it would get out of whack, and it

48
00:02:05,600 --> 00:02:07,080
 was kind of not very pretty.

49
00:02:07,080 --> 00:02:09,660
 So there was a recovery maneuver in there that would just say,

50
00:02:09,660 --> 00:02:10,680
 well, things are bad.

51
00:02:10,680 --> 00:02:14,280
 Let's just go back to home and then start again.

52
00:02:14,280 --> 00:02:16,240
 Both of those we should expect to be

53
00:02:16,240 --> 00:02:18,840
 able to resolve with some better motion planning,

54
00:02:18,840 --> 00:02:22,520
 and that's a goal for this week.

55
00:02:22,520 --> 00:02:26,400
 We're going to talk about the two mainstream approaches

56
00:02:26,400 --> 00:02:28,040
 to motion planning, I would say.

57
00:02:28,040 --> 00:02:30,520
 One of them is really much based on optimization.

58
00:02:30,520 --> 00:02:33,120
 We'll talk about that a lot today.

59
00:02:33,120 --> 00:02:34,960
 We'll talk about the sampling-based version

60
00:02:34,960 --> 00:02:37,040
 of motion planning a bit on Thursday.

61
00:02:37,040 --> 00:02:38,640
 And I think there's some work that

62
00:02:38,640 --> 00:02:40,060
 tries to bring them together where

63
00:02:40,060 --> 00:02:44,080
 you can try to get some of the best of both worlds.

64
00:02:44,080 --> 00:02:46,000
 But one of the other sort of, let's say,

65
00:02:46,000 --> 00:02:47,600
 high-level motivations for the lecture

66
00:02:47,600 --> 00:02:51,660
 here of using optimization for motion planning

67
00:02:51,660 --> 00:02:53,600
 is that it can make a difference.

68
00:02:53,600 --> 00:02:55,680
 This is an example from DexEye.

69
00:02:55,680 --> 00:02:57,160
 It's a company.

70
00:02:57,160 --> 00:03:00,880
 They're in town here, and they're

71
00:03:00,880 --> 00:03:02,880
 kind of a spinoff from MIT.

72
00:03:02,880 --> 00:03:05,280
 They've got robots that make salads and do

73
00:03:05,280 --> 00:03:07,120
 all kinds of food preparation.

74
00:03:07,120 --> 00:03:11,880
 You might have seen it in some of the kitchens around here.

75
00:03:11,880 --> 00:03:14,920
 For them, their business model is roughly,

76
00:03:14,920 --> 00:03:17,280
 how many salads can I make per hour,

77
00:03:17,280 --> 00:03:21,560
 or how many sandwiches or whatever we can dish out.

78
00:03:21,560 --> 00:03:24,840
 So for them, it's not just about not running into cameras.

79
00:03:24,840 --> 00:03:28,560
 They want to eat every ounce of performance out of that robot.

80
00:03:28,560 --> 00:03:30,360
 And the rate that they can move food

81
00:03:30,360 --> 00:03:33,800
 is partly due to how fast you can move food that it doesn't

82
00:03:33,800 --> 00:03:35,480
 fall out of your gripper.

83
00:03:35,480 --> 00:03:38,480
 It's partly due to the velocity limits on your robot,

84
00:03:38,480 --> 00:03:41,160
 acceleration, even jerk limits on the robot,

85
00:03:41,160 --> 00:03:42,840
 torque limits on the robot.

86
00:03:42,840 --> 00:03:47,400
 These are dynamic limits that are hard to think about.

87
00:03:47,400 --> 00:03:49,240
 And when you're doing well, you're

88
00:03:49,240 --> 00:03:51,800
 almost always moving up against those limits.

89
00:03:51,800 --> 00:03:54,200
 And it was just fairly recently that we were actually

90
00:03:54,200 --> 00:03:56,360
 working with them, and they started doing trajectory

91
00:03:56,360 --> 00:03:59,400
 optimization to improve their scooping.

92
00:03:59,400 --> 00:04:03,080
 And their success story was they're moving twice as fast

93
00:04:03,080 --> 00:04:05,240
 now, and they can earn twice as much money or something.

94
00:04:05,240 --> 00:04:06,940
 I don't know exactly the business model,

95
00:04:06,940 --> 00:04:08,640
 but it's something like that.

96
00:04:08,640 --> 00:04:11,080
 And that's true in a lot of applications.

97
00:04:11,080 --> 00:04:15,300
 But I think it's very nice to think about not only planning

98
00:04:15,300 --> 00:04:18,600
 motions that are good, but that are riding up against the limits

99
00:04:18,600 --> 00:04:21,000
 and getting every bit of performance out of your robot.

100
00:04:21,000 --> 00:04:26,440
 OK, so I want to get into planning

101
00:04:26,440 --> 00:04:29,320
 and that sort of example first by thinking

102
00:04:29,320 --> 00:04:33,960
 a little bit about the nonlinear optimization

103
00:04:33,960 --> 00:04:37,120
 view of inverse kinematics.

104
00:04:37,120 --> 00:04:40,520
 So let's start with solving IK.

105
00:04:40,520 --> 00:04:42,160
 Let's solve it well and understand

106
00:04:42,160 --> 00:04:46,960
 some of the subtleties of that cost landscape

107
00:04:46,960 --> 00:04:49,720
 and understand why it's going to set us up

108
00:04:49,720 --> 00:04:52,200
 for understanding the motion planning version.

109
00:04:52,200 --> 00:04:52,700
 OK.

110
00:04:52,700 --> 00:05:07,580
 So I know you guys are very familiar with this

111
00:05:07,580 --> 00:05:09,360
 at this point, but we've been saying

112
00:05:09,360 --> 00:05:14,360
 that forward kinematics is the function, some kinematics

113
00:05:14,360 --> 00:05:15,840
 function that takes the joint angles

114
00:05:15,840 --> 00:05:18,640
 and moves it over to the gripper.

115
00:05:18,640 --> 00:05:27,720
 And inverse kinematics, we say, could be, for instance,

116
00:05:27,720 --> 00:05:29,600
 trying to do an inverse of that.

117
00:05:29,600 --> 00:05:33,960
 Of course, that is a definition of inverse kinematics.

118
00:05:33,960 --> 00:05:36,620
 But we'll try to talk today about how that might not

119
00:05:36,620 --> 00:05:38,920
 be the right way to write it down, first of all,

120
00:05:38,920 --> 00:05:40,680
 explicitly thinking about it like this.

121
00:05:40,680 --> 00:05:45,440
 Maybe this object should never exist in code directly.

122
00:05:45,440 --> 00:05:49,680
 And that maybe this isn't as rich of a specification

123
00:05:49,680 --> 00:05:53,480
 of inverse kinematics as we want.

124
00:05:53,480 --> 00:05:55,920
 So there's a lot to know about this problem.

125
00:05:55,920 --> 00:06:01,680
 Even when we talked about differential inverse

126
00:06:01,680 --> 00:06:04,520
 kinematics, we saw some of the subtlety.

127
00:06:04,520 --> 00:06:06,520
 We tried to use the gradients of this.

128
00:06:06,520 --> 00:06:13,040
 We observed that the Jacobian matrix wasn't always full rank.

129
00:06:13,040 --> 00:06:17,680
 So that implied even locally, it could have many solutions,

130
00:06:17,680 --> 00:06:18,240
 for instance.

131
00:06:18,240 --> 00:06:21,680
 It could have zero solutions, depending on what's happening.

132
00:06:21,680 --> 00:06:24,960
 So this is not necessarily a great function.

133
00:06:24,960 --> 00:06:26,240
 And you could think about that.

134
00:06:26,240 --> 00:06:28,840
 If I have a desired pose of my robot,

135
00:06:28,840 --> 00:06:30,380
 maybe with seven degrees of freedom,

136
00:06:30,380 --> 00:06:33,840
 I've got many possible solutions with my elbow, for instance,

137
00:06:33,840 --> 00:06:36,280
 that could get me the same pose.

138
00:06:36,280 --> 00:06:39,640
 And you could certainly ask for poses that have no solution.

139
00:06:39,640 --> 00:06:42,800
 If it's too far out of the workspace, there's no solution.

140
00:06:42,800 --> 00:06:45,120
 And everything in between can happen.

141
00:06:45,120 --> 00:06:52,000
 But this is obviously such an important problem for robotics

142
00:06:52,000 --> 00:06:57,000
 that there's a long and storied history of solving inverse

143
00:06:57,000 --> 00:07:00,400
 kinematics problems.

144
00:07:00,400 --> 00:07:03,520
 We'll do the optimization-based version in a second.

145
00:07:03,520 --> 00:07:09,120
 But let me say a few things about the history of that.

146
00:07:09,120 --> 00:07:14,920
 So one thing you should know is that there's

147
00:07:14,920 --> 00:07:19,040
 a special case for a six degree of freedom

148
00:07:19,040 --> 00:07:23,360
 manipulator, a standard sort of SCARA sort of manipulator.

149
00:07:23,360 --> 00:07:23,860
 Yes?

150
00:07:23,860 --> 00:07:26,840
 [INAUDIBLE]

151
00:07:26,840 --> 00:07:28,640
 I always try to do it.

152
00:07:28,640 --> 00:07:29,760
 But we normally do our own.

153
00:07:29,760 --> 00:07:30,260
 Yeah?

154
00:07:30,260 --> 00:07:33,600
 [INAUDIBLE]

155
00:07:33,600 --> 00:07:35,520
 Oh, I see.

156
00:07:35,520 --> 00:07:37,520
 I have been not putting that mic on just

157
00:07:37,520 --> 00:07:39,800
 because we've been using the audio from this one.

158
00:07:39,800 --> 00:07:40,300
 Yeah?

159
00:07:40,300 --> 00:07:41,240
 [INAUDIBLE]

160
00:07:41,240 --> 00:07:42,400
 Thank you.

161
00:07:42,400 --> 00:07:43,200
 Thank you so much.

162
00:07:43,200 --> 00:07:51,280
 So you could take-- just saying a robot has six degrees of freedom

163
00:07:51,280 --> 00:07:51,920
 is not enough.

164
00:07:51,920 --> 00:07:56,040
 But there's a standard revolute sort of version

165
00:07:56,040 --> 00:07:59,960
 of a standard six degree of freedom robot arm

166
00:07:59,960 --> 00:08:04,780
 that is sort of a special case of this problem.

167
00:08:04,780 --> 00:08:07,720
 If you have a six degree of freedom robot arm,

168
00:08:07,720 --> 00:08:11,200
 then with all revolute joints or there's

169
00:08:11,200 --> 00:08:14,600
 a few cases that are well understood,

170
00:08:14,600 --> 00:08:18,200
 then actually people have an exact understanding

171
00:08:18,200 --> 00:08:19,840
 of that inverse map.

172
00:08:19,840 --> 00:08:24,800
 So in this case, there are sort of closed form solutions.

173
00:08:30,440 --> 00:08:33,660
 And in particular, there's finitely many solutions.

174
00:08:33,660 --> 00:08:43,660
 So you can't actually do-- it requires seven degrees of freedom

175
00:08:43,660 --> 00:08:46,500
 to do what I did with my elbow.

176
00:08:46,500 --> 00:08:50,660
 In six degrees of freedom, you can do this or this.

177
00:08:50,660 --> 00:08:53,220
 You can count how many possible solutions there are.

178
00:08:53,220 --> 00:08:55,860
 You can enumerate them.

179
00:08:55,860 --> 00:08:59,420
 And people use this often.

180
00:08:59,420 --> 00:09:02,620
 You might have used it before.

181
00:09:02,620 --> 00:09:07,140
 Most often, if you're like in the ROS world for robotics,

182
00:09:07,140 --> 00:09:10,100
 you might be using it through IKFast.

183
00:09:10,100 --> 00:09:15,620
 It's a common, familiar ROS package that is basically

184
00:09:15,620 --> 00:09:19,220
 using the closed form solutions of the-- it's actually a compiler.

185
00:09:19,220 --> 00:09:21,100
 So you tell it the description of the robot,

186
00:09:21,100 --> 00:09:27,320
 and it'll compile down these solutions when it's possible.

187
00:09:27,320 --> 00:09:29,460
 It doesn't enumerate all of the solutions.

188
00:09:29,460 --> 00:09:33,580
 It has some heuristics to pick its favorite solution.

189
00:09:33,580 --> 00:09:35,860
 But it'll give you one when it exists.

190
00:09:35,860 --> 00:09:38,420
 It's super powerful.

191
00:09:38,420 --> 00:09:42,020
 If you look at the work behind IKFast,

192
00:09:42,020 --> 00:09:44,540
 actually, you might be surprised where it comes from.

193
00:09:44,540 --> 00:09:47,700
 But it actually comes from algebraic geometry.

194
00:09:47,700 --> 00:09:54,500
 So it's the study of polynomials and polynomial equations.

195
00:09:54,500 --> 00:09:59,860
 That comes from a deep history, I'd say,

196
00:09:59,860 --> 00:10:10,500
 of algebraic geometry or kinematics.

197
00:10:10,500 --> 00:10:18,300
 So it turns out that the kinematics of our robots

198
00:10:18,300 --> 00:10:21,220
 can be described perfectly as the solution

199
00:10:21,220 --> 00:10:23,400
 to polynomial equations.

200
00:10:23,400 --> 00:10:26,820
 And you can take-- that's a fundamental math question now.

201
00:10:26,820 --> 00:10:28,580
 How do you find, given some complicated

202
00:10:28,580 --> 00:10:31,140
 polynomial equations, how do you find the zeros, for instance,

203
00:10:31,140 --> 00:10:32,940
 of the polynomial equations?

204
00:10:32,940 --> 00:10:36,360
 And there are math packages that will do that.

205
00:10:36,360 --> 00:10:39,700
 Some of them have been optimized for the kinematics case.

206
00:10:39,700 --> 00:10:42,620
 And they can solve really interesting and cool problems.

207
00:10:42,620 --> 00:10:48,940
 So for instance, if you think about a four-bar linkage,

208
00:10:48,940 --> 00:10:51,700
 and you ask, if I change the angles of this four-bar

209
00:10:51,700 --> 00:10:54,540
 linkage in 3D space, what is the path that

210
00:10:54,540 --> 00:10:58,180
 can get curved out by the end effector, effectively,

211
00:10:58,180 --> 00:11:01,420
 of this four-bar linkage?

212
00:11:01,420 --> 00:11:04,540
 It can curve out crazy paths.

213
00:11:04,540 --> 00:11:06,300
 But those are actually the solution

214
00:11:06,300 --> 00:11:07,880
 to a set of polynomial equations.

215
00:11:07,880 --> 00:11:10,380
 And even the manifold of solutions

216
00:11:10,380 --> 00:11:13,660
 can be returned by an algebraic geometry package.

217
00:11:13,660 --> 00:11:17,700
 And in fact, they even have ways where

218
00:11:17,700 --> 00:11:19,740
 you can design your four-bar linkage in order

219
00:11:19,740 --> 00:11:24,380
 to be able to execute a certain kinematic path.

220
00:11:24,380 --> 00:11:28,980
 So there is a history there of very powerful tools

221
00:11:28,980 --> 00:11:30,780
 for understanding this problem.

222
00:11:30,780 --> 00:11:34,100
 I would say in the '80s, 1980s, and '90s,

223
00:11:34,100 --> 00:11:38,620
 these were mainstream things.

224
00:11:38,620 --> 00:11:41,820
 It's not the main topic of inverse kinematics now,

225
00:11:41,820 --> 00:11:45,180
 because although these are very powerful,

226
00:11:45,180 --> 00:11:48,260
 as I'll try to convince you, this is, I think,

227
00:11:48,260 --> 00:11:52,380
 still a slightly limited view of inverse kinematics.

228
00:11:52,380 --> 00:11:57,100
 Only trying to invert that function f

229
00:11:57,100 --> 00:12:00,900
 might be an insufficient description of the problem.

230
00:12:00,900 --> 00:12:03,580
 Really, what I want to do is I want to think about--

231
00:12:03,580 --> 00:12:06,460
 I want to find a solution that gets my hand here,

232
00:12:06,460 --> 00:12:09,060
 but I also want to respect my joint limits.

233
00:12:09,060 --> 00:12:12,500
 So joint limits already complicate a lot of this math.

234
00:12:12,500 --> 00:12:14,820
 If you're in the land of polynomials,

235
00:12:14,820 --> 00:12:18,660
 people like equality constraints in polynomials.

236
00:12:18,660 --> 00:12:20,900
 You don't like inequality constraints in polynomials,

237
00:12:20,900 --> 00:12:23,100
 and joint limits are inequality constraints.

238
00:12:23,100 --> 00:12:26,660
 And so that gets you into semi-algebraic geometry,

239
00:12:26,660 --> 00:12:30,340
 for which there are many less results.

240
00:12:30,340 --> 00:12:32,620
 But you might also have things like collision avoidance

241
00:12:32,620 --> 00:12:33,900
 constraints.

242
00:12:33,900 --> 00:12:37,060
 Oh, that really screws things up.

243
00:12:37,060 --> 00:12:40,540
 So I want you to know that if you

244
00:12:40,540 --> 00:12:42,500
 want to design a steward-go platform,

245
00:12:42,500 --> 00:12:46,060
 there's a right set of tools to do that.

246
00:12:46,060 --> 00:12:47,620
 But for the more general problem,

247
00:12:47,620 --> 00:12:51,540
 we're going to turn to more flexible but less

248
00:12:51,540 --> 00:12:54,700
 reliable solvers.

249
00:12:54,700 --> 00:12:58,780
 So let's think about inverse kinematics as an optimization.

250
00:12:58,780 --> 00:13:02,420
 This is just a fun demonstration of doing

251
00:13:02,420 --> 00:13:05,060
 interactive versions of the inverse kinematics

252
00:13:05,060 --> 00:13:06,900
 problem on our humanoid.

253
00:13:06,900 --> 00:13:08,820
 And I'll show you the KUKA version

254
00:13:08,820 --> 00:13:12,260
 of that running on my computer here in just a second.

255
00:13:12,260 --> 00:13:15,820
 But instead of-- let me even just put this back so you

256
00:13:15,820 --> 00:13:18,860
 don't watch that too much.

257
00:13:18,860 --> 00:13:21,300
 Instead of writing this, you remember,

258
00:13:21,300 --> 00:13:23,980
 even for the differential inverse kinematics,

259
00:13:23,980 --> 00:13:26,900
 we recommended trying to solve an optimization problem

260
00:13:26,900 --> 00:13:29,740
 so that we could put limits on and things like that.

261
00:13:29,740 --> 00:13:33,100
 So instead of solving this, what I want to start thinking about

262
00:13:33,100 --> 00:13:37,340
 is, what if we say I want to minimize over a Q?

263
00:13:37,340 --> 00:13:41,400
 Maybe I want to find a comfortable Q, something

264
00:13:41,400 --> 00:13:44,420
 close to some desired-- in my IWA,

265
00:13:44,420 --> 00:13:46,860
 I always pick the initial condition to be something--

266
00:13:46,860 --> 00:13:49,020
 I guess my arm is not quite in IWA,

267
00:13:49,020 --> 00:13:52,020
 and my shoulder is certainly not what it used to be.

268
00:13:52,020 --> 00:13:55,020
 But OK, so I pick some comfortable position

269
00:13:55,020 --> 00:13:56,500
 and call that my nominal position.

270
00:13:56,500 --> 00:13:59,020
 And when I'm trying to choose between all

271
00:13:59,020 --> 00:14:00,820
 the possible solutions, I'd like to pick one

272
00:14:00,820 --> 00:14:03,940
 that's close as possible to my friendly, happy position,

273
00:14:03,940 --> 00:14:07,860
 as opposed to picking one that goes like this.

274
00:14:07,860 --> 00:14:10,620
 And so I'll do something like this.

275
00:14:10,620 --> 00:14:12,620
 But then I'll say, subject to the idea

276
00:14:12,620 --> 00:14:20,940
 that my forward kinematics satisfies this solution.

277
00:14:20,940 --> 00:14:27,820
 But then I'll also say, plus joint limits,

278
00:14:27,820 --> 00:14:28,740
 collision constraints.

279
00:14:28,740 --> 00:14:36,700
 OK.

280
00:14:36,700 --> 00:14:39,260
 If I only had this, this would just

281
00:14:39,260 --> 00:14:43,620
 be a slightly more general view of that problem, which

282
00:14:43,620 --> 00:14:46,980
 tells me what to do if there's multiple solutions.

283
00:14:46,980 --> 00:14:50,780
 This gives me an objective that would define my solution

284
00:14:50,780 --> 00:14:54,580
 if there's multiple solutions, define which one I pick.

285
00:14:54,580 --> 00:14:57,340
 But then because we've moved to the language of optimization,

286
00:14:57,340 --> 00:15:00,900
 we can also do other constraints.

287
00:15:00,900 --> 00:15:04,300
 So this is the object I want to study for the next little bit.

288
00:15:04,900 --> 00:15:05,900
 Questions about that?

289
00:15:05,900 --> 00:15:19,460
 What does that look like as an optimization?

290
00:15:19,460 --> 00:15:32,260
 This is a quadratic cost, which we like in general.

291
00:15:32,260 --> 00:15:34,220
 It's the nice, simple-- it's even

292
00:15:34,220 --> 00:15:36,220
 a positive definite quadratic.

293
00:15:36,220 --> 00:15:37,620
 So that seems good.

294
00:15:37,620 --> 00:15:51,140
 But this is a non-linear, non-convex constraint

295
00:15:51,140 --> 00:15:53,900
 in almost every case.

296
00:15:53,900 --> 00:15:58,700
 Joint limits are simple, linear, but collision avoidance, again,

297
00:15:58,700 --> 00:16:01,840
 are very non-linear constraints.

298
00:16:01,840 --> 00:16:05,100
 So we're quickly in the land of non-linear optimization,

299
00:16:05,100 --> 00:16:06,340
 non-convex optimization.

300
00:16:06,340 --> 00:16:14,700
 The picture is-- the non-convexity

301
00:16:14,700 --> 00:16:19,940
 is coming from the constraints, not from the objective.

302
00:16:19,940 --> 00:16:23,740
 But the picture is kind of still like what

303
00:16:23,740 --> 00:16:27,660
 I was talking about here, where you could expect your optimizer

304
00:16:27,660 --> 00:16:29,740
 to find minima, but it won't necessarily

305
00:16:29,740 --> 00:16:32,020
 find the global minima.

306
00:16:32,020 --> 00:16:33,540
 Right?

307
00:16:33,540 --> 00:16:35,860
 This is kind of the picture I want to have in your head.

308
00:16:35,860 --> 00:16:37,740
 Really what's happening is the picture

309
00:16:37,740 --> 00:16:46,380
 is a little bit more like there's a big quadratic form,

310
00:16:46,380 --> 00:16:49,740
 but because of the constraints, I'm only allowed to go here.

311
00:16:49,740 --> 00:16:51,580
 Maybe I could go here.

312
00:16:51,580 --> 00:16:55,060
 And I could go potentially-- the thing that defines those sets

313
00:16:55,060 --> 00:16:57,180
 is so complicated that I can't expect

314
00:16:57,180 --> 00:17:01,340
 to get to the best version of it.

315
00:17:01,340 --> 00:17:03,060
 But intuitively, it's really-- it's

316
00:17:03,060 --> 00:17:04,760
 the same as having a landscape like that.

317
00:17:04,760 --> 00:17:13,780
 So how do we solve that problem?

318
00:17:13,780 --> 00:17:17,100
 And how do we connect it to what you already know?

319
00:17:17,100 --> 00:17:21,140
 We have differential inverse kinematics, right?

320
00:17:21,140 --> 00:17:24,620
 So how does differential inverse kinematics work?

321
00:17:24,620 --> 00:17:27,020
 We solved that reliably with convex optimization.

322
00:17:27,020 --> 00:17:32,700
 And we did that, even with some of these other constraints,

323
00:17:32,700 --> 00:17:35,540
 by taking a linearization of these constraints.

324
00:17:35,540 --> 00:17:39,300
 That was the differential IK version of it.

325
00:17:39,300 --> 00:17:41,460
 In fact, the way we often solve this

326
00:17:41,460 --> 00:17:44,140
 is actually very much like solving the differential IK

327
00:17:44,140 --> 00:17:46,620
 problem over and over and over again.

328
00:17:46,620 --> 00:17:50,100
 So when you use the nonlinear solver,

329
00:17:50,100 --> 00:18:05,940
 we tend to use for these problems is SNOPT.

330
00:18:05,940 --> 00:18:11,460
 Although some people think IP-OPT is better.

331
00:18:11,460 --> 00:18:18,780
 I actually believe them, but I think it's-- you pick

332
00:18:18,780 --> 00:18:22,140
 your weapon, and you learn how to use your weapon very well.

333
00:18:22,140 --> 00:18:25,620
 And so I've used SNOPT more, so I can make SNOPT do good things.

334
00:18:25,620 --> 00:18:27,980
 And other people who use other solvers

335
00:18:27,980 --> 00:18:29,140
 know how to do that better.

336
00:18:29,140 --> 00:18:32,660
 But this is just the name of a commercial solver.

337
00:18:32,660 --> 00:18:36,540
 It's a semi-commercial solver.

338
00:18:36,540 --> 00:18:51,260
 And it is solving using sequential quadratic

339
00:18:51,260 --> 00:18:51,760
 programming.

340
00:18:51,760 --> 00:19:04,940
 So actually, when SNOPT is solving a problem like this,

341
00:19:04,940 --> 00:19:08,020
 it's actually effectively solving a differential IK

342
00:19:08,020 --> 00:19:11,580
 problem multiple times and trying to rapidly move

343
00:19:11,580 --> 00:19:13,340
 to a solution.

344
00:19:13,340 --> 00:19:16,600
 So the differential IK work that you've already done

345
00:19:16,600 --> 00:19:17,900
 is happening behind the scenes.

346
00:19:17,900 --> 00:19:26,020
 So this gives us a really potentially rich language

347
00:19:26,020 --> 00:19:27,060
 of costs and constraints.

348
00:19:27,060 --> 00:19:29,140
 And we're going to look at some of the cost

349
00:19:29,140 --> 00:19:30,220
 landscapes and everything.

350
00:19:30,220 --> 00:19:33,580
 But this is what we're talking about for ATLAS.

351
00:19:33,580 --> 00:19:35,980
 So maybe we have somebody saying,

352
00:19:35,980 --> 00:19:37,660
 I want my hand to be at a certain place.

353
00:19:37,660 --> 00:19:41,020
 That's what this little marker is doing,

354
00:19:41,020 --> 00:19:42,760
 is that someone in the interface is just

355
00:19:42,760 --> 00:19:44,500
 pulling around the hand.

356
00:19:44,500 --> 00:19:48,460
 But ATLAS also had joint limit constraints, collision

357
00:19:48,460 --> 00:19:51,180
 avoidance constraints, even self-collision avoidance

358
00:19:51,180 --> 00:19:54,020
 constraints.

359
00:19:54,020 --> 00:19:56,740
 We needed a lot of things like gaze constraints.

360
00:19:56,740 --> 00:19:59,340
 So the way that you move your hand maybe

361
00:19:59,340 --> 00:20:01,220
 should be subject to where your cameras are.

362
00:20:01,220 --> 00:20:03,460
 And you want to pick up things you can see,

363
00:20:03,460 --> 00:20:05,620
 which turned out to be a really funny thing for ATLAS

364
00:20:05,620 --> 00:20:09,860
 because the first version of ATLAS, its head was like this.

365
00:20:09,860 --> 00:20:10,620
 It could see here.

366
00:20:10,620 --> 00:20:12,120
 And its hands could reach down here.

367
00:20:12,120 --> 00:20:14,380
 And the place where you could reach,

368
00:20:14,380 --> 00:20:17,620
 where the cameras could see, was surprisingly small.

369
00:20:17,620 --> 00:20:19,180
 It was really irritating.

370
00:20:19,180 --> 00:20:21,060
 They changed-- if you look at ATLAS now,

371
00:20:21,060 --> 00:20:23,600
 they kind of took the arms off, flipped the shoulders around.

372
00:20:23,600 --> 00:20:25,740
 And now it looks a little like an ape.

373
00:20:25,740 --> 00:20:29,140
 But at least it can reach where it can see.

374
00:20:29,140 --> 00:20:31,900
 That's good.

375
00:20:31,900 --> 00:20:33,500
 When we were doing it on the humanoid,

376
00:20:33,500 --> 00:20:35,900
 we wanted it to also keep the feet in the same place.

377
00:20:35,900 --> 00:20:37,700
 We didn't want the feet to move around when

378
00:20:37,700 --> 00:20:39,460
 we were solving the IK problem.

379
00:20:39,460 --> 00:20:41,260
 We also had, for instance, the center mass

380
00:20:41,260 --> 00:20:42,860
 had to be inside the support polygon

381
00:20:42,860 --> 00:20:44,100
 so the robot didn't fall over.

382
00:20:44,100 --> 00:20:47,180
 But these are just a list of more and more things.

383
00:20:47,180 --> 00:20:49,780
 And once we've gone over the hump of saying

384
00:20:49,780 --> 00:20:52,060
 we're going to solve a non-linear, non-convex

385
00:20:52,060 --> 00:20:55,180
 optimization, then it opens up a huge library

386
00:20:55,180 --> 00:20:58,860
 of these types of constraints you can add.

387
00:20:58,860 --> 00:21:00,240
 You still want to add things that

388
00:21:00,240 --> 00:21:04,460
 are smooth and nice functions, but it really

389
00:21:04,460 --> 00:21:08,420
 opens the floodgates.

390
00:21:08,420 --> 00:21:13,540
 So let's think about it for a couple simple examples.

391
00:21:13,540 --> 00:21:18,260
 So let me even run interactive IK for this simple robot here.

392
00:21:26,260 --> 00:21:29,700
 Which, by the way, I always run on M1.

393
00:21:29,700 --> 00:21:32,120
 Except for people who are like, oh, it doesn't work on M1.

394
00:21:32,120 --> 00:21:32,780
 It works on M1.

395
00:21:32,780 --> 00:21:40,700
 So here's my interactive inverse kinematics in MeshCat.

396
00:21:40,700 --> 00:21:42,980
 So I've got my KUKA IWA, and I'll just

397
00:21:42,980 --> 00:21:48,580
 move around the end effector positions.

398
00:21:48,580 --> 00:21:52,100
 And there's a couple of points I want to make here,

399
00:21:52,100 --> 00:21:55,060
 is that it's solving-- and it certainly

400
00:21:55,060 --> 00:21:56,220
 can solve at real time rates.

401
00:21:56,220 --> 00:21:58,460
 I think the delays here are probably

402
00:21:58,460 --> 00:22:02,300
 more the network or something than the solver.

403
00:22:02,300 --> 00:22:05,900
 It can definitely be solving fast enough.

404
00:22:05,900 --> 00:22:09,140
 But every time I move the sliders,

405
00:22:09,140 --> 00:22:11,020
 it's like it's waking up for the first time

406
00:22:11,020 --> 00:22:13,460
 and solving a global version of the problem.

407
00:22:13,460 --> 00:22:16,420
 So the way that can get you is if you just

408
00:22:16,420 --> 00:22:20,460
 do that, for instance, there's no real guarantee

409
00:22:20,460 --> 00:22:24,740
 that it's going to find smooth solutions.

410
00:22:24,740 --> 00:22:26,340
 As I move it around, I might get it

411
00:22:26,340 --> 00:22:28,220
 to jump between different solutions.

412
00:22:28,220 --> 00:22:29,800
 Probably if I move it towards itself,

413
00:22:29,800 --> 00:22:31,020
 it'll start jumping around.

414
00:22:31,020 --> 00:22:32,260
 Whoa, whoa.

415
00:22:32,260 --> 00:22:32,980
 Right?

416
00:22:32,980 --> 00:22:33,660
 That was cool.

417
00:22:33,660 --> 00:22:36,120
 I mean, that's a lot to ask to move right through yourself.

418
00:22:36,120 --> 00:22:39,780
 But OK.

419
00:22:39,780 --> 00:22:41,260
 I mean, it's finding the solutions.

420
00:22:41,260 --> 00:22:42,180
 It's pretty impressive.

421
00:22:42,180 --> 00:22:44,140
 But I wouldn't execute on the robot, right?

422
00:22:44,140 --> 00:22:47,480
 OK.

423
00:22:47,480 --> 00:22:53,500
 So the cool thing is, though, when

424
00:22:53,500 --> 00:22:55,380
 you start adding more and more of these constraints,

425
00:22:55,380 --> 00:22:56,740
 it gets more and more powerful.

426
00:22:56,740 --> 00:23:03,380
 So here's now the same interface, but I put a pole.

427
00:23:03,380 --> 00:23:05,500
 Like, if someone put a pole in front of your robot,

428
00:23:05,500 --> 00:23:06,460
 you should be mad.

429
00:23:06,460 --> 00:23:07,960
 That's not a reasonable thing to do,

430
00:23:07,960 --> 00:23:11,620
 but it's kind of a reasonable demo for the IK here, right?

431
00:23:11,620 --> 00:23:16,100
 So now I've done almost exactly what I wrote here.

432
00:23:16,100 --> 00:23:19,060
 In fact, the joint limits, but also the collision avoidance

433
00:23:19,060 --> 00:23:20,660
 constraints.

434
00:23:20,660 --> 00:23:22,680
 And the fun case, I guess, is when

435
00:23:22,680 --> 00:23:25,580
 I try to make the robot move that way,

436
00:23:25,580 --> 00:23:27,060
 what's it going to do, right?

437
00:23:27,060 --> 00:23:28,620
 So I guess that should be positive y.

438
00:23:28,620 --> 00:23:32,860
 It's trying to reach.

439
00:23:32,860 --> 00:23:35,060
 It's trying to-- oh, and then it snapped over, right?

440
00:23:35,060 --> 00:23:38,980
 Again, don't execute consecutive poses on the robot.

441
00:23:38,980 --> 00:23:42,780
 But as an independent solve, it's pretty good, right?

442
00:23:42,780 --> 00:23:48,540
 It's reasonable to be that there's

443
00:23:48,540 --> 00:23:50,860
 some places where it's not going to be happy with the solution.

444
00:23:50,860 --> 00:23:54,320
 In fact, so the solver will say, in that place where

445
00:23:54,320 --> 00:23:56,920
 it couldn't find a solution-- it actually did well that time.

446
00:23:56,920 --> 00:24:02,320
 I'm like, I wanted to make my point.

447
00:24:02,320 --> 00:24:02,840
 OK, there.

448
00:24:02,840 --> 00:24:03,760
 Yeah, right there.

449
00:24:03,760 --> 00:24:07,480
 The solver will say, in that case, IK failure.

450
00:24:07,480 --> 00:24:09,880
 It knows that it failed.

451
00:24:09,880 --> 00:24:12,720
 So that's comforting, I guess, a little bit.

452
00:24:17,920 --> 00:24:22,940
 OK, so this is a pretty powerful toolbox.

453
00:24:22,940 --> 00:24:25,340
 But let's see what we can do with it.

454
00:24:25,340 --> 00:24:30,820
 One of the most important lessons I want to give you here

455
00:24:30,820 --> 00:24:34,620
 is that actually this specification is, I think,

456
00:24:34,620 --> 00:24:38,420
 in addition to not being what you want because it didn't--

457
00:24:38,420 --> 00:24:42,500
 if I just solved this version of the problem,

458
00:24:42,500 --> 00:24:44,620
 it didn't account for these.

459
00:24:44,620 --> 00:24:46,700
 But there's another view I want to give you,

460
00:24:46,700 --> 00:24:51,600
 which is that saying this is almost always more than you

461
00:24:51,600 --> 00:24:53,080
 need to say.

462
00:24:53,080 --> 00:24:57,920
 OK, for most manipulation tasks, picking a desired grasp

463
00:24:57,920 --> 00:25:02,240
 and constraining the robot reached to that grasp in XYZ

464
00:25:02,240 --> 00:25:06,960
 yaw pitch role is overly specifying the tasks.

465
00:25:06,960 --> 00:25:09,120
 And as you use optimization more,

466
00:25:09,120 --> 00:25:12,080
 you will learn that writing a minimal version

467
00:25:12,080 --> 00:25:14,560
 of this constraint that is only constraining exactly what you

468
00:25:14,560 --> 00:25:18,380
 need and no more will open up the flexibility for finding

469
00:25:18,380 --> 00:25:19,380
 solutions.

470
00:25:19,380 --> 00:25:24,700
 And it's sort of a better way to write your inverse kinematics

471
00:25:24,700 --> 00:25:25,220
 problem.

472
00:25:25,220 --> 00:25:31,140
 So let me make that point here with this version here.

473
00:25:31,140 --> 00:25:34,260
 OK, so now I have the robot is supposed

474
00:25:34,260 --> 00:25:37,180
 to be grabbing the cylinder.

475
00:25:37,180 --> 00:25:40,940
 And this time I put the sliders on the cylinder

476
00:25:40,940 --> 00:25:44,500
 instead of on the robot.

477
00:25:44,500 --> 00:25:46,540
 Now my objective-- so I'm not worried

478
00:25:46,540 --> 00:25:49,260
 about the inertia of the cylinder in this case.

479
00:25:49,260 --> 00:25:53,420
 My inertia is just to have the cylinder somewhere in my hand.

480
00:25:53,420 --> 00:25:56,660
 But I'm saying that the location along the cylinder

481
00:25:56,660 --> 00:25:58,060
 shouldn't matter.

482
00:25:58,060 --> 00:26:00,340
 And the rotation-- I picked the cylinder

483
00:26:00,340 --> 00:26:03,300
 so I could argue that the rotation shouldn't matter.

484
00:26:03,300 --> 00:26:08,600
 So if I write the problem right, as I move the cylinder around,

485
00:26:08,600 --> 00:26:11,860
 the robot actually shouldn't move until I get to the end.

486
00:26:11,860 --> 00:26:13,420
 And then it has to follow.

487
00:26:13,420 --> 00:26:20,540
 See if I can see this from a different angle too.

488
00:26:20,540 --> 00:26:24,620
 And similarly, it should be willing to rotate itself.

489
00:26:24,620 --> 00:26:27,420
 There's no reason why it had to come in at exactly

490
00:26:27,420 --> 00:26:28,780
 some orientation.

491
00:26:28,780 --> 00:26:31,820
 Any orientation where the cylinder

492
00:26:31,820 --> 00:26:35,780
 is in the middle of the hand should be sufficient.

493
00:26:35,780 --> 00:26:38,480
 So when you want to level up in your inverse kinematics,

494
00:26:38,480 --> 00:26:40,480
 you should write just the very minimal version

495
00:26:40,480 --> 00:26:42,820
 of that constraint.

496
00:26:42,820 --> 00:26:44,860
 Does that make sense?

497
00:26:44,860 --> 00:26:46,540
 So how would you write that constraint?

498
00:26:46,540 --> 00:26:51,700
 What is that particular constraint?

499
00:26:51,700 --> 00:26:54,540
 How would you author it?

500
00:26:54,540 --> 00:26:55,580
 What does it look like?

501
00:26:55,580 --> 00:27:07,660
 This is how I did it.

502
00:27:07,660 --> 00:27:09,500
 There's various versions of it.

503
00:27:09,500 --> 00:27:14,640
 But what I said was I want a constraint that says--

504
00:27:14,640 --> 00:27:16,800
 so the decision-- I should have written a q in here.

505
00:27:16,800 --> 00:27:17,800
 That would have helped.

506
00:27:17,800 --> 00:27:20,640
 But the decision variables are inside the thing that

507
00:27:20,640 --> 00:27:23,960
 defines my relative transforms.

508
00:27:23,960 --> 00:27:26,480
 G is the gripper frame.

509
00:27:26,480 --> 00:27:29,000
 C is the cylinder frame.

510
00:27:29,000 --> 00:27:32,960
 And what I said is that there's going

511
00:27:32,960 --> 00:27:36,520
 to be two points on the gripper frame

512
00:27:36,520 --> 00:27:39,960
 that I would like to be inside the cylinder.

513
00:27:39,960 --> 00:27:41,840
 So in the cylinder frame, this is the center

514
00:27:41,840 --> 00:27:43,240
 of the cylinder in x and y.

515
00:27:43,240 --> 00:27:47,280
 And the cylinders are by default along the long axis,

516
00:27:47,280 --> 00:27:49,540
 almost in every robotics package, I guess.

517
00:27:49,540 --> 00:27:52,040
 So if I'm saying I'm between 0.5 and 0.5,

518
00:27:52,040 --> 00:27:54,440
 that's just saying there's some point of interest

519
00:27:54,440 --> 00:27:56,920
 on the gripper frame that I would

520
00:27:56,920 --> 00:28:00,040
 like to be on the center line of the cylinder,

521
00:28:00,040 --> 00:28:04,040
 but anywhere between the length of the cylinder.

522
00:28:04,040 --> 00:28:07,560
 And then the points I would like to place there

523
00:28:07,560 --> 00:28:11,220
 are two points on the gripper frame, which,

524
00:28:11,220 --> 00:28:13,920
 remember, the gripper frame here-- I grabbed this old

525
00:28:13,920 --> 00:28:17,360
 picture just so you remember that RGB, right?

526
00:28:17,360 --> 00:28:20,400
 So the y-axis is the one along the gripper.

527
00:28:20,400 --> 00:28:27,900
 So 0.1 puts me somewhere around here in y.

528
00:28:27,900 --> 00:28:30,600
 And then I did z, a small number,

529
00:28:30,600 --> 00:28:33,000
 and a negative number, a small negative number, which

530
00:28:33,000 --> 00:28:37,400
 is this and this, so along that blue axis.

531
00:28:37,400 --> 00:28:39,360
 Is that clear?

532
00:28:39,360 --> 00:28:42,120
 So what I'm saying-- I guess I have a round chalk here, right?

533
00:28:42,120 --> 00:28:43,880
 Because I've got a gripper frame.

534
00:28:43,880 --> 00:28:46,080
 I'm going to pick up-- this is hard.

535
00:28:46,080 --> 00:28:48,280
 OK, I've got a point right here and a point right here

536
00:28:48,280 --> 00:28:50,720
 that I'd like to be inside the chalk.

537
00:28:50,720 --> 00:28:51,720
 And that's enough, right?

538
00:28:51,720 --> 00:28:54,720
 That means that I'm going to be aligned with it,

539
00:28:54,720 --> 00:28:56,360
 and I'm going to slide along.

540
00:28:56,360 --> 00:28:58,800
 We actually have ways to write orientation constraints

541
00:28:58,800 --> 00:29:01,040
 directly, but I thought this was a little bit easier

542
00:29:01,040 --> 00:29:02,960
 to put on a slide and consume.

543
00:29:02,960 --> 00:29:04,920
 Just think about points, putting a point

544
00:29:04,920 --> 00:29:06,240
 on the line of the cylinder.

545
00:29:06,240 --> 00:29:08,400
 And if I put two of them, I constrain myself

546
00:29:08,400 --> 00:29:10,400
 exactly the way I want and not in other ways

547
00:29:10,400 --> 00:29:11,200
 that I don't want.

548
00:29:11,200 --> 00:29:16,680
 Cool.

549
00:29:16,680 --> 00:29:18,040
 And so that works pretty well.

550
00:29:18,040 --> 00:29:21,200
 And I think it's a general strategy for picking up

551
00:29:21,200 --> 00:29:25,040
 objects or whatever, depending on what your grasp selection

552
00:29:25,040 --> 00:29:26,200
 strategy was.

553
00:29:26,200 --> 00:29:28,240
 But you should try to get one that

554
00:29:28,240 --> 00:29:30,520
 allows you to have that extra flexibility,

555
00:29:30,520 --> 00:29:32,560
 because there's going to be many more solutions.

556
00:29:32,560 --> 00:29:33,120
 Yeah?

557
00:29:33,120 --> 00:29:34,160
 Did you have a question?

558
00:29:34,160 --> 00:29:34,660
 [INAUDIBLE]

559
00:29:34,660 --> 00:29:40,640
 But only in the one axis.

560
00:29:40,640 --> 00:29:42,080
 That was my goal, right?

561
00:29:42,080 --> 00:29:47,120
 So it's true that I could have allowed grasps like this.

562
00:29:47,120 --> 00:29:47,880
 I chose not to.

563
00:29:47,880 --> 00:29:49,840
 I wanted it to be like this, but it's

564
00:29:49,840 --> 00:29:52,240
 free to rotate in that axis.

565
00:29:52,240 --> 00:29:55,120
 So I guess it constrains two of the rotational degrees

566
00:29:55,120 --> 00:29:56,320
 and leaves one free.

567
00:29:56,320 --> 00:29:56,820
 Yeah?

568
00:29:56,820 --> 00:29:57,320
 [INAUDIBLE]

569
00:29:57,320 --> 00:30:01,080
 OK.

570
00:30:01,080 --> 00:30:05,540
 So that's our language.

571
00:30:05,540 --> 00:30:06,820
 In fact, it's a rich language.

572
00:30:06,820 --> 00:30:11,500
 So this actually translates directly in code.

573
00:30:11,500 --> 00:30:14,580
 We can just say, add a position constraint.

574
00:30:14,580 --> 00:30:16,540
 It uses the multibody notation.

575
00:30:16,540 --> 00:30:18,140
 You say, I'm in the gripper frame.

576
00:30:18,140 --> 00:30:21,140
 I'd like my Q point, which is this,

577
00:30:21,140 --> 00:30:25,740
 to be in my other frame, which is the cylinder frame.

578
00:30:25,740 --> 00:30:27,300
 So there's a pretty direct mapping

579
00:30:27,300 --> 00:30:31,580
 from that math into the code.

580
00:30:31,580 --> 00:30:32,080
 OK.

581
00:30:32,080 --> 00:30:35,660
 And we actually have a pretty rich library

582
00:30:35,660 --> 00:30:37,940
 of costs and constraints.

583
00:30:37,940 --> 00:30:41,260
 Add position constraint, position costs,

584
00:30:41,260 --> 00:30:43,380
 orientation constraints, orientation costs,

585
00:30:43,380 --> 00:30:46,100
 the gaze target constraints, all the things we've used

586
00:30:46,100 --> 00:30:47,140
 in the past.

587
00:30:47,140 --> 00:30:50,940
 There's ways to just take your frame logic,

588
00:30:50,940 --> 00:30:52,500
 your points in one frame need to be

589
00:30:52,500 --> 00:30:55,060
 something related to some other points in some other frame,

590
00:30:55,060 --> 00:30:58,740
 and add that as a cost or constraint into this problem,

591
00:30:58,740 --> 00:30:59,860
 and then hit Solve.

592
00:30:59,860 --> 00:31:00,620
 And you're good.

593
00:31:00,620 --> 00:31:05,540
 The one that I used-- I mean, there's actually--

594
00:31:05,540 --> 00:31:08,620
 there's some pretty interesting ones, actually.

595
00:31:08,620 --> 00:31:12,420
 The one that I used in the collision avoidance constraint

596
00:31:12,420 --> 00:31:14,700
 is a minimum distance constraint,

597
00:31:14,700 --> 00:31:17,340
 which is the most complicated one that's

598
00:31:17,340 --> 00:31:21,100
 in there, which just adds a single constraint saying

599
00:31:21,100 --> 00:31:24,980
 that all of the collision pairs in the world

600
00:31:24,980 --> 00:31:29,340
 are at least some minimum distance apart.

601
00:31:29,340 --> 00:31:31,420
 And it's written in a particular way.

602
00:31:31,420 --> 00:31:33,580
 I mean, you could write it yourself.

603
00:31:33,580 --> 00:31:36,300
 But the difference between a thing you'd write yourself

604
00:31:36,300 --> 00:31:37,700
 and what's happening in here, this

605
00:31:37,700 --> 00:31:41,100
 is leveraging the more advanced features of collision detection

606
00:31:41,100 --> 00:31:43,420
 so that it can-- objects that are far away

607
00:31:43,420 --> 00:31:46,780
 get called immediately with axis-aligned bounding boxes.

608
00:31:46,780 --> 00:31:49,980
 And then it's doing some clever smoothing

609
00:31:49,980 --> 00:31:54,820
 as the two objects that are the closest switch,

610
00:31:54,820 --> 00:31:57,860
 if you switch from being as closest to the table

611
00:31:57,860 --> 00:32:00,220
 between closest to the laptop, that

612
00:32:00,220 --> 00:32:02,980
 would be a non-smoothness in the cost landscape.

613
00:32:02,980 --> 00:32:04,300
 And it tries to smooth that out.

614
00:32:04,300 --> 00:32:06,020
 And there's a lot of details behind there

615
00:32:06,020 --> 00:32:07,420
 to make that work pretty well.

616
00:32:07,420 --> 00:32:10,500
 It's still not bulletproof, because it's

617
00:32:10,500 --> 00:32:12,340
 a complicated landscape.

618
00:32:12,340 --> 00:32:14,340
 And that's kind of what I want to tell you next,

619
00:32:14,340 --> 00:32:16,460
 is just let's just think about the landscape that's

620
00:32:16,460 --> 00:32:18,820
 happening in these problems.

621
00:32:18,820 --> 00:32:21,020
 So first, I'll just show you.

622
00:32:21,020 --> 00:32:22,260
 We use this a lot, actually.

623
00:32:22,260 --> 00:32:27,340
 And my favorite one was-- they gave the DARPA Robotics

624
00:32:27,340 --> 00:32:27,860
 Challenge.

625
00:32:27,860 --> 00:32:29,140
 We had to do a number of things.

626
00:32:29,140 --> 00:32:31,420
 The robot had to drive a car, right?

627
00:32:31,420 --> 00:32:34,820
 And the government furnished us with an atlas.

628
00:32:34,820 --> 00:32:37,380
 We won the right to get an atlas.

629
00:32:37,380 --> 00:32:39,620
 And then they told us we had to drive a car.

630
00:32:39,620 --> 00:32:41,620
 And they gave us a small car.

631
00:32:41,620 --> 00:32:43,020
 It's a Polaris, right?

632
00:32:43,020 --> 00:32:45,060
 They gave us an enormous humanoid.

633
00:32:45,060 --> 00:32:47,020
 And then they gave us a tiny car.

634
00:32:47,020 --> 00:32:51,980
 And we had to invent rich inverse kinematics just

635
00:32:51,980 --> 00:32:54,780
 to figure out how to fit the robot in the car, right?

636
00:32:54,780 --> 00:32:56,420
 And it turns out, it didn't really

637
00:32:56,420 --> 00:32:58,500
 fit behind the driver's seat.

638
00:32:58,500 --> 00:33:00,380
 You had to sit kind of in the middle,

639
00:33:00,380 --> 00:33:01,860
 and kind of on the passenger seat,

640
00:33:01,860 --> 00:33:03,980
 and put your leg across the console,

641
00:33:03,980 --> 00:33:07,580
 and go like this, and drive like this.

642
00:33:07,580 --> 00:33:09,040
 It was awkward and embarrassing.

643
00:33:09,040 --> 00:33:12,220
 And we actually fell out in the process one time.

644
00:33:12,220 --> 00:33:16,060
 But that's how we turned the steering wheel, see?

645
00:33:16,060 --> 00:33:18,180
 And we did all the workspace analysis and everything

646
00:33:18,180 --> 00:33:20,580
 using this inverse kinematics pipeline.

647
00:33:21,580 --> 00:33:24,820
 But the good thing is, it's such a general pipeline

648
00:33:24,820 --> 00:33:27,380
 that once we had it working on atlas,

649
00:33:27,380 --> 00:33:30,580
 we had a chance to work with the NASA Valkyrie robot.

650
00:33:30,580 --> 00:33:31,740
 And everything just worked.

651
00:33:31,740 --> 00:33:33,620
 It's just the same code.

652
00:33:33,620 --> 00:33:36,060
 You just flip out the atlas model at the beginning,

653
00:33:36,060 --> 00:33:39,820
 put in the Valkyrie model, and we could do all the same stuff.

654
00:33:39,820 --> 00:33:41,460
 So it's a pretty powerful tool chain.

655
00:33:41,460 --> 00:33:46,860
 So let's just appreciate for a minute what's

656
00:33:46,860 --> 00:33:48,700
 happening in the geometry.

657
00:33:48,700 --> 00:33:57,020
 And so I want to visualize a few simple configuration space

658
00:33:57,020 --> 00:33:58,780
 regions.

659
00:33:58,780 --> 00:34:02,180
 So the example I carved up here to try to convince you of this

660
00:34:02,180 --> 00:34:05,180
 is, let's just take a two-link arm.

661
00:34:05,180 --> 00:34:12,820
 I'm going to make theta 1, theta 2.

662
00:34:12,820 --> 00:34:16,100
 I'll call it L1, L2.

663
00:34:16,100 --> 00:34:19,100
 And then at the bottom of this two-link arm--

664
00:34:19,100 --> 00:34:21,540
 I have some colored chalk here somewhere--

665
00:34:21,540 --> 00:34:28,860
 I'll make a hand that has radius r.

666
00:34:28,860 --> 00:34:34,100
 And then, like a jerk, I'm going to put this robot

667
00:34:34,100 --> 00:34:40,060
 in a constrained environment with walls

668
00:34:40,060 --> 00:34:46,060
 like this that are just w apart.

669
00:34:46,060 --> 00:34:52,340
 OK, and this is the simplest possible kinematics problem.

670
00:34:52,340 --> 00:34:53,060
 It's one where--

671
00:34:53,060 --> 00:34:59,140
 [LAUGHTER]

672
00:34:59,140 --> 00:35:01,660
 And we can solve it in closed form.

673
00:35:01,660 --> 00:35:05,940
 We can say, I know exactly which angles are

674
00:35:05,940 --> 00:35:08,860
 going to be in collision and which would be out of collision.

675
00:35:08,860 --> 00:35:12,300
 Because if I just take the x position of that,

676
00:35:12,300 --> 00:35:22,660
 the p of the gripper in x is just going to be L1 sine q1

677
00:35:22,660 --> 00:35:28,220
 plus L2 sine q1 plus q2.

678
00:35:28,220 --> 00:35:37,700
 And I want this to be in the limits

679
00:35:37,700 --> 00:35:40,540
 where the sphere is not intersecting with the wall.

680
00:35:40,540 --> 00:35:44,500
 So it works out to be that.

681
00:35:44,500 --> 00:35:50,100
 OK, and if you plot that region, which I've done here--

682
00:35:50,100 --> 00:35:57,900
 and I could change my lengths and my radius or whatever--

683
00:35:57,900 --> 00:35:59,820
 it gets funky, right?

684
00:35:59,820 --> 00:36:02,060
 This one is as simple as it gets,

685
00:36:02,060 --> 00:36:05,180
 but it's not some simple convex region, right?

686
00:36:05,180 --> 00:36:09,140
 The landscape that my inverse kinematics tools

687
00:36:09,140 --> 00:36:11,340
 have to work around is on the-- I'm sorry

688
00:36:11,340 --> 00:36:12,580
 if I didn't say this clearly.

689
00:36:12,580 --> 00:36:19,340
 The region in the middle is the feasible region.

690
00:36:19,340 --> 00:36:21,900
 And the way I could plot it in Desmos,

691
00:36:21,900 --> 00:36:23,620
 I plotted the two infeasible constraints.

692
00:36:23,620 --> 00:36:26,860
 But this region in the middle is sort of the feasible region.

693
00:36:26,860 --> 00:36:29,740
 0, 0 is feasible, right?

694
00:36:29,740 --> 00:36:33,500
 And as I move it around, the shape of my feasible region

695
00:36:33,500 --> 00:36:35,300
 can change pretty dramatically.

696
00:36:38,100 --> 00:36:39,460
 Whoops.

697
00:36:39,460 --> 00:36:43,180
 So that would be if the walls are crushing the robot.

698
00:36:43,180 --> 00:36:48,020
 So that's-- OK.

699
00:36:48,020 --> 00:36:49,740
 That's a toy example.

700
00:36:49,740 --> 00:36:51,940
 Let's do it for the IWA.

701
00:36:51,940 --> 00:36:53,580
 I wanted to-- I spent some time trying

702
00:36:53,580 --> 00:36:56,740
 to figure out how to visualize this for you.

703
00:36:56,740 --> 00:36:58,460
 This is the example I came up with.

704
00:36:58,460 --> 00:37:01,860
 So I actually am going to lock out four

705
00:37:01,860 --> 00:37:04,100
 of the joints of the IWA and just plot three of them,

706
00:37:04,100 --> 00:37:07,180
 because I can make animations in three dimensions.

707
00:37:07,180 --> 00:37:09,580
 So I'm just going to leave the three of the IWA

708
00:37:09,580 --> 00:37:11,940
 that are in the plane.

709
00:37:11,940 --> 00:37:14,500
 And then I'm going to ask it to reach into the shelf.

710
00:37:14,500 --> 00:37:17,700
 And I'm going to do the same thing we just did with that.

711
00:37:17,700 --> 00:37:21,460
 But I'm going to do it with the real geometry of the IWA,

712
00:37:21,460 --> 00:37:25,420
 all the real collision geometry of the shelf and the IWA.

713
00:37:25,420 --> 00:37:27,260
 And this is what it looks like.

714
00:37:27,260 --> 00:37:28,300
 What the-- OK.

715
00:37:28,300 --> 00:37:34,740
 So the inverse kinematics problem has two bits.

716
00:37:34,740 --> 00:37:38,540
 So let me try to make this-- help you make sense of this.

717
00:37:38,540 --> 00:37:43,180
 So the first thing was I wrote an objective saying

718
00:37:43,180 --> 00:37:49,940
 that I want the hand to be-- a point in the hand to be--

719
00:37:49,940 --> 00:37:52,620
 a point in space to be in the hand.

720
00:37:52,620 --> 00:37:57,660
 And that constraint is this green region

721
00:37:57,660 --> 00:38:01,420
 that would be an annulus all the way around.

722
00:38:01,420 --> 00:38:03,940
 It's truncated only by the joint limits.

723
00:38:03,940 --> 00:38:09,020
 So this would be the-- it trying to go like this, like this.

724
00:38:09,020 --> 00:38:09,940
 It's in the plane.

725
00:38:09,940 --> 00:38:12,860
 And I got to work on my shoulder mobility

726
00:38:12,860 --> 00:38:15,660
 before the next time I give this lecture.

727
00:38:15,660 --> 00:38:21,100
 So that's the feasible if the shelf wasn't there,

728
00:38:21,100 --> 00:38:24,860
 which is already sort of a terrible thing.

729
00:38:24,860 --> 00:38:26,940
 Like that's a scary kind of landscape.

730
00:38:26,940 --> 00:38:29,580
 It would be smooth if I plot-- the way I made this was I just

731
00:38:29,580 --> 00:38:30,220
 sampled a bunch.

732
00:38:30,220 --> 00:38:31,460
 And I called marching cubes.

733
00:38:31,460 --> 00:38:37,460
 And so it's a slightly bumpy version of the true surface.

734
00:38:37,460 --> 00:38:41,060
 By the way, SNOPT, our inverse kinematics code,

735
00:38:41,060 --> 00:38:42,220
 does find the solution.

736
00:38:42,220 --> 00:38:46,060
 If I find an optimal solution for this,

737
00:38:46,060 --> 00:38:47,700
 I use this as the initial guess.

738
00:38:47,700 --> 00:38:51,740
 And it found its way into that nook and cranny

739
00:38:51,740 --> 00:38:57,300
 to find that solution, which I showed you in the picture.

740
00:38:57,300 --> 00:38:58,900
 But what's this thing?

741
00:38:58,900 --> 00:39:06,340
 This thing is the marching cubes version of the configurations

742
00:39:06,340 --> 00:39:08,860
 where they're in collision or out of collision.

743
00:39:08,860 --> 00:39:10,380
 So this is the boundary from where

744
00:39:10,380 --> 00:39:12,220
 you switch from being in collision

745
00:39:12,220 --> 00:39:13,780
 to being out of collision.

746
00:39:13,780 --> 00:39:15,220
 And it's horrible.

747
00:39:15,220 --> 00:39:16,460
 It's absolutely horrible.

748
00:39:16,460 --> 00:39:19,500
 And in fact, if you want to find the solution,

749
00:39:19,500 --> 00:39:20,920
 it has to be feasible.

750
00:39:20,920 --> 00:39:26,500
 It's tucked down in this little-- whoop, there it is.

751
00:39:26,500 --> 00:39:29,580
 That's that question we're asking SNOPT

752
00:39:29,580 --> 00:39:31,780
 to find an answer to for us.

753
00:39:31,780 --> 00:39:36,020
 So when SNOPT fails, be nice.

754
00:39:36,020 --> 00:39:37,820
 It's a really hard problem we're asking.

755
00:39:37,820 --> 00:39:42,260
 In fact, let me even just show you-- I also

756
00:39:42,260 --> 00:39:43,780
 got a little crazy with this.

757
00:39:43,780 --> 00:39:45,900
 So let me show you the cost landscape

758
00:39:45,900 --> 00:39:48,060
 we actually give to SNOPT.

759
00:39:48,060 --> 00:39:51,340
 So if I can move this over.

760
00:39:51,340 --> 00:39:54,820
 So this is the same problem.

761
00:39:54,820 --> 00:39:56,280
 But I'm going to actually plot it.

762
00:39:56,280 --> 00:40:00,140
 We don't give the boundaries just as true/false things

763
00:40:00,140 --> 00:40:01,220
 to SNOPT.

764
00:40:01,220 --> 00:40:07,100
 We make smooth-- the minimum distance, right?

765
00:40:07,100 --> 00:40:09,380
 It doesn't have a cliff that it falls off

766
00:40:09,380 --> 00:40:10,860
 when you're in collision and not.

767
00:40:10,860 --> 00:40:12,500
 We have the minimum distance function,

768
00:40:12,500 --> 00:40:15,260
 which tells me how far I'm in collision

769
00:40:15,260 --> 00:40:19,180
 or how far I am away from collision.

770
00:40:19,180 --> 00:40:21,740
 So that becomes a smoother function.

771
00:40:21,740 --> 00:40:25,300
 But you can look at all the pieces of this.

772
00:40:25,300 --> 00:40:28,900
 So first, the objective is beautiful and smooth, right?

773
00:40:28,900 --> 00:40:31,300
 It's my quadratic, which has some goal back

774
00:40:31,300 --> 00:40:34,300
 at the comfortable position.

775
00:40:34,300 --> 00:40:34,800
 Yeah?

776
00:40:34,800 --> 00:40:37,660
 [INAUDIBLE]

777
00:40:37,660 --> 00:40:38,160
 Yeah.

778
00:40:38,160 --> 00:40:40,780
 [INAUDIBLE]

779
00:40:40,780 --> 00:40:41,300
 Awesome.

780
00:40:41,300 --> 00:40:41,800
 Awesome.

781
00:40:41,800 --> 00:40:47,460
 So I'm plotting in 3D because I have three joint angles.

782
00:40:47,460 --> 00:40:49,860
 So it's not Cartesian xyz.

783
00:40:49,860 --> 00:40:54,620
 It's q1, q2, q3 are defining the three axes of this plot.

784
00:40:55,620 --> 00:40:57,100
 Thank you for asking that.

785
00:40:57,100 --> 00:40:59,860
 So the point there means a particular choice

786
00:40:59,860 --> 00:41:01,300
 of joint angles.

787
00:41:01,300 --> 00:41:02,780
 And we're trying to-- yeah, perfect.

788
00:41:02,780 --> 00:41:04,140
 Thank you for asking that.

789
00:41:04,140 --> 00:41:06,980
 And so this is telling me I have a favorite joint

790
00:41:06,980 --> 00:41:09,620
 angle, which is my comfortable home position.

791
00:41:09,620 --> 00:41:13,740
 And I'm quadratically penalizing things away from it.

792
00:41:13,740 --> 00:41:17,740
 And the solution turns out to be here

793
00:41:17,740 --> 00:41:20,780
 on the landscape, that blue.

794
00:41:20,780 --> 00:41:23,100
 But if I start turning on the constraints here--

795
00:41:23,100 --> 00:41:26,220
 let's turn them on one at a time here.

796
00:41:26,220 --> 00:41:31,340
 The position constraint, which was that annulus,

797
00:41:31,340 --> 00:41:33,940
 I don't give it that annulus directly.

798
00:41:33,940 --> 00:41:39,460
 I give it the xyz location and ask

799
00:41:39,460 --> 00:41:42,740
 it to be inside the constraints.

800
00:41:42,740 --> 00:41:45,540
 So if I plot the xyz, the way I plotted this here

801
00:41:45,540 --> 00:41:47,660
 is for each of the constraints, I

802
00:41:47,660 --> 00:41:51,340
 plotted a region which is red if it's infeasible

803
00:41:51,340 --> 00:41:53,180
 and blue if it's feasible.

804
00:41:53,180 --> 00:41:56,500
 But it's a smooth function, you see?

805
00:41:56,500 --> 00:42:00,460
 So it's only got a small annulus of possible feasible solutions.

806
00:42:00,460 --> 00:42:03,860
 But they are the level set of some curve.

807
00:42:03,860 --> 00:42:07,780
 So SNOPT knows it needs to get this function

808
00:42:07,780 --> 00:42:09,740
 to be inside some band.

809
00:42:09,740 --> 00:42:11,580
 And it's allowed to use gradients and the like

810
00:42:11,580 --> 00:42:15,460
 to try to move me down into that band.

811
00:42:15,460 --> 00:42:19,220
 But there's also a-- so in y, it's

812
00:42:19,220 --> 00:42:21,300
 trivially true because the robot can't move in y.

813
00:42:21,300 --> 00:42:25,300
 So all of the joint angles are satisfying in y.

814
00:42:25,300 --> 00:42:29,740
 And then in z, there's also another band.

815
00:42:29,740 --> 00:42:33,380
 And those two only intersect in a small little thing.

816
00:42:33,380 --> 00:42:35,580
 It's using the gradients of those individual functions

817
00:42:35,580 --> 00:42:36,940
 to try to find it.

818
00:42:36,940 --> 00:42:39,740
 But it's a nightmare of a problem.

819
00:42:39,740 --> 00:42:43,660
 The bounding box constraint was just the joint limits.

820
00:42:43,660 --> 00:42:45,420
 And then the minimum distance constraint

821
00:42:45,420 --> 00:42:47,980
 is the big scary one, right?

822
00:42:47,980 --> 00:42:49,360
 It's a little bit less scary when

823
00:42:49,360 --> 00:42:52,060
 I show you it as the full distance computation instead

824
00:42:52,060 --> 00:42:53,740
 of just the clips.

825
00:42:53,740 --> 00:42:56,140
 But it's still a hard problem for SNOPT to solve.

826
00:42:56,140 --> 00:42:58,180
 So be nice to your solver.

827
00:42:58,180 --> 00:42:59,380
 It's solving a hard problem.

828
00:42:59,380 --> 00:43:03,180
 Questions about that?

829
00:43:03,180 --> 00:43:11,500
 IK is-- I think it's a workhorse.

830
00:43:11,500 --> 00:43:14,460
 You'll use it in-- mature manipulation tools

831
00:43:14,460 --> 00:43:15,980
 will use these queries.

832
00:43:15,980 --> 00:43:18,140
 They can be made fairly robust.

833
00:43:18,140 --> 00:43:21,700
 But even the best people in the field

834
00:43:21,700 --> 00:43:24,780
 still complain about IK failures and the like.

835
00:43:24,780 --> 00:43:27,340
 So there are problems that we would

836
00:43:27,340 --> 00:43:29,660
 like to be able to solve in this kind of space

837
00:43:29,660 --> 00:43:31,700
 that we can't quite solve.

838
00:43:31,700 --> 00:43:37,060
 Can't solve reliably enough to ship, let's say, in a product.

839
00:43:37,060 --> 00:43:38,940
 There are versions of this that try

840
00:43:38,940 --> 00:43:42,380
 to solve the global optimization problem.

841
00:43:42,380 --> 00:43:44,300
 We have one of them implemented in Drake.

842
00:43:44,300 --> 00:43:45,680
 You can play with it if you want.

843
00:43:45,680 --> 00:43:50,500
 It consumes a smaller vocabulary of possible constraints

844
00:43:50,500 --> 00:43:54,300
 that we know how to do stronger optimization on.

845
00:43:54,300 --> 00:43:56,740
 But it's-- and it solves much slower.

846
00:43:56,740 --> 00:43:58,400
 It would not solve at interactive rates.

847
00:43:58,400 --> 00:44:00,460
 It solves for the dual arm.

848
00:44:00,460 --> 00:44:02,740
 It's less than a minute, but it's more than a second.

849
00:44:02,740 --> 00:44:06,280
 OK.

850
00:44:06,280 --> 00:44:13,940
 So kinematic trajectory-- let's take-- this

851
00:44:13,940 --> 00:44:15,980
 is a good time to take a quick stretch, yeah?

852
00:44:15,980 --> 00:44:17,980
 Before I jump into the trajectory optimization

853
00:44:17,980 --> 00:44:18,480
 version.

854
00:44:18,480 --> 00:44:22,860
 And feel free to think about questions

855
00:44:22,860 --> 00:44:23,860
 while you're stretching.

856
00:44:23,860 --> 00:44:40,140
 I love that.

857
00:44:40,140 --> 00:44:42,660
 The landscape isn't just hard for SNOP.

858
00:44:42,660 --> 00:44:44,860
 It's apparently hard for Safari.

859
00:44:44,860 --> 00:44:50,660
 Your web page is using significant energy.

860
00:44:50,660 --> 00:44:54,500
 Closing it may improve the performance of this device.

861
00:44:54,500 --> 00:44:59,300
 That's just drawing it, not even solving for it.

862
00:44:59,300 --> 00:45:00,020
 OK.

863
00:45:00,020 --> 00:45:03,620
 So my promise at the beginning was

864
00:45:03,620 --> 00:45:06,220
 that we were going to stop smacking into the shell--

865
00:45:06,220 --> 00:45:08,780
 into the cameras and the like.

866
00:45:08,780 --> 00:45:11,020
 And we're just talking about inverse kinematics so far.

867
00:45:11,020 --> 00:45:14,500
 But my claim now is that if you understand that,

868
00:45:14,500 --> 00:45:16,780
 you've actually solved a lot-- you've gotten yourself most

869
00:45:16,780 --> 00:45:18,740
 of the way to solving trajectories.

870
00:45:18,740 --> 00:45:19,580
 OK.

871
00:45:19,580 --> 00:45:20,900
 And the idea is pretty simple.

872
00:45:20,900 --> 00:45:38,820
 Let me use that simple landscape.

873
00:45:38,820 --> 00:45:44,780
 You know-- oops, that was-- my pendulum landscape

874
00:45:44,780 --> 00:45:46,540
 where I had a bunch of feasible solutions.

875
00:45:46,540 --> 00:45:52,060
 And so far, I've been saying, find me

876
00:45:52,060 --> 00:45:55,900
 a point somewhere in this landscape that

877
00:45:55,900 --> 00:45:58,420
 satisfies some criteria.

878
00:45:58,420 --> 00:45:59,380
 OK.

879
00:45:59,380 --> 00:46:01,980
 The motion planning problem is going

880
00:46:01,980 --> 00:46:07,380
 to be, find me a bunch of points that all satisfy the criteria.

881
00:46:07,380 --> 00:46:07,940
 Right?

882
00:46:07,940 --> 00:46:10,180
 Maybe they satisfy-- you could put different costs

883
00:46:10,180 --> 00:46:13,580
 and constraints on the points.

884
00:46:13,580 --> 00:46:14,700
 OK.

885
00:46:14,700 --> 00:46:17,700
 And you're going to put some sort of conditions

886
00:46:17,700 --> 00:46:24,340
 that sort of ask these to have some continuity between them.

887
00:46:24,340 --> 00:46:26,060
 That's the main thing I want you to think

888
00:46:26,060 --> 00:46:28,720
 about when you're thinking about extending inverse kinematics

889
00:46:28,720 --> 00:46:30,700
 into kinematic trajectory optimization

890
00:46:30,700 --> 00:46:33,380
 is, I'm just going to find many points

891
00:46:33,380 --> 00:46:36,820
 and ask them to be connected by a curve.

892
00:46:36,820 --> 00:46:38,220
 OK.

893
00:46:38,220 --> 00:46:42,140
 Remember, my inverse kinematics solve, as I pulled it around,

894
00:46:42,140 --> 00:46:45,100
 there wasn't any guarantee that it would find smooth solutions.

895
00:46:45,100 --> 00:46:47,300
 It could go like this, and then suddenly like this.

896
00:46:47,300 --> 00:46:47,800
 Right?

897
00:46:47,800 --> 00:46:51,620
 So I'm asking it now to just not only find independently

898
00:46:51,620 --> 00:46:54,580
 good points, but to actually have them connected

899
00:46:54,580 --> 00:46:56,300
 by some simple constraints.

900
00:46:56,300 --> 00:46:59,760
 OK.

901
00:46:59,760 --> 00:47:02,060
 So maybe I'll even show you it working,

902
00:47:02,060 --> 00:47:04,580
 and then we can get back to how it works.

903
00:47:05,580 --> 00:47:15,820
 So this is kinematic trajectory optimization.

904
00:47:15,820 --> 00:47:23,380
 Let's do the reaching into the shelves example here.

905
00:47:23,380 --> 00:47:23,880
 OK?

906
00:47:23,880 --> 00:47:28,780
 Which is this one.

907
00:47:28,780 --> 00:47:31,380
 OK.

908
00:47:31,380 --> 00:47:33,580
 You understand, I think, how to write an optimization

909
00:47:33,580 --> 00:47:37,620
 to find a hand in this pose or in the red pose.

910
00:47:37,620 --> 00:47:39,540
 But what it's found this time is a sequence

911
00:47:39,540 --> 00:47:42,860
 of poses that goes from one to the other.

912
00:47:42,860 --> 00:47:43,340
 OK.

913
00:47:43,340 --> 00:47:45,780
 And I can just move along that as a trajectory

914
00:47:45,780 --> 00:47:46,860
 that goes back and forth.

915
00:47:46,860 --> 00:47:53,020
 OK.

916
00:47:53,020 --> 00:47:57,780
 And I'll do it in a slightly different order here.

917
00:47:57,780 --> 00:48:06,460
 But I can also do, for instance, the clutter clearing example

918
00:48:06,460 --> 00:48:07,420
 here.

919
00:48:07,420 --> 00:48:08,940
 So remember, the problem that I had

920
00:48:08,940 --> 00:48:10,820
 was if I was reaching here, I might sometimes

921
00:48:10,820 --> 00:48:12,660
 smack into the cameras going around.

922
00:48:12,660 --> 00:48:13,500
 OK.

923
00:48:13,500 --> 00:48:16,460
 So now I find solutions.

924
00:48:16,460 --> 00:48:18,700
 I actually thought it was going to find a solution

925
00:48:18,700 --> 00:48:21,500
 inside the camera.

926
00:48:21,500 --> 00:48:25,900
 It found a solution that went around the cameras.

927
00:48:25,900 --> 00:48:27,940
 I mean, it's my fault for putting cameras right

928
00:48:27,940 --> 00:48:30,660
 in the middle of the reasonable space.

929
00:48:30,660 --> 00:48:31,580
 OK.

930
00:48:31,580 --> 00:48:34,580
 But it satisfies all the constraints.

931
00:48:34,580 --> 00:48:35,500
 OK.

932
00:48:35,500 --> 00:48:38,620
 And finds a nice smooth motion.

933
00:48:38,620 --> 00:48:41,900
 And you can put velocity constraints on the start

934
00:48:41,900 --> 00:48:43,100
 and the end if you want.

935
00:48:43,100 --> 00:48:44,020
 OK.

936
00:48:44,020 --> 00:48:47,300
 So let's look at this a little bit more carefully.

937
00:48:47,300 --> 00:48:50,820
 So the collision geometry that is using in that minimum distance

938
00:48:50,820 --> 00:48:53,260
 constraint, I can turn that on.

939
00:48:53,260 --> 00:48:54,660
 This is what it looks like.

940
00:48:54,660 --> 00:48:55,720
 OK.

941
00:48:55,720 --> 00:48:59,380
 So I have a simpler geometry for the robot.

942
00:48:59,380 --> 00:49:00,420
 I just made boxes.

943
00:49:00,420 --> 00:49:01,300
 OK.

944
00:49:01,300 --> 00:49:05,100
 And I put a big sphere for the hand.

945
00:49:05,100 --> 00:49:07,060
 Because not only because the hand is--

946
00:49:07,060 --> 00:49:08,100
 I mean, the hand could be a box.

947
00:49:08,100 --> 00:49:08,940
 That's fine.

948
00:49:08,940 --> 00:49:11,220
 But it's going to pick up some things.

949
00:49:11,220 --> 00:49:13,300
 So I wanted to have a conservative region.

950
00:49:13,300 --> 00:49:16,020
 Probably the mustard bottle would snip outside there.

951
00:49:16,020 --> 00:49:17,300
 I'd still smack into it.

952
00:49:17,300 --> 00:49:19,220
 I could have done a better job on that.

953
00:49:19,220 --> 00:49:20,260
 It was late.

954
00:49:20,260 --> 00:49:22,860
 Actually, it was early.

955
00:49:22,860 --> 00:49:23,420
 OK.

956
00:49:23,420 --> 00:49:26,640
 But within that approximation, it

957
00:49:26,640 --> 00:49:29,520
 does a pretty good job of solving the problem.

958
00:49:29,520 --> 00:49:38,760
 I have to say, writing up these examples

959
00:49:38,760 --> 00:49:41,240
 was a nice reminder not only of how well it can work,

960
00:49:41,240 --> 00:49:44,760
 but how annoying it can be when it doesn't work.

961
00:49:44,760 --> 00:49:47,680
 So let me show you, I guess Mark Riebert would

962
00:49:47,680 --> 00:49:50,960
 call it the unvarnished truth, or somehow the dirty laundry,

963
00:49:50,960 --> 00:49:51,840
 if you will.

964
00:49:51,840 --> 00:49:52,340
 OK.

965
00:49:52,340 --> 00:49:56,280
 So it's not quite-- the code, I think,

966
00:49:56,280 --> 00:49:58,320
 is fairly clean in the sense that you just

967
00:49:58,320 --> 00:50:00,960
 add the natural costs and constraints to the curve.

968
00:50:00,960 --> 00:50:03,500
 So you basically say, I'm going to make a kinematic trajectory

969
00:50:03,500 --> 00:50:04,840
 optimization.

970
00:50:04,840 --> 00:50:06,940
 I'm going to add my joint limit constraints.

971
00:50:06,940 --> 00:50:08,580
 I'm going to add some velocity limits.

972
00:50:08,580 --> 00:50:10,400
 Those just come straight out of things.

973
00:50:10,400 --> 00:50:11,620
 I think it's fairly readable.

974
00:50:11,620 --> 00:50:12,940
 I'm going to say, I want my start

975
00:50:12,940 --> 00:50:14,660
 to be in this position constraint,

976
00:50:14,660 --> 00:50:17,620
 my end to be in some position constraint.

977
00:50:17,620 --> 00:50:19,620
 It's all very natural, easily justified.

978
00:50:19,620 --> 00:50:23,940
 The only cost is shortest path.

979
00:50:23,940 --> 00:50:26,580
 I basically say, I want the time to be small,

980
00:50:26,580 --> 00:50:29,060
 and I want the distance to be small.

981
00:50:29,060 --> 00:50:30,980
 And this is a strong recommendation

982
00:50:30,980 --> 00:50:34,140
 I want to make to you in life.

983
00:50:34,140 --> 00:50:36,660
 Don't jam all kinds of things into your objective

984
00:50:36,660 --> 00:50:37,500
 and constraints.

985
00:50:37,500 --> 00:50:40,220
 Be very minimal in the way you write your constraints,

986
00:50:40,220 --> 00:50:44,120
 and try to write exactly the cost function you want.

987
00:50:44,120 --> 00:50:48,740
 If you start cost function tuning, life gets sad.

988
00:50:48,740 --> 00:50:51,740
 Some of you know what I mean.

989
00:50:51,740 --> 00:50:55,100
 RL, in particular, has that trap.

990
00:50:55,100 --> 00:50:57,620
 OK, here's the one thing I don't like about the example

991
00:50:57,620 --> 00:50:59,060
 as it is.

992
00:50:59,060 --> 00:51:02,380
 I actually call solve twice.

993
00:51:02,380 --> 00:51:07,180
 I first solve with pretending the shelf is not there.

994
00:51:07,180 --> 00:51:10,260
 And then I solve again using that as an initial guess

995
00:51:10,260 --> 00:51:13,420
 to give the shelf that is there.

996
00:51:13,420 --> 00:51:16,380
 If I don't do that-- let's see if I can adjust that enough

997
00:51:16,380 --> 00:51:25,420
 to-- let me just take that out and see what happens.

998
00:51:25,420 --> 00:51:28,380
 This is the shelf example.

999
00:51:28,380 --> 00:51:30,740
 OK, to be fair, it said it fails.

1000
00:51:30,740 --> 00:51:32,260
 I would never have executed that,

1001
00:51:32,260 --> 00:51:35,460
 but it just was unable to find a solution.

1002
00:51:35,460 --> 00:51:40,420
 In fact, I can do less severe things to it.

1003
00:51:40,420 --> 00:51:42,580
 So trajectory optimization failed.

1004
00:51:42,580 --> 00:51:43,580
 SNOP was unhappy.

1005
00:51:43,580 --> 00:51:45,460
 It was able to satisfy the constraints.

1006
00:51:45,460 --> 00:51:48,380
 It wasn't-- I wasn't surprised and thought

1007
00:51:48,380 --> 00:51:50,180
 I should execute it.

1008
00:51:50,180 --> 00:51:53,580
 But it didn't solve the problem I asked it to solve.

1009
00:51:53,580 --> 00:51:59,540
 In fact, if I even change the sphere on the hand

1010
00:51:59,540 --> 00:52:04,100
 to be a box, then if you think about what happens,

1011
00:52:04,100 --> 00:52:09,140
 if my straight line trajectory-- or if the shelf wasn't there,

1012
00:52:09,140 --> 00:52:12,820
 it would go from here straight through to down here.

1013
00:52:12,820 --> 00:52:13,700
 OK?

1014
00:52:13,700 --> 00:52:18,580
 If I have box collision for my hand and box for the shelf

1015
00:52:18,580 --> 00:52:21,100
 and it goes into penetration, there's

1016
00:52:21,100 --> 00:52:24,780
 nothing that will help it know which direction to get out.

1017
00:52:24,780 --> 00:52:27,100
 So this was my intuition, which made me say, well,

1018
00:52:27,100 --> 00:52:28,720
 if I put a sphere on there, then it'll

1019
00:52:28,720 --> 00:52:32,040
 have some sense of which it could move in directions

1020
00:52:32,040 --> 00:52:36,020
 to get different-- but this is the dirty laundry, right?

1021
00:52:36,020 --> 00:52:38,740
 So let's just see what happens if I take that off.

1022
00:52:42,940 --> 00:52:44,380
 Oh.

1023
00:52:44,380 --> 00:52:45,380
 Oh, no, it still failed.

1024
00:52:45,380 --> 00:52:46,740
 OK.

1025
00:52:46,740 --> 00:52:47,580
 What did it do?

1026
00:52:47,580 --> 00:52:48,080
 Crazy.

1027
00:52:48,080 --> 00:52:51,620
 But this curve, actually, is the visualization of the solve

1028
00:52:51,620 --> 00:52:52,420
 as it's happening.

1029
00:52:52,420 --> 00:52:54,540
 So if I were to run it again, you'll see--

1030
00:52:54,540 --> 00:52:57,220
 you can actually see it struggling.

1031
00:52:57,220 --> 00:53:00,140
 It's like trying all kinds of crazy solutions.

1032
00:53:00,140 --> 00:53:01,580
 Woo.

1033
00:53:01,580 --> 00:53:03,820
 How did it solve it pretty well that one time?

1034
00:53:03,820 --> 00:53:05,540
 I should have left it and looked at that,

1035
00:53:05,540 --> 00:53:08,740
 but clearly I just got lucky.

1036
00:53:08,740 --> 00:53:10,180
 What is that?

1037
00:53:10,180 --> 00:53:10,740
 Oh, no, no.

1038
00:53:10,740 --> 00:53:11,140
 Oh, I see.

1039
00:53:11,140 --> 00:53:12,460
 I've seen that one before, too.

1040
00:53:12,460 --> 00:53:15,580
 So it went up, down, OK, whatever.

1041
00:53:15,580 --> 00:53:20,140
 The point is, I think these tools work extremely

1042
00:53:20,140 --> 00:53:23,900
 well when you have a reasonable guess,

1043
00:53:23,900 --> 00:53:26,540
 but they're not solving the really global optimization

1044
00:53:26,540 --> 00:53:29,180
 problem.

1045
00:53:29,180 --> 00:53:31,140
 OK, yes?

1046
00:53:31,140 --> 00:53:35,140
 Can we add time to the collision between the curve

1047
00:53:35,140 --> 00:53:38,660
 and the collision and the object that kind of avoided it?

1048
00:53:38,660 --> 00:53:39,700
 For sure.

1049
00:53:39,700 --> 00:53:53,020
 So the way-- in fact, I had to be a little bit--

1050
00:53:53,020 --> 00:53:55,100
 so I make this minimum distance constraint,

1051
00:53:55,100 --> 00:53:58,100
 saying that I want everything to be at least one millimeter out

1052
00:53:58,100 --> 00:53:59,420
 of collision.

1053
00:53:59,420 --> 00:54:02,460
 And this is my-- ignore-- don't even

1054
00:54:02,460 --> 00:54:06,540
 consider bodies that are more than 10 centimeters out.

1055
00:54:09,420 --> 00:54:11,380
 But I had to actually go through and say,

1056
00:54:11,380 --> 00:54:14,900
 I want you to evaluate that constraint at 25 points

1057
00:54:14,900 --> 00:54:17,100
 along the length of the trajectory.

1058
00:54:17,100 --> 00:54:20,420
 But I could have added that at just the beginning,

1059
00:54:20,420 --> 00:54:23,820
 at just the end, and I can choose where to add it.

1060
00:54:23,820 --> 00:54:26,380
 The particular parameterization I've

1061
00:54:26,380 --> 00:54:28,260
 implemented here for the kinematic trajectory

1062
00:54:28,260 --> 00:54:31,180
 optimization-- I'll say a little bit in the next bit--

1063
00:54:31,180 --> 00:54:34,060
 but it actually separates out the path

1064
00:54:34,060 --> 00:54:37,140
 that it's optimizing from the time parameterization

1065
00:54:37,140 --> 00:54:38,380
 of the optimization.

1066
00:54:38,380 --> 00:54:40,660
 That allows us to write a few things and more things

1067
00:54:40,660 --> 00:54:41,860
 convexly.

1068
00:54:41,860 --> 00:54:46,180
 So that's the only subtlety to your question.

1069
00:54:46,180 --> 00:54:48,060
 So yes, you can definitely say, like,

1070
00:54:48,060 --> 00:54:51,300
 halfway through the execution, I don't want to be in collision,

1071
00:54:51,300 --> 00:54:52,640
 but later I can.

1072
00:54:52,640 --> 00:54:55,060
 And there are other formulations that might be more natural

1073
00:54:55,060 --> 00:54:56,980
 if you know that you have a ball, for instance,

1074
00:54:56,980 --> 00:54:57,900
 flying through the air and you want

1075
00:54:57,900 --> 00:54:59,180
 to grab it at a certain thing.

1076
00:54:59,180 --> 00:55:01,780
 Maybe you don't use that separate parameterization.

1077
00:55:01,780 --> 00:55:02,280
 [INAUDIBLE]

1078
00:55:08,220 --> 00:55:09,820
 You can write combined constraints even

1079
00:55:09,820 --> 00:55:12,900
 in this formulation, too.

1080
00:55:12,900 --> 00:55:15,020
 I emphasize the things that could be convex

1081
00:55:15,020 --> 00:55:16,980
 when they could be, which is the reason.

1082
00:55:16,980 --> 00:55:19,320
 But you could certainly write the non-convex constraints

1083
00:55:19,320 --> 00:55:20,060
 on this solver.

1084
00:55:20,060 --> 00:55:25,060
 I worked pretty hard on this.

1085
00:55:25,060 --> 00:55:27,540
 I would say I got a little obsessed with this,

1086
00:55:27,540 --> 00:55:32,100
 trying to make this good, partly because last year I

1087
00:55:32,100 --> 00:55:34,080
 didn't have this for you guys, and I

1088
00:55:34,080 --> 00:55:36,860
 felt that a lot of projects would have benefited from it.

1089
00:55:36,860 --> 00:55:40,220
 So this is actually-- the code that's running this is going

1090
00:55:40,220 --> 00:55:42,140
 to-- I'm going to push it to Drake

1091
00:55:42,140 --> 00:55:43,980
 and go through code review on it this week.

1092
00:55:43,980 --> 00:55:45,620
 So it should be locked in.

1093
00:55:45,620 --> 00:55:47,100
 It's got full test coverage.

1094
00:55:47,100 --> 00:55:48,500
 It's pretty mature and good.

1095
00:55:48,500 --> 00:55:52,800
 [INAUDIBLE]

1096
00:55:52,800 --> 00:56:00,060
 When I don't solve it twice.

1097
00:56:00,060 --> 00:56:05,500
 Yeah, so if you do nothing, then it's just going to take--

1098
00:56:05,500 --> 00:56:09,020
 I mean, it's just going to pick q as some slightly non-zero

1099
00:56:09,020 --> 00:56:11,980
 trajectory just to avoid the local minima that often happen

1100
00:56:11,980 --> 00:56:12,740
 at 0.

1101
00:56:12,740 --> 00:56:14,940
 But basically, it's a default trajectory.

1102
00:56:14,940 --> 00:56:17,740
 It knows nothing about your problem.

1103
00:56:17,740 --> 00:56:19,240
 So for the second problem, actually, I

1104
00:56:19,240 --> 00:56:20,700
 didn't have to solve it twice.

1105
00:56:20,700 --> 00:56:22,060
 But I can actually show you--

1106
00:56:22,060 --> 00:56:27,180
 yeah, uncomment this to see the initial guess.

1107
00:56:27,180 --> 00:56:29,660
 I thought that-- I didn't know you were going to ask that,

1108
00:56:29,660 --> 00:56:31,160
 but I thought it was interesting,

1109
00:56:31,160 --> 00:56:35,060
 so I put that in just in case.

1110
00:56:35,060 --> 00:56:37,140
 So I just made this as an initial guess.

1111
00:56:37,140 --> 00:56:40,020
 I just made a trajectory that went from here to here,

1112
00:56:40,020 --> 00:56:41,180
 just a comfortable position.

1113
00:56:41,180 --> 00:56:43,060
 I only rotated the base.

1114
00:56:43,060 --> 00:56:45,060
 And the reason I needed to do that at all

1115
00:56:45,060 --> 00:56:47,500
 was because the solver kept trying

1116
00:56:47,500 --> 00:56:49,940
 to go the other way around.

1117
00:56:49,940 --> 00:56:54,020
 It would be like, here, and hang itself, basically.

1118
00:56:54,020 --> 00:56:55,900
 So I'd be like, OK, I have to at least tell it

1119
00:56:55,900 --> 00:56:57,300
 I want it to go that way.

1120
00:56:57,300 --> 00:57:00,180
 And that was enough, and it found good solutions.

1121
00:57:00,180 --> 00:57:07,660
 [INAUDIBLE]

1122
00:57:07,660 --> 00:57:10,940
 The question is, why did I pick that particular cost?

1123
00:57:10,940 --> 00:57:15,220
 So I did minimum time and minimum path length.

1124
00:57:15,220 --> 00:57:16,740
 There's a couple other formulations

1125
00:57:16,740 --> 00:57:19,340
 that are naturally convex in this parameterization.

1126
00:57:19,340 --> 00:57:23,700
 So I biased myself towards the convex objectives.

1127
00:57:23,700 --> 00:57:27,780
 But acceleration, we don't know how to do convexly, ironically.

1128
00:57:27,780 --> 00:57:29,700
 You would think if you could do one derivative,

1129
00:57:29,700 --> 00:57:30,980
 you could do two and three.

1130
00:57:30,980 --> 00:57:33,180
 But we know how to do positions and velocities.

1131
00:57:33,180 --> 00:57:34,780
 We don't know how to do accelerations,

1132
00:57:34,780 --> 00:57:40,580
 because t squared makes things non-convex, roughly.

1133
00:57:40,580 --> 00:57:44,100
 So that is reflecting a bias, not just as a roboticist,

1134
00:57:44,100 --> 00:57:46,780
 but as the guy who had to type the code in.

1135
00:57:46,780 --> 00:57:49,820
 And I know that makes the solvers better.

1136
00:57:49,820 --> 00:57:53,460
 I think there are other ways that I

1137
00:57:53,460 --> 00:57:56,980
 will talk about at some point, that you can minimize

1138
00:57:56,980 --> 00:57:59,380
 acceleration convexly if you choose.

1139
00:57:59,380 --> 00:58:01,500
 There's a-- after you've optimized your path,

1140
00:58:01,500 --> 00:58:04,420
 if you lock the path and then just optimize the trajectory,

1141
00:58:04,420 --> 00:58:06,660
 then you can put even more constraints on accelerations

1142
00:58:06,660 --> 00:58:09,700
 and the like and optimize that.

1143
00:58:09,700 --> 00:58:12,580
 So for instance, like the DexEye use case,

1144
00:58:12,580 --> 00:58:14,960
 I would recommend to them to solve the best optimization you

1145
00:58:14,960 --> 00:58:17,220
 can with the weaker constraints.

1146
00:58:17,220 --> 00:58:20,460
 But then at the last instant, solve it again

1147
00:58:20,460 --> 00:58:22,060
 with the path fixed.

1148
00:58:22,060 --> 00:58:23,740
 And you're just going to make sure you're

1149
00:58:23,740 --> 00:58:27,660
 moving exactly along the rails of that path.

1150
00:58:27,660 --> 00:58:29,820
 So there's a whole toolkit here.

1151
00:58:29,820 --> 00:58:35,220
 And yeah, I think a lot to know, but it's good.

1152
00:58:35,220 --> 00:58:41,380
 Questions, other questions about that?

1153
00:58:41,380 --> 00:58:41,880
 Yes?

1154
00:58:41,880 --> 00:58:42,380
 [INAUDIBLE]

1155
00:58:42,380 --> 00:58:47,300
 That's a great question.

1156
00:58:47,300 --> 00:58:49,660
 So I have done nothing in this formulation

1157
00:58:49,660 --> 00:58:50,940
 to talk about uncertainty.

1158
00:58:50,940 --> 00:58:54,620
 It's just hard, don't be in the object or not.

1159
00:58:54,620 --> 00:58:57,880
 It is super useful to talk about uncertainty.

1160
00:58:57,880 --> 00:58:59,540
 And there are some forms of uncertainty

1161
00:58:59,540 --> 00:59:02,260
 that you can put in in nice ways and convex ways and the like.

1162
00:59:02,260 --> 00:59:05,660
 Typically, Gaussians are a good thing.

1163
00:59:05,660 --> 00:59:08,420
 But if you move a complicated robot,

1164
00:59:08,420 --> 00:59:10,660
 it doesn't stay Gauss-- distributions don't stay

1165
00:59:10,660 --> 00:59:12,260
 Gaussian and the like.

1166
00:59:12,260 --> 00:59:14,940
 So yes, there's a topic that I would

1167
00:59:14,940 --> 00:59:18,900
 lump under belief space planning or planning under uncertainty

1168
00:59:18,900 --> 00:59:21,660
 or planning for information gathering that

1169
00:59:21,660 --> 00:59:23,420
 would address that very nicely.

1170
00:59:23,420 --> 00:59:28,100
 But it typically means higher hardware optimization problems.

1171
00:59:28,100 --> 00:59:29,700
 Yeah.

1172
00:59:29,700 --> 00:59:30,700
 Yes?

1173
00:59:30,700 --> 00:59:31,200
 [INAUDIBLE]

1174
00:59:31,200 --> 00:59:39,860
 That's a really good question.

1175
00:59:39,860 --> 00:59:43,860
 So can you solve this fast enough to solve it online?

1176
00:59:43,860 --> 00:59:48,700
 So that idea would be called model predictive control, MPC,

1177
00:59:48,700 --> 00:59:49,740
 if you see that name.

1178
00:59:49,740 --> 00:59:54,220
 [WRITING ON BOARD]

1179
00:59:54,220 --> 01:00:03,940
 You roughly re-solve at each time step with the shifted data.

1180
01:00:03,940 --> 01:00:05,860
 You know, you're kind of moving as you

1181
01:00:05,860 --> 01:00:08,180
 know that you've executed.

1182
01:00:08,180 --> 01:00:12,540
 I would say I don't have evidence for this example

1183
01:00:12,540 --> 01:00:15,500
 one way or the other, because the MPC problem,

1184
01:00:15,500 --> 01:00:17,500
 it would be bad.

1185
01:00:17,500 --> 01:00:20,580
 It would be naive to solve the problem from scratch

1186
01:00:20,580 --> 01:00:21,660
 every time step.

1187
01:00:21,660 --> 01:00:24,700
 You want to use your previous solve not only

1188
01:00:24,700 --> 01:00:26,540
 as an initial guess for the other solve,

1189
01:00:26,540 --> 01:00:28,300
 but typically there's a lot of problem data

1190
01:00:28,300 --> 01:00:30,540
 that your solver collects while it's solving that first one

1191
01:00:30,540 --> 01:00:31,820
 that you want to pass.

1192
01:00:31,820 --> 01:00:34,300
 That would be called a warm start for your solver.

1193
01:00:34,300 --> 01:00:37,660
 You say, I'm going to solve an almost identical problem.

1194
01:00:37,660 --> 01:00:41,540
 I just change it a little bit, reuse as much as you can.

1195
01:00:41,540 --> 01:00:43,140
 And so in that regime, I do think

1196
01:00:43,140 --> 01:00:46,180
 this would be real-time compatible.

1197
01:00:46,180 --> 01:00:50,220
 But again, it's going to be limited to local changes.

1198
01:00:50,220 --> 01:00:54,140
 If it suddenly had to go a different way around the bin

1199
01:00:54,140 --> 01:00:56,740
 or around the cameras, you can't guarantee

1200
01:00:56,740 --> 01:00:57,820
 it's going to solve that.

1201
01:00:57,820 --> 01:01:00,380
 In fact, in general, solving the nonlinear optimization

1202
01:01:00,380 --> 01:01:04,180
 on the fly is a little risky, I'd say.

1203
01:01:04,180 --> 01:01:07,820
 For Atlas, for instance, we did great trajectory optimization

1204
01:01:07,820 --> 01:01:10,100
 offline, but we didn't do it online

1205
01:01:10,100 --> 01:01:12,340
 because we didn't want to be running along with Atlas.

1206
01:01:12,340 --> 01:01:14,580
 And all of a sudden, it says, I can't find a solution.

1207
01:01:14,580 --> 01:01:17,180
 What are you going to do, right?

1208
01:01:17,180 --> 01:01:20,660
 So we didn't consider that robust enough.

1209
01:01:20,660 --> 01:01:24,940
 The people who do MPC in line would typically

1210
01:01:24,940 --> 01:01:28,380
 restrict themselves to convex problems.

1211
01:01:28,380 --> 01:01:30,760
 Actually, there's a ton of autonomous driving companies

1212
01:01:30,760 --> 01:01:33,060
 that are solving the nonlinear version on the fly, which

1213
01:01:33,060 --> 01:01:35,700
 is terrifying.

1214
01:01:35,700 --> 01:01:38,100
 So maybe it can be made robust enough.

1215
01:01:38,100 --> 01:01:40,140
 Typically, it's in some envelope where

1216
01:01:40,140 --> 01:01:41,460
 it's been sufficiently vetted.

1217
01:01:44,540 --> 01:01:47,140
 So let me tell you a little bit about the way

1218
01:01:47,140 --> 01:01:49,340
 to write these continuity constraints.

1219
01:01:49,340 --> 01:01:49,840
 Yeah?

1220
01:01:49,840 --> 01:01:54,420
 I think I said most of my dirty laundry.

1221
01:01:54,420 --> 01:01:57,500
 There's probably a little bit more dirty laundry.

1222
01:01:57,500 --> 01:02:08,220
 It's a pretty good example.

1223
01:02:08,220 --> 01:02:12,460
 So how do I write these continuity constraints?

1224
01:02:12,460 --> 01:02:17,860
 So remember when we did the piecewise pose, when

1225
01:02:17,860 --> 01:02:20,940
 we designed our key frames by hand

1226
01:02:20,940 --> 01:02:23,260
 and then just interpolated between them?

1227
01:02:23,260 --> 01:02:31,900
 We interpolated those using-- the class was piecewise pose

1228
01:02:31,900 --> 01:02:33,720
 because that was trying to do something

1229
01:02:33,720 --> 01:02:38,880
 clever about the quaternion interpolation on the rotation.

1230
01:02:38,880 --> 01:02:42,340
 But in general, this is a piecewise polynomial.

1231
01:02:42,340 --> 01:02:54,220
 In those cases, it was typically a cubic.

1232
01:02:54,220 --> 01:02:55,980
 And it's often called cubic splines.

1233
01:03:01,820 --> 01:03:08,920
 And so roughly speaking, for each interval of the piece,

1234
01:03:08,920 --> 01:03:14,540
 for each piece, a piecewise polynomial

1235
01:03:14,540 --> 01:03:16,640
 would just say I've got some coefficients

1236
01:03:16,640 --> 01:03:17,600
 that I'm trying to fit.

1237
01:03:17,600 --> 01:03:19,520
 These are my decision parameters in this case.

1238
01:03:19,520 --> 01:03:28,200
 Times my coefficients, which would typically

1239
01:03:28,200 --> 01:03:40,160
 be something like this, i to 0 to 3,

1240
01:03:40,160 --> 01:03:43,840
 something that is just a polynomial in time

1241
01:03:43,840 --> 01:03:48,680
 around some nominal-- relative to some starting

1242
01:03:48,680 --> 01:03:50,520
 place in the segment.

1243
01:03:50,520 --> 01:03:54,040
 And it's just a linear coefficient

1244
01:03:54,040 --> 01:03:56,920
 on some nonlinear function of time.

1245
01:03:56,920 --> 01:04:05,120
 This is a way to just say I've got some polynomial in time,

1246
01:04:05,120 --> 01:04:09,520
 which the parameters of that polynomial, this is like t

1247
01:04:09,520 --> 01:04:15,800
 plus 2t squared plus 3t cubed or something like that.

1248
01:04:15,800 --> 01:04:18,760
 The extra logic of making it a piecewise polynomial just

1249
01:04:18,760 --> 01:04:22,440
 says I'm going to make some intervals here.

1250
01:04:22,440 --> 01:04:24,280
 And in each interval, I'll ask this

1251
01:04:24,280 --> 01:04:26,660
 to be a polynomial of degree 3, this

1252
01:04:26,660 --> 01:04:30,760
 to be a degree 3 polynomial, this degree 3 polynomial.

1253
01:04:30,760 --> 01:04:34,600
 And you could put constraints on that make them smooth.

1254
01:04:34,600 --> 01:04:37,000
 So this is just a piecewise polynomial representation

1255
01:04:37,000 --> 01:04:39,640
 of a trajectory.

1256
01:04:39,640 --> 01:04:43,000
 If you ask in your optimization formulation,

1257
01:04:43,000 --> 01:04:46,440
 if you represent this as a piecewise polynomial,

1258
01:04:46,440 --> 01:04:51,240
 and instead of choosing q at time 0 and q at time t

1259
01:04:51,240 --> 01:04:53,760
 or whatever as your decision variables,

1260
01:04:53,760 --> 01:04:56,660
 you make the coefficients of this spline

1261
01:04:56,660 --> 01:04:58,660
 be your decision variables, then that's

1262
01:04:58,660 --> 01:05:02,460
 going to parameterize a curve through space.

1263
01:05:02,460 --> 01:05:04,520
 And the decision variables fit right

1264
01:05:04,520 --> 01:05:07,020
 into our optimization problem.

1265
01:05:07,020 --> 01:05:12,900
 I can make the forward kinematics at a certain time,

1266
01:05:12,900 --> 01:05:14,980
 find the alpha that makes the forward kinematics

1267
01:05:14,980 --> 01:05:19,500
 at a certain time, satisfy my objectives and constraints.

1268
01:05:19,500 --> 01:05:23,620
 I don't feel like everybody's with me.

1269
01:05:23,620 --> 01:05:30,140
 If I said, right now I'm saying I want f kinematics,

1270
01:05:30,140 --> 01:05:33,180
 let's say, at time 0, I've got this

1271
01:05:33,180 --> 01:05:36,300
 as a constraint in my optimizer.

1272
01:05:36,300 --> 01:05:45,620
 I can just write xg is f kin of sum over i alpha i with t

1273
01:05:45,620 --> 01:05:46,380
 set to 0.

1274
01:05:46,380 --> 01:05:52,900
 I just evaluate these this time.

1275
01:05:52,900 --> 01:05:55,900
 It gives me some constants here.

1276
01:05:55,900 --> 01:05:57,440
 And I put that through my kinematics.

1277
01:05:57,440 --> 01:06:00,740
 That's just another nonlinear and a smooth nonlinear function

1278
01:06:00,740 --> 01:06:03,100
 of the parameters alpha.

1279
01:06:03,100 --> 01:06:05,060
 So instead of changing q directly,

1280
01:06:05,060 --> 01:06:07,220
 I'm going to choose the coefficients of my spline.

1281
01:06:07,220 --> 01:06:14,580
 Those are the standard decision variables in an optimization.

1282
01:06:14,580 --> 01:06:22,340
 It turns out that people make different choices

1283
01:06:22,340 --> 01:06:26,980
 about-- the land of polynomials is a rich land.

1284
01:06:26,980 --> 01:06:28,600
 There's lots of different polynomials.

1285
01:06:28,600 --> 01:06:32,220
 These piecewise polynomials, which

1286
01:06:32,220 --> 01:06:35,300
 are representing just t to some power,

1287
01:06:35,300 --> 01:06:36,940
 they have some expressive power.

1288
01:06:36,940 --> 01:06:39,300
 They have some numerical properties.

1289
01:06:39,300 --> 01:06:42,340
 There are different classes of polynomial parameterizations

1290
01:06:42,340 --> 01:06:45,580
 that have different powers and different numerical properties.

1291
01:06:45,580 --> 01:06:47,900
 You might have heard of Chebyshev polynomials,

1292
01:06:47,900 --> 01:06:50,740
 Legendre polynomials, Bazier polynomials.

1293
01:06:50,740 --> 01:06:54,180
 Bernstein and Bazier are the same thing.

1294
01:06:54,180 --> 01:06:58,980
 And they all have different properties.

1295
01:06:58,980 --> 01:07:01,860
 But I think this is a super simple one to understand.

1296
01:07:01,860 --> 01:07:07,300
 I just forget-- I even forget I-- what if I just said this?

1297
01:07:07,300 --> 01:07:08,300
 t to the i.

1298
01:07:08,300 --> 01:07:09,640
 I should have just written that.

1299
01:07:09,640 --> 01:07:11,900
 That's easier.

1300
01:07:11,900 --> 01:07:13,900
 Forget about the fact that-- for each segment,

1301
01:07:13,900 --> 01:07:16,100
 you need to subtract off the interval.

1302
01:07:16,100 --> 01:07:18,980
 But I'm just saying alpha t to the i.

1303
01:07:18,980 --> 01:07:24,020
 This would be the simplest piecewise polynomial.

1304
01:07:24,020 --> 01:07:27,980
 It turns out there are other ways to write.

1305
01:07:27,980 --> 01:07:32,260
 Instead of just writing the simple polynomials of t

1306
01:07:32,260 --> 01:07:35,860
 to the i, there are other ways that you might just

1307
01:07:35,860 --> 01:07:40,580
 say some other polynomial function of t to the i that

1308
01:07:40,580 --> 01:07:43,060
 might give you different properties.

1309
01:07:43,060 --> 01:07:46,720
 And they can parameterize similar curves.

1310
01:07:46,720 --> 01:07:49,620
 The one I chose for this kinematic trajectory

1311
01:07:49,620 --> 01:07:55,820
 optimization was a Bazier polynomial, a Bazier spline,

1312
01:07:55,820 --> 01:07:56,320
 in fact.

1313
01:07:56,320 --> 01:08:15,380
 Not the only choice, but this is my choice,

1314
01:08:15,380 --> 01:08:21,860
 was a B-spline, which is, again, just a particular form

1315
01:08:21,860 --> 01:08:27,940
 of a curve like this, where this is still polynomial.

1316
01:08:27,940 --> 01:08:41,220
 Those ends turn on and off in an annoyingly complicated way.

1317
01:08:41,220 --> 01:08:44,660
 But the reason I chose Bernstein polynomials and the Bazier

1318
01:08:44,660 --> 01:08:48,420
 polynomials, this is--

1319
01:08:48,420 --> 01:08:57,940
 mostly it's Bazier, but I'm pretty sure

1320
01:08:57,940 --> 01:09:00,980
 it's the same as Bernstein.

1321
01:09:00,980 --> 01:09:04,620
 Let me not write that in case somebody walks in and says,

1322
01:09:04,620 --> 01:09:06,500
 what are you talking about?

1323
01:09:06,500 --> 01:09:08,660
 I'm sure it's Bazier.

1324
01:09:08,660 --> 01:09:10,620
 And I'm pretty sure it's Bernstein also.

1325
01:09:10,620 --> 01:09:11,120
 What's that?

1326
01:09:11,120 --> 01:09:14,600
 [INAUDIBLE]

1327
01:09:14,600 --> 01:09:16,280
 The Bernstein-- the Bazier basis?

1328
01:09:16,280 --> 01:09:18,160
 [INAUDIBLE]

1329
01:09:18,160 --> 01:09:19,600
 Oh.

1330
01:09:19,600 --> 01:09:20,400
 Oh, is that right?

1331
01:09:20,400 --> 01:09:22,160
 Yeah.

1332
01:09:22,160 --> 01:09:23,920
 OK, that's lame.

1333
01:09:23,920 --> 01:09:26,320
 He says it stands for basis, not Bazier.

1334
01:09:26,320 --> 01:09:28,960
 But the basis is a Bazier curve.

1335
01:09:28,960 --> 01:09:29,460
 Yeah?

1336
01:09:29,460 --> 01:09:34,440
 Yeah, OK.

1337
01:09:34,440 --> 01:09:35,080
 I believe you.

1338
01:09:39,480 --> 01:09:42,200
 The reason that I chose this representation

1339
01:09:42,200 --> 01:09:44,520
 is it has a couple of nice properties.

1340
01:09:44,520 --> 01:09:47,000
 The biggest one is it has a property that's

1341
01:09:47,000 --> 01:10:03,200
 called the convex hull property, which says-- so basically,

1342
01:10:03,200 --> 01:10:07,500
 the decision variables, the alphas that are in this curve

1343
01:10:07,500 --> 01:10:10,840
 have a geometric interpretation.

1344
01:10:10,840 --> 01:10:18,640
 Alpha 0, alpha 1, alpha 2, alpha 3, they are the control points.

1345
01:10:18,640 --> 01:10:22,040
 The decision variables become the control points.

1346
01:10:22,040 --> 01:10:28,200
 And I have some guarantee that for each subset of the--

1347
01:10:28,200 --> 01:10:31,200
 there's a particular order and degree of the polynomial, OK,

1348
01:10:31,200 --> 01:10:34,640
 but basically that I know that within each segment

1349
01:10:34,640 --> 01:10:36,560
 of the polynomial, the curve will

1350
01:10:36,560 --> 01:10:41,880
 be some linear interpolation of the decision variables.

1351
01:10:41,880 --> 01:10:47,000
 OK, and then I get another region at the next time.

1352
01:10:47,000 --> 01:10:48,380
 And I know that the curve is going

1353
01:10:48,380 --> 01:10:53,200
 to be guaranteed to be able to stay inside there.

1354
01:10:53,200 --> 01:10:56,520
 So because of that, this is a nice property

1355
01:10:56,520 --> 01:11:02,680
 because if I want to write that q of t

1356
01:11:02,680 --> 01:11:14,960
 is inside the joint limits, q max, q min, for all t,

1357
01:11:14,960 --> 01:11:18,280
 then I can say that if just all of the control points

1358
01:11:18,280 --> 01:11:20,360
 are inside my joint limits, then I

1359
01:11:20,360 --> 01:11:24,080
 can guarantee that for all time, I will never

1360
01:11:24,080 --> 01:11:26,060
 exceed a joint limit.

1361
01:11:26,060 --> 01:11:28,320
 I don't have to sample exhaustively

1362
01:11:28,320 --> 01:11:30,980
 to guarantee I haven't violated any joint limits.

1363
01:11:30,980 --> 01:11:35,240
 I can leverage the convex hull property.

1364
01:11:35,240 --> 01:11:39,520
 It also has the property that the derivatives are still

1365
01:11:39,520 --> 01:11:41,240
 Bézier splines.

1366
01:11:41,240 --> 01:11:51,360
 So I can also write for all t velocity min,

1367
01:11:51,360 --> 01:11:56,800
 the joint velocity constraints are enforced completely

1368
01:11:56,800 --> 01:11:59,080
 with this parameterization.

1369
01:11:59,080 --> 01:12:02,160
 That would be hard to guarantee with a piecewise polynomial

1370
01:12:02,160 --> 01:12:05,440
 represented like this, but it's possible to guarantee

1371
01:12:05,440 --> 01:12:08,160
 with a Bézier polynomial.

1372
01:12:08,160 --> 01:12:11,840
 OK, collision avoidance constraints,

1373
01:12:11,840 --> 01:12:13,520
 I do not have that guarantee.

1374
01:12:13,520 --> 01:12:18,640
 Once I apply a nonlinear transformation to my q's,

1375
01:12:18,640 --> 01:12:21,400
 I cannot guarantee that this curve will not

1376
01:12:21,400 --> 01:12:22,680
 run into a table.

1377
01:12:22,680 --> 01:12:25,480
 So a common problem would be to say

1378
01:12:25,480 --> 01:12:30,000
 I've sampled 50 times along my trajectory

1379
01:12:30,000 --> 01:12:33,920
 to not be in collision, but somewhere between time 37,

1380
01:12:33,920 --> 01:12:35,680
 which was out of collision, and time 38,

1381
01:12:35,680 --> 01:12:39,160
 which was out of collision, it went right through.

1382
01:12:39,160 --> 01:12:39,720
 That happens.

1383
01:12:39,720 --> 01:12:44,640
 So the more robust solvers, even if it's

1384
01:12:44,640 --> 01:12:46,440
 going to use this kind of a tool,

1385
01:12:46,440 --> 01:12:49,760
 will write those constraints, maybe give some margin,

1386
01:12:49,760 --> 01:12:54,080
 but then after the solution, will subsample densely,

1387
01:12:54,080 --> 01:12:58,200
 potentially, in order to see if that happened.

1388
01:12:58,200 --> 01:13:01,320
 The code that we used at TRI would do that.

1389
01:13:01,320 --> 01:13:03,440
 And if it ever find a violation, it

1390
01:13:03,440 --> 01:13:06,120
 would add a new constraint, re-solve on the fly,

1391
01:13:06,120 --> 01:13:08,480
 and you could add layers of robustness

1392
01:13:08,480 --> 01:13:14,080
 like that in order to try to avoid those possible pitfalls.

1393
01:13:14,080 --> 01:13:17,960
 But in this formulation, corners happen.

1394
01:13:17,960 --> 01:13:19,840
 There's no rigorous certification

1395
01:13:19,840 --> 01:13:21,080
 that you won't clip a corner.

1396
01:13:21,840 --> 01:13:23,320
 [END PLAYBACK]

1397
01:13:23,320 --> 01:13:34,000
 So this is actually what we used heavily in the disloading.

1398
01:13:34,000 --> 01:13:35,120
 That's not completely true.

1399
01:13:35,120 --> 01:13:37,760
 We used both this and a sample-based method

1400
01:13:37,760 --> 01:13:39,560
 that I'll show you after.

1401
01:13:39,560 --> 01:13:41,920
 But this is a nice example where it

1402
01:13:41,920 --> 01:13:44,040
 had to solve some pretty hard problems.

1403
01:13:44,040 --> 01:13:47,120
 So the mugs were placed in this video

1404
01:13:47,120 --> 01:13:49,400
 to show the trajectory optimization.

1405
01:13:49,400 --> 01:13:51,560
 They were placed in a few different configurations

1406
01:13:51,560 --> 01:13:52,680
 in the sink.

1407
01:13:52,680 --> 01:13:55,240
 That one, the mug was sideways, and it

1408
01:13:55,240 --> 01:13:58,280
 was able to pick a grasp.

1409
01:13:58,280 --> 01:14:00,360
 And it successfully found a path that

1410
01:14:00,360 --> 01:14:03,760
 went all the way from the mug in the sink

1411
01:14:03,760 --> 01:14:07,000
 all the way to the rack.

1412
01:14:07,000 --> 01:14:10,680
 But when it's top-down, it can't find that solution.

1413
01:14:10,680 --> 01:14:14,680
 So it had to stop, set down the mug, pick it back up.

1414
01:14:14,680 --> 01:14:16,720
 And that was because the kinematic trajectory

1415
01:14:16,720 --> 01:14:19,120
 optimization could not find a solution that

1416
01:14:19,120 --> 01:14:22,120
 would jointly satisfy the constraints we put on the pickup

1417
01:14:22,120 --> 01:14:25,400
 and the set down when the mug was in a certain pose.

1418
01:14:25,400 --> 01:14:27,800
 So it had to do this extra step of rotating

1419
01:14:27,800 --> 01:14:34,240
 the mug, which was the slowest thing about the disloading

1420
01:14:34,240 --> 01:14:35,680
 robot.

1421
01:14:35,680 --> 01:14:37,400
 We actually had people come in, and we

1422
01:14:37,400 --> 01:14:40,360
 would time the people versus the robots.

1423
01:14:40,360 --> 01:14:44,560
 And people can do in-hand reorientation,

1424
01:14:44,560 --> 01:14:46,800
 and it's an unfair advantage.

1425
01:14:46,800 --> 01:14:49,080
 So we had someone tie their arm behind their back,

1426
01:14:49,080 --> 01:14:51,640
 and they could still beat our robot because they pick up a mug

1427
01:14:51,640 --> 01:14:53,560
 and they just turn it around and stick it in.

1428
01:14:53,560 --> 01:14:56,240
 And we had to go and set it down and then move the arm like this

1429
01:14:56,240 --> 01:14:57,240
 in order to pick it up.

1430
01:14:57,240 --> 01:15:01,000
 And that was the best we could do with that hand, I think.

1431
01:15:01,000 --> 01:15:01,500
 Yes?

1432
01:15:01,500 --> 01:15:04,960
 So when you're doing the setting down and re-grasping,

1433
01:15:04,960 --> 01:15:07,920
 is that leaving motion planning and going into task planning

1434
01:15:07,920 --> 01:15:09,580
 and then coming back to motion planning?

1435
01:15:09,580 --> 01:15:10,720
 Or is it all in motion planning?

1436
01:15:10,720 --> 01:15:11,360
 That's great.

1437
01:15:11,360 --> 01:15:15,040
 So there was an element of task planning there, too.

1438
01:15:15,040 --> 01:15:15,880
 Absolutely right.

1439
01:15:15,880 --> 01:15:17,840
 So the task planner would check conditions

1440
01:15:17,840 --> 01:15:22,600
 based on whether the trajectory optimization could succeed.

1441
01:15:22,600 --> 01:15:24,040
 There's actually a simple version

1442
01:15:24,040 --> 01:15:27,160
 of this, which is what we used at the task planning level.

1443
01:15:27,160 --> 01:15:31,540
 You can actually just solve-- if you forget about this,

1444
01:15:31,540 --> 01:15:33,400
 there's a shortcut you can solve just

1445
01:15:33,400 --> 01:15:35,440
 to ask whether you should solve the problem.

1446
01:15:35,440 --> 01:15:39,440
 So can I find the same grasp on the mug that satisfies

1447
01:15:39,440 --> 01:15:41,840
 the conditions here and here?

1448
01:15:41,840 --> 01:15:44,400
 So the only constraint you put between the two

1449
01:15:44,400 --> 01:15:47,280
 separate solutions is that the relative pose of the mug

1450
01:15:47,280 --> 01:15:50,000
 compared to the hand is the same.

1451
01:15:50,000 --> 01:15:52,040
 So that would be-- whereas so far, we've

1452
01:15:52,040 --> 01:15:54,280
 done grasp selection, where we just looked in the sink

1453
01:15:54,280 --> 01:15:55,920
 and forgot about what we're going to do

1454
01:15:55,920 --> 01:15:57,440
 and just said, can I find a grasp?

1455
01:15:57,440 --> 01:15:59,600
 But if you could say, I have to find a grasp that I'm

1456
01:15:59,600 --> 01:16:01,360
 going to be able to set down later,

1457
01:16:01,360 --> 01:16:02,860
 then that puts additional constraints

1458
01:16:02,860 --> 01:16:04,320
 on how you pick your grasp.

1459
01:16:04,320 --> 01:16:07,360
 And that's a quick way to verify-- to say,

1460
01:16:07,360 --> 01:16:09,680
 I should even explore that solution or not even

1461
01:16:09,680 --> 01:16:11,320
 explore that solution.

1462
01:16:11,320 --> 01:16:14,640
 A smaller optimization problem.

1463
01:16:14,640 --> 01:16:19,480
 [INAUDIBLE]

1464
01:16:19,480 --> 01:16:22,280
 This one, I think, it stopped between.

1465
01:16:22,280 --> 01:16:26,120
 But we have stronger methods that can go through that.

1466
01:16:26,120 --> 01:16:31,960
 It's possible to be planned all the way through.

1467
01:16:31,960 --> 01:16:41,600
 There's some planning time pauses in that one.

1468
01:16:41,600 --> 01:16:43,600
 The question is, does it take time to plan here,

1469
01:16:43,600 --> 01:16:45,480
 going all the way through?

1470
01:16:45,480 --> 01:16:47,400
 Yeah, I think he did plan all the way through.

1471
01:16:47,400 --> 01:16:48,480
 We'll have to ask Honkai.

1472
01:16:48,480 --> 01:16:48,980
 Yeah.

1473
01:16:48,980 --> 01:16:59,080
 So the question about the task planning

1474
01:16:59,080 --> 01:17:00,320
 is actually a really good one.

1475
01:17:00,320 --> 01:17:02,760
 I was going to try to make that point, too.

1476
01:17:02,760 --> 01:17:07,120
 So there's versions of this trajectory optimization problem

1477
01:17:07,120 --> 01:17:10,800
 that do creep up into trying to solve the task and motion

1478
01:17:10,800 --> 01:17:12,040
 planning problem.

1479
01:17:12,040 --> 01:17:14,720
 One of my favorites is from Danny and Mark,

1480
01:17:14,720 --> 01:17:18,000
 where they're solving this sort of multi-step optimization

1481
01:17:18,000 --> 01:17:20,680
 problem using trajectory optimization.

1482
01:17:20,680 --> 01:17:27,960
 They have a trajectory optimization

1483
01:17:27,960 --> 01:17:31,160
 compatible higher level planner that

1484
01:17:31,160 --> 01:17:36,280
 turns on and off constraints in a branch and bound kind of way.

1485
01:17:36,280 --> 01:17:39,040
 And I think we'll-- depending on which boutique lectures

1486
01:17:39,040 --> 01:17:41,720
 we pick towards the end, we might spend an hour

1487
01:17:41,720 --> 01:17:45,000
 and a half talking about task and motion planning.

1488
01:17:45,000 --> 01:17:47,560
 But just to say, this is one of the approaches that

1489
01:17:47,560 --> 01:17:49,280
 can sort of go at the distance.

1490
01:17:49,280 --> 01:17:54,320
 Good.

1491
01:17:54,320 --> 01:17:58,580
 I'll call that a day.

1492
01:17:58,580 --> 01:18:00,560
 Kinematic trajectory optimization is basically

1493
01:18:00,560 --> 01:18:04,720
 IK, where you just push a polynomial

1494
01:18:04,720 --> 01:18:07,040
 through your IK solver.

1495
01:18:07,040 --> 01:18:08,800
 That's the big message.

1496
01:18:08,800 --> 01:18:11,040
 OK, see you Thursday.

1497
01:18:11,040 --> 01:18:23,520
 [SIDE CONVERSATION]

1498
01:18:23,520 --> 01:18:25,200
 I'm happy to answer any project questions

1499
01:18:25,200 --> 01:18:28,000
 if people have them, too.

1500
01:18:28,000 --> 01:18:46,800
 [SIDE CONVERSATION]

1501
01:18:46,800 --> 01:18:48,460
 There's probably a good answer for that,

1502
01:18:48,460 --> 01:18:50,760
 depending on which defects we're talking about.

1503
01:18:50,760 --> 01:18:51,960
 Yeah.

1504
01:18:51,960 --> 01:18:52,560
 That's good.

1505
01:18:52,560 --> 01:18:53,240
 OK.

1506
01:18:53,240 --> 01:18:55,000
 I'm happy to take that question if someone

1507
01:18:55,000 --> 01:18:56,480
 wants to send me an email.

1508
01:18:56,480 --> 01:18:58,080
 Yeah.

1509
01:18:58,080 --> 01:18:59,360
 Yeah, just give us the context.

1510
01:18:59,360 --> 01:19:01,480
 [SIDE CONVERSATION]

1511
01:19:01,480 --> 01:19:03,440
 On the YouTube at a certain time or something.

1512
01:19:03,440 --> 01:19:03,940
 Yeah.

1513
01:19:03,940 --> 01:19:13,800
 [SIDE CONVERSATION]

1514
01:19:13,800 --> 01:19:14,960
 Yeah, yeah.

1515
01:19:14,960 --> 01:19:16,400
 It's possible it was flaky.

1516
01:19:16,400 --> 01:19:17,640
 But as long as it's working.

1517
01:19:17,640 --> 01:19:21,360
 So I mean, I'm pretty sure it becomes

1518
01:19:21,360 --> 01:19:23,120
 unlimited number of Meshcat instances

1519
01:19:23,120 --> 01:19:25,120
 once you go through the NGICs things.

1520
01:19:25,120 --> 01:19:33,680
 [SIDE CONVERSATION]

1521
01:19:33,680 --> 01:19:37,760
 OK, the time that that happens is when people--

1522
01:19:37,760 --> 01:19:39,920
 if the output of your notebook was

1523
01:19:39,920 --> 01:19:42,300
 saved from a previous session, and you don't start Meshcat

1524
01:19:42,300 --> 01:19:45,080
 again, and you click on that, that's when I sometimes see it.

1525
01:19:45,080 --> 01:19:45,760
 I thought I had--

1526
01:19:45,760 --> 01:19:47,800
 [SIDE CONVERSATION]

1527
01:19:47,800 --> 01:19:49,520
 Just every time you start up the notebook,

1528
01:19:49,520 --> 01:19:51,920
 you have to start your--

