1
00:00:00,000 --> 00:00:08,480
 [INAUDIBLE]

2
00:00:08,480 --> 00:00:12,960
 Or an alternative way is like, OK, this is [INAUDIBLE]

3
00:00:12,960 --> 00:00:21,920
 we can't take any part of the [INAUDIBLE]

4
00:00:21,920 --> 00:00:27,920
 But so [INAUDIBLE]

5
00:00:27,920 --> 00:00:35,200
 [INAUDIBLE]

6
00:00:35,200 --> 00:00:36,200
 Testing, testing.

7
00:00:36,200 --> 00:00:47,680
 [INAUDIBLE]

8
00:00:47,680 --> 00:00:48,480
 Not that much.

9
00:00:48,480 --> 00:00:50,060
 I actually don't develop in DeepNote.

10
00:00:50,060 --> 00:00:50,560
 I test.

11
00:00:50,560 --> 00:00:52,840
 I feel like DeepNote changed--

12
00:00:52,840 --> 00:00:57,240
 I can't code in DeepNote because the shortcut doesn't work.

13
00:00:57,240 --> 00:01:00,960
 All my favorite shortcuts stop working.

14
00:01:00,960 --> 00:01:01,460
 They--

15
00:01:01,460 --> 00:01:02,960
 Yes.

16
00:01:02,960 --> 00:01:05,000
 They were working and now they stopped.

17
00:01:05,000 --> 00:01:06,120
 They changed them or--

18
00:01:06,120 --> 00:01:06,680
 I don't know.

19
00:01:06,680 --> 00:01:08,520
 I think the shortcuts are just different.

20
00:01:08,520 --> 00:01:09,720
 Yeah, they're just different.

21
00:01:09,720 --> 00:01:11,520
 All my favorite shortcuts are not different.

22
00:01:11,520 --> 00:01:14,360
 I see.

23
00:01:14,360 --> 00:01:16,720
 It's funny to hear Tomas, Lozano Perez,

24
00:01:16,720 --> 00:01:19,840
 he talked about when he was writing his thesis,

25
00:01:19,840 --> 00:01:23,480
 Richard Stallman was writing Emacs.

26
00:01:23,480 --> 00:01:26,720
 And they had the one time shared computer, right?

27
00:01:26,720 --> 00:01:29,080
 So it was like they had to log in for time.

28
00:01:29,080 --> 00:01:31,080
 He'd get two hours to work on his thesis.

29
00:01:31,080 --> 00:01:32,920
 And overnight, Stallman would come in

30
00:01:32,920 --> 00:01:36,080
 and change all the key bindings.

31
00:01:36,080 --> 00:01:40,720
 He said every day the key bindings were different.

32
00:01:40,720 --> 00:01:42,220
 Very hard to write a thesis, he said.

33
00:01:42,220 --> 00:01:42,720
 All right.

34
00:01:42,720 --> 00:01:45,720
 [TYPING]

35
00:01:45,720 --> 00:01:48,720
 [TYPING]

36
00:01:48,720 --> 00:01:51,720
 [TYPING]

37
00:01:51,720 --> 00:01:54,720
 [TYPING]

38
00:01:54,720 --> 00:01:57,720
 [TYPING]

39
00:01:57,720 --> 00:02:00,720
 [TYPING]

40
00:02:00,720 --> 00:02:03,720
 [TYPING]

41
00:02:03,720 --> 00:02:06,720
 [TYPING]

42
00:02:06,720 --> 00:02:09,720
 [TYPING]

43
00:02:09,720 --> 00:02:12,720
 [TYPING]

44
00:02:12,720 --> 00:02:15,720
 [TYPING]

45
00:02:15,720 --> 00:02:18,720
 [TYPING]

46
00:02:18,720 --> 00:02:21,720
 [TYPING]

47
00:02:21,720 --> 00:02:24,720
 [TYPING]

48
00:02:24,720 --> 00:02:27,720
 [TYPING]

49
00:02:27,720 --> 00:02:30,720
 [・゛・]

50
00:02:30,720 --> 00:02:33,720
 [・゛・]

51
00:02:33,720 --> 00:02:36,720
 [・゛・]

52
00:02:36,720 --> 00:02:39,720
 [・゛・]

53
00:02:40,720 --> 00:02:43,720
 [・゛・]

54
00:02:43,720 --> 00:02:46,720
 [・゛・]

55
00:02:46,720 --> 00:02:57,720
 [・゛・]

56
00:02:57,720 --> 00:03:02,720
 [・゛・]

57
00:03:11,720 --> 00:03:14,720
 [・゛・]

58
00:03:14,720 --> 00:03:18,720
 [・゛・]

59
00:03:18,720 --> 00:03:23,720
 In the first 30 seconds of lecture I become chalk-colored.

60
00:03:23,720 --> 00:03:26,720
 [Sigh]

61
00:03:26,720 --> 00:03:29,720
 [Sigh]

62
00:03:29,720 --> 00:03:32,720
 [Sigh]

63
00:03:32,720 --> 00:03:35,720
 [Sigh]

64
00:03:36,720 --> 00:03:39,720
 [Sigh]

65
00:03:39,720 --> 00:03:42,720
 [Sigh]

66
00:03:42,720 --> 00:03:53,720
 [Sigh]

67
00:03:53,720 --> 00:03:58,720
 [Sigh]

68
00:04:08,720 --> 00:04:11,720
 [Sigh]

69
00:04:11,720 --> 00:04:14,720
 [Sigh]

70
00:04:40,720 --> 00:04:43,720
 [Sigh]

71
00:04:43,720 --> 00:04:46,720
 [Sigh]

72
00:04:47,720 --> 00:04:50,720
 [Sigh]

73
00:04:50,720 --> 00:04:53,720
 [Sigh]

74
00:04:54,720 --> 00:04:57,720
 [Sigh]

75
00:04:57,720 --> 00:05:00,720
 [Sigh]

76
00:05:00,720 --> 00:05:03,720
 [Sigh]

77
00:05:04,720 --> 00:05:07,720
 [Sigh]

78
00:05:07,720 --> 00:05:10,720
 [Sigh]

79
00:05:11,720 --> 00:05:14,720
 [Sigh]

80
00:05:14,720 --> 00:05:17,720
 [Sigh]

81
00:05:17,720 --> 00:05:20,720
 [Sigh]

82
00:05:20,720 --> 00:05:23,720
 [Sigh]

83
00:05:23,720 --> 00:05:26,720
 [Sigh]

84
00:05:27,720 --> 00:05:37,720
 The one I actually, I'm going to use an example in the first part here that I think could have been a question instead maybe, but I figured I'd just do the example in lecture.

85
00:05:37,720 --> 00:05:40,720
 [Sigh]

86
00:05:40,720 --> 00:06:03,720
 Bode plots.

87
00:06:03,720 --> 00:06:06,720
 [Sigh]

88
00:06:06,720 --> 00:06:10,720
 [Sigh]

89
00:06:10,720 --> 00:06:14,720
 [Sigh]

90
00:06:14,720 --> 00:06:19,720
 [Sigh]

91
00:06:19,720 --> 00:06:24,720
 [Sigh]

92
00:06:30,720 --> 00:06:33,720
 [Sigh]

93
00:06:33,720 --> 00:06:39,720
 [Sigh]

94
00:06:39,720 --> 00:06:47,720
 [Sigh]

95
00:06:47,720 --> 00:06:55,720
 [Sigh]

96
00:06:55,720 --> 00:06:58,720
 [Sigh]

97
00:06:58,720 --> 00:07:04,720
 [Sigh]

98
00:07:04,720 --> 00:07:18,720
 [Sigh]

99
00:07:18,720 --> 00:07:21,720
 [Sigh]

100
00:07:21,720 --> 00:07:36,720
 [Sigh]

101
00:07:36,720 --> 00:07:47,720
 [Sigh]

102
00:07:48,720 --> 00:07:51,720
 I think people do really grab the slides.

103
00:07:51,720 --> 00:07:54,720
 It's good. I see it on a handful of screens.

104
00:07:54,720 --> 00:07:57,720
 [Sigh]

105
00:07:57,720 --> 00:08:00,720
 [Sigh]

106
00:08:00,720 --> 00:08:19,720
 [Sigh]

107
00:08:19,720 --> 00:08:22,720
 [Sigh]

108
00:08:22,720 --> 00:08:38,720
 [Sigh]

109
00:08:38,720 --> 00:08:41,720
 [Sigh]

110
00:09:05,720 --> 00:09:11,720
 All right, let's get started. So we're going to start the next sort of chunk of lectures.

111
00:09:11,720 --> 00:09:17,720
 We just finished three lectures about, roughly about point clouds and geometric perception.

112
00:09:17,720 --> 00:09:25,720
 So let me just start by reminding you from a big picture where we've been and where we're going next.

113
00:09:25,720 --> 00:09:39,720
 So we started off with a lecture about hardware basics just to get you up to speed and the mechanics of simulating all of the pieces, including the control stack and the like.

114
00:09:39,720 --> 00:09:46,720
 And then we just got a robot moving with some basic kinematics and Jacobian-based control.

115
00:09:46,720 --> 00:09:53,720
 And we took a single object and moved it from point 1 to point B. The simplest version of pick and place.

116
00:09:53,720 --> 00:10:00,720
 And then we complemented that with a handful of lectures now about the simplest sort of form of perception.

117
00:10:00,720 --> 00:10:07,720
 If we needed to now find that object from the cameras, then we had some basic tools to do that.

118
00:10:07,720 --> 00:10:17,720
 In the spirit of now spiraling out and increasing complexity, what we're going to try to do is bring that pipeline into more complex scenes now.

119
00:10:17,720 --> 00:10:23,720
 In particular, where we had just taken one object and it was a known object.

120
00:10:23,720 --> 00:10:30,720
 In the next three lectures, I'd like to think about a bunch of objects, a whole bin of objects, you know, cluttered objects.

121
00:10:30,720 --> 00:10:35,720
 And I'm going to try to reduce the assumption that we already knew everything about the object when we started.

122
00:10:35,720 --> 00:10:40,720
 So we started off before we had a perfect mesh model, let's say, or a point cloud model that we were going to find.

123
00:10:40,720 --> 00:10:47,720
 And we want to think about techniques that don't make that strong assumption.

124
00:10:47,720 --> 00:10:55,720
 In particular, we're still going to do, in the first pass of increasing that complexity, we'll still mostly just pick things up and set them down.

125
00:10:55,720 --> 00:11:07,720
 And the next round of complexity then will be known objects with deep perception and then more contact-rich manipulation and forceful manipulation.

126
00:11:07,720 --> 00:11:16,720
 So we'll keep increasing, but the jump for this section is more complex scenes with many objects and diverse objects.

127
00:11:16,720 --> 00:11:22,720
 So this is roughly what we're going to build in the next three lectures.

128
00:11:22,720 --> 00:11:28,720
 This was a project at TRI that I think other groups have certainly done similar things.

129
00:11:28,720 --> 00:11:37,720
 But this was, let's see, it was motivated partly by wanting to do deep learning for perception

130
00:11:37,720 --> 00:11:42,720
 and needing to generate a lot of training data for our deep learning systems.

131
00:11:42,720 --> 00:11:48,720
 And so we wanted to have relevant images of bins with relevant objects in the real world.

132
00:11:48,720 --> 00:11:53,720
 So we set up a system that would basically move objects back and forth all day long.

133
00:11:53,720 --> 00:11:57,720
 And then we would occasionally go and dump new objects in and take other objects out.

134
00:11:57,720 --> 00:12:00,720
 And this thing would just do its thing all day long.

135
00:12:00,720 --> 00:12:04,720
 But the pipeline behind that was actually interesting in and of itself.

136
00:12:04,720 --> 00:12:08,720
 It's how do you build this robust system that can pick up all the objects,

137
00:12:08,720 --> 00:12:13,720
 actually getting every one of those objects out or even some strange objects that can be put in

138
00:12:13,720 --> 00:12:18,720
 and getting that to the level of performance where it would almost always move all of the objects

139
00:12:18,720 --> 00:12:20,720
 was a pretty interesting undertaking.

140
00:12:20,720 --> 00:12:22,720
 And that's kind of what we'll pursue today.

141
00:12:22,720 --> 00:12:25,720
 We're not going to do the super handle every corner case version,

142
00:12:25,720 --> 00:12:29,720
 but we'll get the nominal situation working well.

143
00:12:29,720 --> 00:12:30,720
 It was interesting.

144
00:12:30,720 --> 00:12:33,720
 If you would walk by this robot, it would be operating all day.

145
00:12:33,720 --> 00:12:35,720
 Every once in a while, there'd be something on the floor.

146
00:12:35,720 --> 00:12:42,720
 And actually, at some point, someone threw in this rubber duck that looked like Spock from Star Trek.

147
00:12:42,720 --> 00:12:46,720
 And for some reason, it always threw Spock.

148
00:12:46,720 --> 00:12:52,720
 It was like with high probability, if you walk past after a couple days, Spock was on the floor.

149
00:12:52,720 --> 00:12:55,720
 So it didn't like that.

150
00:12:55,720 --> 00:12:59,720
 But this is what we're going to build.

151
00:12:59,720 --> 00:13:02,720
 So that has lots of interesting questions.

152
00:13:02,720 --> 00:13:03,720
 And we'll do it in three parts.

153
00:13:03,720 --> 00:13:08,720
 But the first part is how do you just generate those richer simulations?

154
00:13:08,720 --> 00:13:12,720
 And how do you generate random kitchens or random distributions

155
00:13:12,720 --> 00:13:15,720
 over what's going to be thrown in the kitchen sink or in a bin?

156
00:13:15,720 --> 00:13:18,720
 And there's a pretty sophisticated answer to that

157
00:13:18,720 --> 00:13:23,720
 that could be trying to calibrate probability distributions over environments

158
00:13:23,720 --> 00:13:25,720
 that we're not going to do in the first pass.

159
00:13:25,720 --> 00:13:27,720
 We're going to do a simpler version of it first.

160
00:13:27,720 --> 00:13:29,720
 But it's a super rich question.

161
00:13:29,720 --> 00:13:35,720
 It's a big question for all types of-- if I wanted to make a safety case for autonomous cars,

162
00:13:35,720 --> 00:13:39,720
 how do I somehow write down a distribution of all the possible environments

163
00:13:39,720 --> 00:13:41,720
 that the car could be operating in?

164
00:13:41,720 --> 00:13:46,720
 The probability of a pedestrian coming in a certain way.

165
00:13:46,720 --> 00:13:48,720
 It's slightly easier when you have inanimate objects.

166
00:13:48,720 --> 00:13:54,720
 But it's still very, very hard to get the distributions of possible kitchens.

167
00:13:54,720 --> 00:14:00,720
 So what we're actually going to do instead is basically drop things out of the sky.

168
00:14:00,720 --> 00:14:03,720
 Here we go.

169
00:14:03,720 --> 00:14:08,720
 It turns out, if you were going to go into the room and do something,

170
00:14:08,720 --> 00:14:10,720
 you would just dump a bunch of objects in.

171
00:14:10,720 --> 00:14:12,720
 And we have a really good simulator,

172
00:14:12,720 --> 00:14:16,720
 which we're going to try to appreciate the details of today,

173
00:14:16,720 --> 00:14:19,720
 because this is going to demand more from our simulation.

174
00:14:19,720 --> 00:14:23,720
 But it turns out a fairly reasonable way to make cluttered scenes

175
00:14:23,720 --> 00:14:27,720
 is to just drop a bunch of objects out of the sky.

176
00:14:27,720 --> 00:14:30,720
 And for reasons we'll understand by the end,

177
00:14:30,720 --> 00:14:33,720
 it's hard to start it in this configuration.

178
00:14:33,720 --> 00:14:39,720
 It's actually relatively easier to start it up in the air with the objects separated,

179
00:14:39,720 --> 00:14:42,720
 so they're not in collision, and to drop them,

180
00:14:42,720 --> 00:14:45,720
 and then just rely on an optimized collision engine

181
00:14:45,720 --> 00:14:47,720
 that can simulate forward with high reliability.

182
00:14:47,720 --> 00:14:52,720
 And then you get these interesting cluttered scenes, interesting distributions.

183
00:14:52,720 --> 00:14:55,720
 I did this with many copies of the red brick,

184
00:14:55,720 --> 00:15:05,720
 but the exact same code works for more interesting objects.

185
00:15:05,720 --> 00:15:08,720
 I guess you know-- I don't know if I've explicitly said yet--

186
00:15:08,720 --> 00:15:15,720
 but the mustard bottle, even the red brick actually, is in here.

187
00:15:15,720 --> 00:15:17,720
 These are from a famous data set.

188
00:15:17,720 --> 00:15:20,720
 There's my red brick.

189
00:15:20,720 --> 00:15:25,720
 This was a project. It was Yale, Cal, Berkeley.

190
00:15:25,720 --> 00:15:28,720
 There were research groups from all three of those that got together

191
00:15:28,720 --> 00:15:31,720
 and said, "Let's make a common data set for robotics."

192
00:15:31,720 --> 00:15:34,720
 And they picked a number of SKUs from Amazon.

193
00:15:34,720 --> 00:15:37,720
 They would tell people how to buy the same objects.

194
00:15:37,720 --> 00:15:39,720
 They would even ship you some of the objects,

195
00:15:39,720 --> 00:15:44,720
 and they gave out 3D mesh models of these objects with high-fidelity texture maps.

196
00:15:44,720 --> 00:15:46,720
 Like, super high-fidelity.

197
00:15:46,720 --> 00:15:48,720
 I mean, well, maybe not fidelity.

198
00:15:48,720 --> 00:15:51,720
 Sort of high megabyte count, right?

199
00:15:51,720 --> 00:15:53,720
 The reason it takes so long to load in MeshCat

200
00:15:53,720 --> 00:15:56,720
 is because these things are super enormous meshes.

201
00:15:56,720 --> 00:15:58,720
 But it's been a very valuable--

202
00:15:58,720 --> 00:16:01,720
 and you see lots and lots of manipulation research today still

203
00:16:01,720 --> 00:16:04,720
 that uses these data sets.

204
00:16:04,720 --> 00:16:06,720
 What did I say? I said Cal.

205
00:16:06,720 --> 00:16:07,720
 I said Berkeley twice.

206
00:16:07,720 --> 00:16:09,720
 Yeah, sorry.

207
00:16:09,720 --> 00:16:11,720
 CMU Berkeley, thank you.

208
00:16:11,720 --> 00:16:14,720
 That was Sid at CMU.

209
00:16:14,720 --> 00:16:16,720
 And so you can do exactly the same thing.

210
00:16:16,720 --> 00:16:18,720
 You can load those objects into the simulator,

211
00:16:18,720 --> 00:16:19,720
 drop them from the sky,

212
00:16:19,720 --> 00:16:24,720
 and get interesting distributions of YCB objects.

213
00:16:24,720 --> 00:16:28,720
 I love this because this looks like the central limit theorem, right?

214
00:16:28,720 --> 00:16:31,720
 But it's got spam cans and mustard bottles

215
00:16:31,720 --> 00:16:33,720
 and all kinds of bizarre objects.

216
00:16:33,720 --> 00:16:38,720
 So something kind of amuses me about that.

217
00:16:38,720 --> 00:16:45,720
 OK, but generating these scenes is going to allow us to do--

218
00:16:45,720 --> 00:16:49,720
 drop a bunch of objects in the bin, take a picture above,

219
00:16:49,720 --> 00:16:51,720
 and then we'll be able to make ground truth labels

220
00:16:51,720 --> 00:16:56,720
 for a deep learning perception system for next week,

221
00:16:56,720 --> 00:16:58,720
 whenever we get to it.

222
00:16:58,720 --> 00:17:02,720
 But the demands, actually, on simulating this well

223
00:17:02,720 --> 00:17:05,720
 are increasing the demands on our physics engine.

224
00:17:05,720 --> 00:17:07,720
 And so I think this is a good time to sort of stop

225
00:17:07,720 --> 00:17:10,720
 and think about what's happening in the physics engine a little bit more.

226
00:17:10,720 --> 00:17:14,720
 It's going to dust off some of your 18.03 skills

227
00:17:14,720 --> 00:17:17,720
 and feel a little bit like mechanics.

228
00:17:17,720 --> 00:17:20,720
 So those of you that don't like mechanics

229
00:17:20,720 --> 00:17:23,720
 will hopefully get a little refresher

230
00:17:23,720 --> 00:17:26,720
 and appreciate some of the details.

231
00:17:26,720 --> 00:17:29,720
 But it's another one of these-- hopefully there's

232
00:17:29,720 --> 00:17:33,720
 levels of detail for different people in the class.

233
00:17:33,720 --> 00:17:38,720
 OK, so I have said before that simulation for manipulation

234
00:17:38,720 --> 00:17:41,720
 actually has proven to be harder than simulating

235
00:17:41,720 --> 00:17:43,720
 for other types of robotics.

236
00:17:43,720 --> 00:17:46,720
 Certainly for quadrotors flying around in the open air,

237
00:17:46,720 --> 00:17:50,720
 that doesn't have as complex physical interactions.

238
00:17:50,720 --> 00:17:52,720
 I mean, you can get ground effect.

239
00:17:52,720 --> 00:17:54,720
 You can start doing serious aerodynamic modeling.

240
00:17:54,720 --> 00:17:56,720
 Vehicles have tended to be simpler to simulate,

241
00:17:56,720 --> 00:17:58,720
 first things to simulate well.

242
00:17:58,720 --> 00:18:02,720
 Walking robots are actually not so bad to simulate.

243
00:18:02,720 --> 00:18:04,720
 We've done a lot of-- for many years, we've

244
00:18:04,720 --> 00:18:05,720
 trusted our simulations.

245
00:18:05,720 --> 00:18:08,720
 But it took a long time for us to actually believe

246
00:18:08,720 --> 00:18:11,720
 that we could simulate the complexity of manipulation.

247
00:18:11,720 --> 00:18:13,720
 And so why is that?

248
00:18:13,720 --> 00:18:16,720
 It seems like walking robots should be just as hard to simulate.

249
00:18:16,720 --> 00:18:18,720
 A walking robot doing a backflip should be just as hard

250
00:18:18,720 --> 00:18:20,720
 to simulate as manipulation.

251
00:18:20,720 --> 00:18:22,720
 OK, so we're going to talk through that today.

252
00:18:22,720 --> 00:18:26,720
 But there's a few major points that I want to make.

253
00:18:26,720 --> 00:18:42,720
 So let's say simulating contact for manipulation,

254
00:18:42,720 --> 00:18:48,720
 in particular, challenging.

255
00:18:48,720 --> 00:18:55,720
 So the simulation, of course, means many things.

256
00:18:55,720 --> 00:18:57,720
 But I'm talking about the physics engine piece

257
00:18:57,720 --> 00:19:00,720
 of the simulation today.

258
00:19:00,720 --> 00:19:04,720
 And the first one is that we end up

259
00:19:04,720 --> 00:19:11,720
 with stiff differential equations often.

260
00:19:11,720 --> 00:19:13,720
 This is partly under your control,

261
00:19:13,720 --> 00:19:14,720
 is how stiff these are.

262
00:19:14,720 --> 00:19:16,720
 And that's one of the-- I want to, I think,

263
00:19:16,720 --> 00:19:18,720
 even just as a user of these simulations,

264
00:19:18,720 --> 00:19:21,720
 understanding where stiffness comes from

265
00:19:21,720 --> 00:19:24,720
 and how to deal with it will help you use these tools better

266
00:19:24,720 --> 00:19:26,720
 and understand when things go wrong,

267
00:19:26,720 --> 00:19:27,720
 what you can do to fix them.

268
00:19:27,720 --> 00:19:32,720
 So let me take a few minutes to explain

269
00:19:32,720 --> 00:19:34,720
 what I mean by stiff differential equations

270
00:19:34,720 --> 00:19:38,720
 and how they manifest in these kind of simulations.

271
00:19:38,720 --> 00:19:40,720
 OK, and I'll do it with a super--

272
00:19:40,720 --> 00:19:43,720
 I don't even need a big, complicated walking robot

273
00:19:43,720 --> 00:19:48,520
 or manipulation system to make this example.

274
00:19:48,520 --> 00:19:50,440
 I can just even think about stiffness

275
00:19:50,440 --> 00:19:52,600
 in a spring damper system.

276
00:19:52,600 --> 00:19:57,320
 So let's just say I have a mass spring damper.

277
00:19:57,320 --> 00:20:04,480
 This is really your 18.03 type system.

278
00:20:04,480 --> 00:20:09,860
 So let's say I've got just a mass.

279
00:20:09,860 --> 00:20:12,460
 There's no friction to speak of.

280
00:20:12,460 --> 00:20:16,080
 And I'm going to put a spring on it.

281
00:20:16,080 --> 00:20:18,320
 And I'll put a damper on it, which we normally

282
00:20:18,320 --> 00:20:20,080
 draw like that.

283
00:20:20,080 --> 00:20:21,480
 And this would be its x position.

284
00:20:21,480 --> 00:20:29,240
 And this is like x equals 0 here.

285
00:20:29,240 --> 00:20:31,640
 So the equations of motion of this-- actually,

286
00:20:31,640 --> 00:20:32,560
 let me call it not x.

287
00:20:32,560 --> 00:20:34,720
 Let me call it q, since we are going

288
00:20:34,720 --> 00:20:36,240
 to distinguish between x and q.

289
00:20:36,240 --> 00:20:40,920
 And we've been calling positions q.

290
00:20:40,920 --> 00:20:47,400
 So this is going to be mq double dot plus bq dot plus kq.

291
00:20:47,400 --> 00:20:53,160
 This is the classical equations of a damped oscillator,

292
00:20:53,160 --> 00:20:54,360
 where this is the mass matrix.

293
00:20:54,360 --> 00:20:58,320
 This is the damping.

294
00:20:58,320 --> 00:21:04,720
 This is the spring stiffness.

295
00:21:05,720 --> 00:21:08,080
 [WRITING ON BOARD]

296
00:21:08,080 --> 00:21:17,680
 OK, so in my other robotics course,

297
00:21:17,680 --> 00:21:21,200
 under Actuated Robotics, we talk a lot about stability

298
00:21:21,200 --> 00:21:23,880
 and what that means and how to generalize it

299
00:21:23,880 --> 00:21:25,600
 to nonlinear systems.

300
00:21:25,600 --> 00:21:30,400
 But I think even without that full introduction,

301
00:21:30,400 --> 00:21:37,080
 we can talk about just the basic stability of this system.

302
00:21:37,080 --> 00:21:42,480
 Stability in this very simple setting

303
00:21:42,480 --> 00:21:46,480
 is just asking, is the limit as time

304
00:21:46,480 --> 00:21:52,240
 goes to infinity of x of t equal to 0, q of t?

305
00:21:52,240 --> 00:21:58,320
 I'd like to say, if I start this here

306
00:21:58,320 --> 00:22:01,320
 with some initial position and velocity,

307
00:22:01,320 --> 00:22:04,080
 and it starts wing, wing, wing, wing, wing,

308
00:22:04,080 --> 00:22:05,960
 is it going to come to rest?

309
00:22:05,960 --> 00:22:08,680
 Or is it going to do something different?

310
00:22:08,680 --> 00:22:11,760
 This damper, the physical intuition you should have

311
00:22:11,760 --> 00:22:12,960
 is that's pulling out energy.

312
00:22:12,960 --> 00:22:14,440
 That's friction.

313
00:22:14,440 --> 00:22:17,680
 So this thing wants to oscillate because of the spring,

314
00:22:17,680 --> 00:22:20,280
 but it's going to slow down because of the damper.

315
00:22:20,280 --> 00:22:21,820
 And we're going to try to understand,

316
00:22:21,820 --> 00:22:24,920
 make sure we understand how to simulate this accurately,

317
00:22:24,920 --> 00:22:28,280
 even if you've got these kind of simple equations.

318
00:22:28,280 --> 00:22:28,960
 Is that clear?

319
00:22:28,960 --> 00:22:38,920
 For the continuous time system, the question about stability

320
00:22:38,920 --> 00:22:43,120
 is very easy to understand.

321
00:22:43,120 --> 00:22:45,600
 You could ask, what is the stability properties given

322
00:22:45,600 --> 00:22:49,080
 a change m, b, and k, the parameters?

323
00:22:49,080 --> 00:22:52,880
 And it turns out that the answer is, yes, it's stable.

324
00:22:57,720 --> 00:23:02,040
 I'll just say, if mass is greater than 0,

325
00:23:02,040 --> 00:23:07,400
 the damping is greater than 0, k is greater than 0.

326
00:23:07,400 --> 00:23:09,280
 As long as all of my numbers are positive,

327
00:23:09,280 --> 00:23:13,880
 which is the normal physical intuition case, then yes,

328
00:23:13,880 --> 00:23:15,840
 that system is going to decay.

329
00:23:15,840 --> 00:23:18,040
 And I put strictly greater than 0 for the damping

330
00:23:18,040 --> 00:23:20,400
 so that it's actually decaying to 0,

331
00:23:20,400 --> 00:23:22,920
 and that's not oscillating forever.

332
00:23:22,920 --> 00:23:28,360
 And this is just because I don't want mass to be 0.

333
00:23:28,360 --> 00:23:30,720
 And if I wanted to-- if you remember

334
00:23:30,720 --> 00:23:36,320
 your differential equations, so I obtained this with confidence

335
00:23:36,320 --> 00:23:41,200
 by taking the eigenvalues of the system.

336
00:23:41,200 --> 00:23:43,840
 So if I write this in my state space form,

337
00:23:43,840 --> 00:23:46,440
 just to completely close the loop here,

338
00:23:46,440 --> 00:23:49,760
 I've got q and velocity, q dot.

339
00:23:49,760 --> 00:23:53,320
 And this q dot does equal v in this simple case.

340
00:23:53,320 --> 00:24:02,760
 So I can write x dot equals q dot, and then 1 over m,

341
00:24:02,760 --> 00:24:14,560
 negative v, q dot, minus kq, which I can write that as Ax,

342
00:24:14,560 --> 00:24:27,320
 where A is just 0, 1, negative k over m, negative v over m.

343
00:24:27,320 --> 00:24:29,080
 Is that familiar to people?

344
00:24:29,080 --> 00:24:30,960
 Give me a thumbs up or a thumbs down.

345
00:24:30,960 --> 00:24:33,960
 Is that familiar to people, that kind of stuff?

346
00:24:33,960 --> 00:24:35,160
 It's been a while, maybe.

347
00:24:35,160 --> 00:24:37,120
 But this would be a differential equation way

348
00:24:37,120 --> 00:24:40,840
 to think about that system.

349
00:24:40,840 --> 00:24:46,160
 I could just write the equations of motion in this form.

350
00:24:46,160 --> 00:24:48,840
 For this example, you don't need to generate these from scratch

351
00:24:48,840 --> 00:24:49,340
 here.

352
00:24:49,340 --> 00:24:52,520
 But for those of you that remember,

353
00:24:52,520 --> 00:24:56,720
 then the eigenvalues of this matrix

354
00:24:56,720 --> 00:24:58,800
 can check the stability of the system.

355
00:24:58,800 --> 00:25:06,980
 So what's interesting now is if I try to integrate that

356
00:25:06,980 --> 00:25:08,040
 on a computer.

357
00:25:08,040 --> 00:25:12,320
 So you could take an entire course on numerical methods.

358
00:25:12,320 --> 00:25:13,680
 I don't need all of that.

359
00:25:13,680 --> 00:25:17,440
 But I just want to think about numerical integration

360
00:25:17,440 --> 00:25:20,080
 in its simplest form here to make a few points.

361
00:25:20,080 --> 00:25:26,360
 So this is a continuous time equation.

362
00:25:26,360 --> 00:25:32,800
 And I want to now integrate it forward with an algorithm.

363
00:25:32,800 --> 00:25:34,700
 So the simplest form of that would

364
00:25:34,700 --> 00:25:37,560
 be to make an approximation here, a discrete time

365
00:25:37,560 --> 00:25:43,320
 approximation, to say I'm going to advance this simulator

366
00:25:43,320 --> 00:25:47,520
 by taking my current state.

367
00:25:47,520 --> 00:25:50,840
 And I'm going to increment it by--

368
00:25:50,840 --> 00:25:51,840
 I'll call it h.

369
00:25:51,840 --> 00:25:55,640
 This is my dynamics.

370
00:25:55,640 --> 00:25:56,680
 This is my x dot.

371
00:25:56,680 --> 00:26:01,840
 This one here, h, is what I'll typically

372
00:26:01,840 --> 00:26:04,080
 use to denote my time step.

373
00:26:05,080 --> 00:26:09,640
 I want that to be also greater than 0.

374
00:26:09,640 --> 00:26:18,000
 And if you care about the linear analysis,

375
00:26:18,000 --> 00:26:26,840
 again, you could write this as i plus h A x n.

376
00:26:26,840 --> 00:26:31,400
 This gives me a different linear dynamical system,

377
00:26:31,400 --> 00:26:36,400
 which we can talk about its stability or its instability,

378
00:26:36,400 --> 00:26:41,640
 asking does x of n, as n goes to infinity, does it go to 0?

379
00:26:41,640 --> 00:26:44,800
 And nice questions from analysis are

380
00:26:44,800 --> 00:26:49,520
 about if I choose different h's, for instance, how accurately

381
00:26:49,520 --> 00:26:52,080
 can I simulate the true solution from this differential

382
00:26:52,080 --> 00:26:53,400
 equation?

383
00:26:53,400 --> 00:26:58,160
 These are the fundamental questions of numerical analysis.

384
00:26:58,160 --> 00:27:04,400
 OK, and the answer here is much more subtle than this.

385
00:27:04,400 --> 00:27:08,800
 And I actually have the eigenvalues here,

386
00:27:08,800 --> 00:27:12,320
 but they're messier than I wanted.

387
00:27:12,320 --> 00:27:14,760
 So I'll just do it numerically.

388
00:27:14,760 --> 00:27:18,000
 I'll do an example numerically.

389
00:27:18,000 --> 00:27:20,280
 One of the great things about linear dynamical systems

390
00:27:20,280 --> 00:27:23,360
 is I can integrate them perfectly in closed form.

391
00:27:23,360 --> 00:27:28,600
 So I can give the solution to this with no artifacts

392
00:27:28,600 --> 00:27:30,360
 from numerical integration.

393
00:27:30,360 --> 00:27:33,120
 And then I can do the integration version of this

394
00:27:33,120 --> 00:27:35,280
 and ask how similar they are.

395
00:27:35,280 --> 00:27:37,560
 By the way, this is a particular type of integration.

396
00:27:37,560 --> 00:27:39,080
 This is called the Euler integration.

397
00:27:39,080 --> 00:27:40,160
 You've probably heard it.

398
00:27:40,160 --> 00:27:48,480
 It's even forward Euler if you want

399
00:27:48,480 --> 00:27:52,800
 to get more into the details.

400
00:27:52,800 --> 00:27:59,240
 OK, so I'm worried that this is not

401
00:27:59,240 --> 00:28:05,560
 going to show up great on the monitor because WebGL doesn't

402
00:28:05,560 --> 00:28:09,800
 accept the line with command.

403
00:28:09,800 --> 00:28:12,520
 Sort of annoying.

404
00:28:12,520 --> 00:28:13,680
 But let's try.

405
00:28:13,680 --> 00:28:14,760
 Oh, I could try Safari.

406
00:28:14,760 --> 00:28:16,680
 I wonder if Safari's WebGL supports.

407
00:28:16,680 --> 00:28:19,640
 [SILENCE]

408
00:28:19,640 --> 00:28:25,340
 OK.

409
00:28:25,340 --> 00:28:30,480
 Nope, still doesn't.

410
00:28:30,480 --> 00:28:33,200
 Like right in the WebGL docs, it says most browsers

411
00:28:33,200 --> 00:28:34,520
 don't support line width.

412
00:28:34,520 --> 00:28:40,880
 So OK, that's annoying, but we'll deal.

413
00:28:40,880 --> 00:28:43,320
 This is the phase portrait.

414
00:28:43,320 --> 00:28:44,840
 Let me draw it first on the board

415
00:28:44,840 --> 00:28:49,280
 just to make sure you know what we're seeing here.

416
00:28:49,280 --> 00:28:53,440
 I'm going to go in and add axes and other matplotlib-like

417
00:28:53,440 --> 00:28:55,480
 things into MeshCat, but I haven't done it yet.

418
00:28:55,480 --> 00:28:58,880
 OK, so the plot I want to make here

419
00:28:58,880 --> 00:29:03,000
 to understand the integration of this mass spring damper system

420
00:29:03,000 --> 00:29:10,000
 is a phase plot, phase portrait, which

421
00:29:10,000 --> 00:29:12,640
 is when I plot q versus q dot.

422
00:29:12,640 --> 00:29:16,520
 So if I plotted q as a function of time,

423
00:29:16,520 --> 00:29:20,560
 I would expect to see an oscillation that

424
00:29:20,560 --> 00:29:24,600
 would decay if it's stable or blow up if it's unstable.

425
00:29:24,600 --> 00:29:28,220
 But the timing of this is one feature

426
00:29:28,220 --> 00:29:29,800
 that I'm less worried about the timing.

427
00:29:29,800 --> 00:29:30,960
 I want to see more--

428
00:29:30,960 --> 00:29:32,160
 it's long-term behavior.

429
00:29:32,160 --> 00:29:33,700
 It's going to be a little bit clearer

430
00:29:33,700 --> 00:29:35,720
 to see it in this plot where I'm going to start.

431
00:29:35,720 --> 00:29:38,120
 If I start from some initial condition,

432
00:29:38,120 --> 00:29:41,480
 let's say a positive q and 0 velocity,

433
00:29:41,480 --> 00:29:43,240
 then I would expect it to start getting

434
00:29:43,240 --> 00:29:44,640
 pulled towards the origin.

435
00:29:44,640 --> 00:29:47,360
 So that's negative velocity.

436
00:29:47,360 --> 00:29:53,800
 And it's, I think, not too hard to see

437
00:29:53,800 --> 00:29:56,120
 that we're going to expect something like that to happen

438
00:29:56,120 --> 00:29:58,040
 when it's stable.

439
00:29:58,040 --> 00:30:03,280
 When velocity is positive, I'll be moving in this direction,

440
00:30:03,280 --> 00:30:06,120
 in this picture.

441
00:30:06,120 --> 00:30:08,500
 And when velocity is negative, I'm moving this direction.

442
00:30:08,500 --> 00:30:10,960
 So I tend to take spirals.

443
00:30:10,960 --> 00:30:13,920
 And in the good case, when there's damping,

444
00:30:13,920 --> 00:30:18,840
 I expect those spirals to be like this.

445
00:30:18,840 --> 00:30:20,320
 So that's what we're seeing here.

446
00:30:20,320 --> 00:30:22,520
 We're seeing an initial condition here.

447
00:30:22,520 --> 00:30:23,560
 And this is the origin.

448
00:30:23,560 --> 00:30:28,120
 And I can change the stiffness and damping and the like.

449
00:30:28,120 --> 00:30:34,840
 And this is chosen with a pretty small h.

450
00:30:34,840 --> 00:30:38,720
 h is chosen to be 0.1 seconds here.

451
00:30:38,720 --> 00:30:42,560
 So I have a mass of 1, a damping of 1--

452
00:30:42,560 --> 00:30:44,880
 I should have picked 0.1 or something--

453
00:30:44,880 --> 00:30:46,160
 and a stiffness of 2.

454
00:30:46,160 --> 00:30:49,000
 So these are all kind of like around the number 1.

455
00:30:49,000 --> 00:30:51,800
 I get this sort of reasonable solution.

456
00:30:51,800 --> 00:30:54,480
 Interestingly, as I increase the stiffness--

457
00:30:54,480 --> 00:30:57,040
 this is making k bigger--

458
00:30:57,040 --> 00:30:58,520
 then I'm going to get elongated.

459
00:30:58,520 --> 00:30:59,960
 I'm going to get larger velocities.

460
00:30:59,960 --> 00:31:02,440
 I'm going to-- like this, right?

461
00:31:02,440 --> 00:31:06,080
 But it'll still eventually converge.

462
00:31:06,080 --> 00:31:08,080
 Now, the red line-- so the blue line

463
00:31:08,080 --> 00:31:11,360
 is the analytical solution, no numerical integration

464
00:31:11,360 --> 00:31:12,320
 accuracies.

465
00:31:12,320 --> 00:31:14,800
 The red line is the numerical approximation

466
00:31:14,800 --> 00:31:18,800
 that I get from doing Euler integration.

467
00:31:18,800 --> 00:31:21,040
 Now, the natural thing you could imagine

468
00:31:21,040 --> 00:31:23,680
 is if I start taking bigger steps--

469
00:31:23,680 --> 00:31:25,400
 so what it's basically doing is it's

470
00:31:25,400 --> 00:31:27,520
 taking the derivative at each time

471
00:31:27,520 --> 00:31:30,400
 and then forecasting that out as if it was constant.

472
00:31:30,400 --> 00:31:32,640
 And then it's evaluating the derivative at that time,

473
00:31:32,640 --> 00:31:33,440
 forecasting it out.

474
00:31:33,440 --> 00:31:36,960
 So it's going to make an approximation of that curve.

475
00:31:36,960 --> 00:31:40,000
 The problem is if I pick h to be--

476
00:31:40,000 --> 00:31:41,840
 I'm going to start increasing h now.

477
00:31:41,840 --> 00:31:45,160
 So if I start increasing h, my approximation

478
00:31:45,160 --> 00:31:49,680
 is going to get more and more decimated.

479
00:31:49,680 --> 00:31:51,760
 And my accuracy is going to go down.

480
00:31:51,760 --> 00:31:57,360
 If I increase h too much--

481
00:31:57,360 --> 00:31:58,840
 sorry, that was the stiffness.

482
00:31:58,840 --> 00:32:02,480
 If I increase h too much, things can get bad, right?

483
00:32:02,480 --> 00:32:05,360
 So I'm simulating a system that is-- the continuous time

484
00:32:05,360 --> 00:32:10,200
 dynamics are stable, but the discrete time approximation

485
00:32:10,200 --> 00:32:13,280
 is unstable.

486
00:32:13,280 --> 00:32:16,320
 This seems totally artificial and forced.

487
00:32:16,320 --> 00:32:19,400
 You might see a simulator do this on you one day.

488
00:32:19,400 --> 00:32:21,600
 And it's the same-- the reasons for it

489
00:32:21,600 --> 00:32:24,080
 are exactly what we're seeing here.

490
00:32:24,080 --> 00:32:26,580
 So the very first lesson is just if you

491
00:32:26,580 --> 00:32:30,720
 see your simulator blow up, turn the time step down.

492
00:32:30,720 --> 00:32:31,600
 That's the first one.

493
00:32:31,600 --> 00:32:34,760
 But actually, the interaction with the stiffness

494
00:32:34,760 --> 00:32:40,800
 and the damping and the mass is actually easy to understand,

495
00:32:40,800 --> 00:32:41,680
 too.

496
00:32:41,680 --> 00:32:45,800
 And we're going to try to make sure that those points land.

497
00:32:45,800 --> 00:32:51,360
 In particular, what matters is the time step as a ratio,

498
00:32:51,360 --> 00:32:59,660
 compared relative to the not k, but k over m.

499
00:32:59,660 --> 00:33:04,340
 So the thing that matters is h relative to k over m.

500
00:33:04,340 --> 00:33:08,860
 These are the accelerations.

501
00:33:08,860 --> 00:33:11,740
 This is like the q dot, the nominal q dot.

502
00:33:11,740 --> 00:33:14,980
 I'm sorry, q double dot.

503
00:33:14,980 --> 00:33:18,660
 This is the stiffness divided by mass.

504
00:33:18,660 --> 00:33:23,860
 And if k over m is large, then you're

505
00:33:23,860 --> 00:33:28,140
 going to need a smaller h to simulate it accurately.

506
00:33:28,140 --> 00:33:33,160
 Because if I increase k here, if I increase k,

507
00:33:33,160 --> 00:33:35,860
 that's getting my-- my derivatives

508
00:33:35,860 --> 00:33:37,460
 are going to be larger.

509
00:33:37,460 --> 00:33:41,700
 And so taking a long step with fast changing derivatives

510
00:33:41,700 --> 00:33:44,140
 can quickly lead to big errors.

511
00:33:44,140 --> 00:33:45,900
 That's the intuition.

512
00:33:45,900 --> 00:33:49,460
 If your accelerations are big, then you

513
00:33:49,460 --> 00:33:52,500
 need to make your time step small.

514
00:33:52,500 --> 00:33:54,820
 So it turns out that when you're simulating a humanoid,

515
00:33:54,820 --> 00:33:58,220
 let's say a 400 pound Atlas robot that's

516
00:33:58,220 --> 00:34:00,760
 generating relatively big forces on the ground,

517
00:34:00,760 --> 00:34:03,020
 you would think that might be a hard thing to simulate.

518
00:34:03,020 --> 00:34:06,420
 But actually, the accelerations are relatively low.

519
00:34:06,420 --> 00:34:10,100
 So big forces on a big robot are kind of OK.

520
00:34:10,100 --> 00:34:12,860
 When Atlas goes to pick up like a toothpick,

521
00:34:12,860 --> 00:34:14,620
 that's the bad case.

522
00:34:14,620 --> 00:34:17,380
 You get big forces on a little mass,

523
00:34:17,380 --> 00:34:20,900
 and you send toothpicks flying in your simulator.

524
00:34:20,900 --> 00:34:25,340
 And it turns out, EWAs picking up stuff

525
00:34:25,340 --> 00:34:27,140
 are not so different from that.

526
00:34:27,140 --> 00:34:29,300
 And in the range of inertias that you

527
00:34:29,300 --> 00:34:31,660
 have to deal with in manipulation

528
00:34:31,660 --> 00:34:32,660
 is the first challenge.

529
00:34:32,660 --> 00:34:35,260
 You tend to have very stiff equations.

530
00:34:35,260 --> 00:34:39,020
 And also, the accuracy of the contact simulation

531
00:34:39,020 --> 00:34:41,120
 is such that you need to choose k larger

532
00:34:41,120 --> 00:34:42,660
 than you would for walking.

533
00:34:42,660 --> 00:34:46,900
 And I'll make that point when we get into the contact equations.

534
00:34:46,900 --> 00:34:49,460
 OK, does that basic idea make sense?

535
00:34:49,460 --> 00:34:51,660
 What does it mean to be a stiff differential equation?

536
00:34:51,660 --> 00:34:55,820
 It means that I have these accelerations, this k over m

537
00:34:55,820 --> 00:35:01,140
 in this simple system is large, which means k has to be small.

538
00:35:01,140 --> 00:35:05,180
 Sorry, h has to be small.

539
00:35:05,180 --> 00:35:05,680
 Good.

540
00:35:06,560 --> 00:35:16,520
 So we're going to see now where some of that stiffness

541
00:35:16,520 --> 00:35:18,160
 comes from in the contact problem.

542
00:35:18,160 --> 00:35:24,400
 Let's do a little contact mechanics.

543
00:35:24,400 --> 00:35:27,840
 [WRITING ON BOARD]

544
00:35:27,840 --> 00:35:49,760
 I'm going to take almost the same example,

545
00:35:49,760 --> 00:35:52,640
 but I'm going to put a contact inside it.

546
00:35:52,640 --> 00:35:54,960
 In fact, I'll do it in the vertical plane

547
00:35:54,960 --> 00:35:56,720
 this time instead of the horizontal plane,

548
00:35:56,720 --> 00:36:02,120
 just so I'm pulling down with mg.

549
00:36:02,120 --> 00:36:05,160
 And I've got a ground here.

550
00:36:05,160 --> 00:36:09,160
 And I want to think about what happens if my point mass goes

551
00:36:09,160 --> 00:36:10,500
 into the ground.

552
00:36:10,500 --> 00:36:12,280
 Now, your physical intuition will probably

553
00:36:12,280 --> 00:36:15,820
 tell you all kinds of things about that.

554
00:36:15,820 --> 00:36:17,840
 First of all, you probably expect it to bounce.

555
00:36:17,840 --> 00:36:19,800
 But that will depend on our contact parameters.

556
00:36:19,800 --> 00:36:21,920
 Some of the models that we're going to talk about,

557
00:36:21,920 --> 00:36:25,000
 it's just stop and stop.

558
00:36:25,000 --> 00:36:27,600
 If you assume that the ground and the point

559
00:36:27,600 --> 00:36:30,240
 are infinitely rigid, then actually,

560
00:36:30,240 --> 00:36:32,960
 unless you do something else to model restitution or something

561
00:36:32,960 --> 00:36:34,840
 like this, then actually rigid contact

562
00:36:34,840 --> 00:36:38,300
 would have it defined as just coming into losing

563
00:36:38,300 --> 00:36:41,160
 all of its energy on collision.

564
00:36:41,160 --> 00:36:43,700
 And so most of our mathematical models

565
00:36:43,700 --> 00:36:47,040
 are actually rigid geometries.

566
00:36:47,040 --> 00:36:50,440
 So the default answer actually is stop.

567
00:36:50,440 --> 00:36:52,800
 But we'll see ways to make that better.

568
00:36:52,800 --> 00:36:54,680
 OK, so this is almost the same equations.

569
00:36:54,680 --> 00:36:56,920
 But I don't have damping now.

570
00:36:56,920 --> 00:37:03,600
 I just have-- if I call this now the z,

571
00:37:03,600 --> 00:37:09,280
 and z double dot is just negative mg

572
00:37:09,280 --> 00:37:10,800
 is when I'm in the air.

573
00:37:10,800 --> 00:37:13,120
 But then once I get to the ground,

574
00:37:13,120 --> 00:37:15,800
 I'm going to have a contact force.

575
00:37:15,800 --> 00:37:18,320
 Let me call it the normal force for now.

576
00:37:18,320 --> 00:37:23,800
 But we're going to use our full spatial notation

577
00:37:23,800 --> 00:37:26,080
 after the basic example.

578
00:37:26,080 --> 00:37:31,760
 So when it's on the ground, I'll have this force of normal.

579
00:37:31,760 --> 00:37:34,640
 And I'll have the mg, both.

580
00:37:34,640 --> 00:37:40,280
 So then in this case, my equations look like this.

581
00:37:40,280 --> 00:37:47,000
 Like I said, you might expect it to bounce.

582
00:37:47,000 --> 00:37:50,000
 But we'll see the cases where it's not.

583
00:37:50,000 --> 00:37:54,320
 So the question is, where does fn come from?

584
00:37:54,320 --> 00:37:56,040
 When it's at rest, you can sort of

585
00:37:56,040 --> 00:37:59,520
 imagine that fn will be negative mg.

586
00:37:59,520 --> 00:38:01,240
 And you'll have an equilibrium.

587
00:38:01,240 --> 00:38:06,440
 But it's more interesting to ask what happens when you collide.

588
00:38:06,440 --> 00:38:13,080
 OK, so option one is rigid contact.

589
00:38:13,160 --> 00:38:21,120
 Meaning we've assumed both objects are perfectly rigid.

590
00:38:21,120 --> 00:38:27,920
 Two steel objects colliding like this, right?

591
00:38:27,920 --> 00:38:29,320
 Even harder than steel, right?

592
00:38:29,320 --> 00:38:31,320
 Because steel would bounce a little bit, right?

593
00:38:31,320 --> 00:38:38,760
 So the way that fn is defined in the perfectly rigid case,

594
00:38:38,760 --> 00:38:49,480
 fn is the smallest force that resists penetration.

595
00:38:49,480 --> 00:38:59,880
 It's the principle of least action

596
00:38:59,880 --> 00:39:03,520
 if you want the variational version.

597
00:39:03,520 --> 00:39:04,020
 Right?

598
00:39:04,020 --> 00:39:13,600
 So this represents a constraint.

599
00:39:13,600 --> 00:39:17,000
 And the forces of constraint in the principle

600
00:39:17,000 --> 00:39:20,560
 of least action, which is a mechanics principle,

601
00:39:20,560 --> 00:39:23,000
 are that the constraint forces are the minimal forces

602
00:39:23,000 --> 00:39:26,080
 they need to be in order to-- they

603
00:39:26,080 --> 00:39:28,400
 make the minimal change to the unconstrained motion

604
00:39:28,400 --> 00:39:31,240
 as possible.

605
00:39:31,240 --> 00:39:34,560
 Now what does that force have to be?

606
00:39:34,560 --> 00:39:37,240
 What is the minimal force at the moment of impact

607
00:39:37,240 --> 00:39:38,280
 is the interesting case.

608
00:39:38,280 --> 00:39:43,760
 Anybody know the answer?

609
00:39:43,760 --> 00:39:45,640
 I don't even have to tell you what m is.

610
00:39:45,640 --> 00:39:46,800
 You can tell me the answer.

611
00:39:46,800 --> 00:39:59,000
 At the moment of impact, fn has to be infinite.

612
00:39:59,000 --> 00:40:00,040
 OK?

613
00:40:00,040 --> 00:40:00,540
 Why?

614
00:40:00,540 --> 00:40:09,600
 So if I were to plot as a function of t, let's say z dot.

615
00:40:09,600 --> 00:40:10,800
 Let me just simulate for it.

616
00:40:10,800 --> 00:40:14,160
 I'm going to-- a version of my plot here.

617
00:40:14,160 --> 00:40:17,200
 So z dot is just going to increase.

618
00:40:17,200 --> 00:40:18,900
 It's going to get more and more negative

619
00:40:18,900 --> 00:40:21,200
 until the moment of collision.

620
00:40:21,200 --> 00:40:21,720
 This is the--

621
00:40:30,280 --> 00:40:35,520
 And then in the perfect rigid model,

622
00:40:35,520 --> 00:40:37,400
 z dot is going to suddenly be 0.

623
00:40:37,400 --> 00:40:46,200
 So in an impulse, I went from having a negative velocity

624
00:40:46,200 --> 00:40:47,920
 to having a 0 velocity.

625
00:40:47,920 --> 00:40:57,400
 And that requires an impulsive force, a delta function

626
00:40:57,400 --> 00:41:01,800
 in force, which does-- it has finite work,

627
00:41:01,800 --> 00:41:03,880
 but over an infinitely small interval.

628
00:41:03,880 --> 00:41:05,760
 So it's actually a delta function.

629
00:41:05,760 --> 00:41:06,260
 Yes?

630
00:41:06,260 --> 00:41:06,760
 [INAUDIBLE]

631
00:41:06,760 --> 00:41:09,340
 Yes.

632
00:41:09,340 --> 00:41:10,840
 [INAUDIBLE]

633
00:41:10,840 --> 00:41:11,320
 Good.

634
00:41:11,320 --> 00:41:12,840
 That's exactly the question.

635
00:41:12,840 --> 00:41:16,800
 So this is in the perfectly continuous time case.

636
00:41:16,800 --> 00:41:18,680
 And the question was, what happens if I now

637
00:41:18,680 --> 00:41:20,740
 do my Euler integration?

638
00:41:20,740 --> 00:41:25,400
 If I only ask that the penetration is satisfied

639
00:41:25,400 --> 00:41:28,040
 at the finite time steps of my integration, which

640
00:41:28,040 --> 00:41:30,360
 is all I tend to ask, then yes, you

641
00:41:30,360 --> 00:41:34,720
 can have a finite force that resists and gets you perfectly

642
00:41:34,720 --> 00:41:36,040
 back.

643
00:41:36,040 --> 00:41:40,480
 So I was going to say that later, but I'll say that now.

644
00:41:40,480 --> 00:41:41,000
 That's good.

645
00:41:41,000 --> 00:41:45,640
 Let me introduce one bit of notation

646
00:41:45,640 --> 00:41:48,480
 to say that carefully.

647
00:41:48,480 --> 00:41:50,800
 So there's one other quantity that we're

648
00:41:50,800 --> 00:41:54,540
 going to use generally here, which is the sine distance

649
00:41:54,540 --> 00:41:55,040
 function.

650
00:41:55,040 --> 00:42:00,440
 This is just the sine distance function

651
00:42:00,440 --> 00:42:02,720
 we used in perception.

652
00:42:02,720 --> 00:42:07,240
 This is the distance between the object and the other object

653
00:42:07,240 --> 00:42:09,160
 that I'm trying to collide.

654
00:42:09,160 --> 00:42:11,880
 So this is the smallest force that resists penetration.

655
00:42:11,880 --> 00:42:15,240
 Resisting penetration means that phi of q

656
00:42:15,240 --> 00:42:16,720
 stays greater than or equal to 0.

657
00:42:16,720 --> 00:42:24,320
 And I think-- I guess I don't need it.

658
00:42:24,320 --> 00:42:37,880
 Yeah, so for Euler integration, if we only

659
00:42:37,880 --> 00:42:50,440
 require phi q at certain n to be greater than or equal to 0

660
00:42:50,440 --> 00:43:00,000
 at discrete times, then Fn can be finite.

661
00:43:00,000 --> 00:43:07,440
 It's a little unfortunate.

662
00:43:07,440 --> 00:43:08,400
 There's two n's there.

663
00:43:08,400 --> 00:43:16,600
 And in that case, it has the-- it's still--

664
00:43:16,600 --> 00:43:18,880
 we think of it as an impulsive force integrated

665
00:43:18,880 --> 00:43:21,480
 over some finite time, so it has a finite magnitude.

666
00:43:21,480 --> 00:43:26,200
 Is that clear?

667
00:43:26,200 --> 00:43:27,280
 Yeah?

668
00:43:27,280 --> 00:43:29,800
 How about-- yes?

669
00:43:29,800 --> 00:43:30,300
 Good.

670
00:43:30,300 --> 00:43:37,000
 Most of you aren't giving me any thumbs, but that's OK.

671
00:43:37,000 --> 00:43:40,080
 I know it's a little strange.

672
00:43:40,080 --> 00:43:45,400
 OK, so but this notion of rigid-unrigid contact,

673
00:43:45,400 --> 00:43:50,480
 which most of our mechanics is rigid body mechanics,

674
00:43:50,480 --> 00:43:53,320
 leads to this seeming problem where

675
00:43:53,320 --> 00:43:57,760
 I need instantaneous forces of collision, which makes

676
00:43:57,760 --> 00:43:59,360
 it hard to simulate accurately.

677
00:43:59,360 --> 00:44:02,000
 If you want to simulate as accurately as possible

678
00:44:02,000 --> 00:44:04,460
 in continuous time, you actually have to do event detection,

679
00:44:04,460 --> 00:44:07,440
 and you have to handle that collision event explicitly,

680
00:44:07,440 --> 00:44:09,480
 and then continue integrating.

681
00:44:09,480 --> 00:44:11,480
 If you make a discrete time approximation,

682
00:44:11,480 --> 00:44:13,240
 then we're going to play different tricks.

683
00:44:13,960 --> 00:44:14,460
 OK.

684
00:44:14,460 --> 00:44:18,560
 So let's just-- before we move on to those time steppers,

685
00:44:18,560 --> 00:44:22,680
 let me also say option two here is

686
00:44:22,680 --> 00:44:24,280
 to think about soft contact.

687
00:44:24,280 --> 00:44:35,560
 So now, when the ball is on the ground here,

688
00:44:35,560 --> 00:44:38,240
 I'm actually going to-- let me draw it even a little bit

689
00:44:38,240 --> 00:44:40,880
 in penetration here.

690
00:44:40,880 --> 00:44:46,040
 I'll make it instead a spring law that governs--

691
00:44:46,040 --> 00:44:48,160
 I can make it bigger.

692
00:44:48,160 --> 00:44:49,560
 You guys are far away.

693
00:44:49,560 --> 00:44:53,000
 I've got a ball that's way under the ground.

694
00:44:53,000 --> 00:44:56,100
 And let me put a spring that's trying

695
00:44:56,100 --> 00:45:01,160
 to define my normal force.

696
00:45:01,160 --> 00:45:02,360
 That would be an alternative.

697
00:45:02,360 --> 00:45:03,680
 And I can do a spring damper.

698
00:45:03,680 --> 00:45:08,240
 In fact, that's more practical to do a spring damper.

699
00:45:08,240 --> 00:45:13,400
 And in fact, another good way to define the normal force here

700
00:45:13,400 --> 00:45:20,960
 would be to say it's 0 if phi q is greater than 0.

701
00:45:20,960 --> 00:45:29,680
 And it's negative phi q times k if phi q less than or equal

702
00:45:29,680 --> 00:45:30,180
 to 0.

703
00:45:37,400 --> 00:45:39,560
 And then we could add damping in, too, for instance.

704
00:45:39,560 --> 00:45:49,200
 This is actually, I would say, a better model of what really

705
00:45:49,200 --> 00:45:52,160
 happens in the world than the rigid objects.

706
00:45:52,160 --> 00:45:55,400
 No objects are technically rigid.

707
00:45:55,400 --> 00:46:00,700
 But the stiffness of real collisions--

708
00:46:00,700 --> 00:46:03,280
 because to simulate accurate things that

709
00:46:03,280 --> 00:46:05,640
 don't penetrate much, like imperceptibly,

710
00:46:05,640 --> 00:46:07,600
 when my foot's hitting the ground,

711
00:46:07,600 --> 00:46:10,520
 there's a small deformation of my skin,

712
00:46:10,520 --> 00:46:12,400
 but not a big deformation.

713
00:46:12,400 --> 00:46:14,320
 Which means in order to model that accurately,

714
00:46:14,320 --> 00:46:17,520
 I have to choose k to be very big.

715
00:46:17,520 --> 00:46:19,440
 And this is the tension.

716
00:46:19,440 --> 00:46:23,280
 So now I can add stiffness in my contact model,

717
00:46:23,280 --> 00:46:27,080
 but it means I have to simulate slowly.

718
00:46:27,080 --> 00:46:33,720
 Even worse, the stiffness of the simulation, in some sense,

719
00:46:33,720 --> 00:46:37,160
 is changing as a function of the configuration.

720
00:46:37,160 --> 00:46:40,920
 So in my plot, it's hard to pick one time step that

721
00:46:40,920 --> 00:46:43,440
 will work in all of the regions, because the stiffness values

722
00:46:43,440 --> 00:46:45,400
 are different in different regions.

723
00:46:45,400 --> 00:46:47,480
 If I have two objects, if I get an object jammed

724
00:46:47,480 --> 00:46:50,560
 between multiple objects, that's a different configuration.

725
00:46:50,560 --> 00:46:53,360
 It's much harder to pick a single h that

726
00:46:53,360 --> 00:46:55,920
 works for all the possible derivatives you're

727
00:46:55,920 --> 00:46:57,240
 going to get across the states.

728
00:46:57,240 --> 00:46:59,200
 [SIDE CONVERSATION]

729
00:46:59,200 --> 00:47:09,800
 So in practice, you'll pick k enough

730
00:47:09,800 --> 00:47:14,440
 to visually be satisfying.

731
00:47:14,440 --> 00:47:18,080
 You won't see-- I mean, when we were first debugging Atlas,

732
00:47:18,080 --> 00:47:20,280
 we would have Atlas fall a meter into the ground,

733
00:47:20,280 --> 00:47:22,080
 just to make sure that we got the time steps right,

734
00:47:22,080 --> 00:47:23,080
 and stuff like this.

735
00:47:23,080 --> 00:47:26,400
 And then we would slowly tune that up.

736
00:47:26,400 --> 00:47:31,720
 And then, I should have said, but when I make h small,

737
00:47:31,720 --> 00:47:33,240
 it takes longer to simulate.

738
00:47:33,240 --> 00:47:34,880
 If I want to simulate for five seconds,

739
00:47:34,880 --> 00:47:36,420
 and my time step is small, it's going

740
00:47:36,420 --> 00:47:38,080
 to take a long time to simulate.

741
00:47:38,080 --> 00:47:39,080
 So this is the tension.

742
00:47:39,080 --> 00:47:41,840
 How accurate do you want your physics to be?

743
00:47:41,840 --> 00:47:45,440
 How large do you want k to be, versus how fast

744
00:47:45,440 --> 00:47:46,520
 do you want to simulate?

745
00:47:46,520 --> 00:47:47,020
 Sorry.

746
00:47:47,020 --> 00:47:48,560
 [SIDE CONVERSATION]

747
00:47:48,560 --> 00:47:49,060
 OK, good.

748
00:47:49,060 --> 00:47:54,840
 Is that clear?

749
00:47:54,840 --> 00:47:57,280
 Basic story?

750
00:47:57,280 --> 00:47:57,760
 OK.

751
00:47:57,760 --> 00:48:01,720
 So let's think now about friction.

752
00:48:01,720 --> 00:48:07,200
 We've only talked about vertical force so far,

753
00:48:07,200 --> 00:48:11,760
 where vertical is always defined in this frame

754
00:48:11,760 --> 00:48:16,160
 as the direction, the gradient of the sine distance function.

755
00:48:16,160 --> 00:48:17,540
 So I'll say that more carefully.

756
00:48:17,540 --> 00:48:21,760
 But in the ball falling from the sky,

757
00:48:21,760 --> 00:48:23,480
 the normal force is always vertical.

758
00:48:23,480 --> 00:48:25,680
 But for any two objects as they're coming together,

759
00:48:25,680 --> 00:48:29,960
 the normal direction is the place of-- it's

760
00:48:29,960 --> 00:48:33,640
 the direction of closest distance, minimal distance.

761
00:48:33,640 --> 00:48:36,680
 OK, that's the generalization.

762
00:48:36,680 --> 00:48:38,480
 Let's think about what friction looks like.

763
00:48:38,480 --> 00:48:46,220
 In the simple case, let me now throw a ball sideways

764
00:48:46,220 --> 00:48:46,800
 at the ground.

765
00:48:46,800 --> 00:48:47,300
 OK?

766
00:48:50,960 --> 00:48:55,080
 And when I get to the ground, I'm going to have--

767
00:48:55,080 --> 00:48:56,400
 not my blue again.

768
00:48:56,400 --> 00:48:57,960
 I don't know.

769
00:48:57,960 --> 00:48:58,560
 It's blue.

770
00:48:58,560 --> 00:49:01,120
 I always break blue.

771
00:49:01,120 --> 00:49:03,800
 You guys are not going to be able to see blue.

772
00:49:03,800 --> 00:49:06,560
 OK.

773
00:49:06,560 --> 00:49:07,640
 That's my normal force.

774
00:49:07,640 --> 00:49:11,080
 And I'm going to call this my tangential force here.

775
00:49:11,080 --> 00:49:11,580
 OK?

776
00:49:12,340 --> 00:49:13,820
 [INAUDIBLE]

777
00:49:13,820 --> 00:49:26,060
 We came up with two ways to possibly define

778
00:49:26,060 --> 00:49:28,980
 a normal force, loads of details behind them.

779
00:49:28,980 --> 00:49:31,940
 But the general idea is either whatever force

780
00:49:31,940 --> 00:49:35,780
 is required to completely resist penetration or a spring force

781
00:49:35,780 --> 00:49:36,540
 to go like this.

782
00:49:36,540 --> 00:49:39,100
 But we haven't said anything about slowing me down

783
00:49:39,100 --> 00:49:42,220
 if I'm sliding along the ground.

784
00:49:42,220 --> 00:49:46,580
 OK, and the rigid approximation of friction

785
00:49:46,580 --> 00:49:48,740
 is most famously Coulomb friction.

786
00:49:49,500 --> 00:49:52,940
 [WRITING ON BOARD]

787
00:49:52,940 --> 00:50:13,500
 Which says, again, it's a dissipation law,

788
00:50:13,500 --> 00:50:23,380
 which says that my frictional force, my tangential force,

789
00:50:23,380 --> 00:50:28,820
 is less than or equal to some coefficient of friction times

790
00:50:28,820 --> 00:50:29,660
 my normal force.

791
00:50:29,660 --> 00:50:33,100
 [WRITING ON BOARD]

792
00:50:33,100 --> 00:50:50,700
 And inside that limit, then it's going

793
00:50:50,700 --> 00:51:00,780
 to be the smallest force that resists sliding.

794
00:51:00,780 --> 00:51:12,420
 OK?

795
00:51:12,420 --> 00:51:17,020
 And then once you're sliding-- so this is sticking.

796
00:51:19,900 --> 00:51:21,500
 And then once you're sliding, when

797
00:51:21,500 --> 00:51:25,200
 you have a velocity at the interface that's

798
00:51:25,200 --> 00:51:27,940
 greater than 0, then it's the maximal dissipation.

799
00:51:27,940 --> 00:51:36,180
 It's the force that has magnitude mu fn that

800
00:51:36,180 --> 00:51:37,540
 dissipates the most energy.

801
00:51:37,540 --> 00:51:41,620
 That just tells me what direction the force

802
00:51:41,620 --> 00:51:42,340
 should be applied.

803
00:51:42,340 --> 00:51:45,660
 The magnitude is going to be based on my normal force.

804
00:51:45,660 --> 00:51:47,740
 And the direction is whatever direction

805
00:51:47,740 --> 00:51:48,980
 would slow me down the most.

806
00:51:48,980 --> 00:51:58,900
 OK, this is kind of a strange thing.

807
00:51:58,900 --> 00:52:02,940
 But the Coulomb friction law just

808
00:52:02,940 --> 00:52:07,260
 says that if I have a larger normal force,

809
00:52:07,260 --> 00:52:08,820
 if I push down harder on my object,

810
00:52:08,820 --> 00:52:10,540
 then it's going to resist.

811
00:52:10,540 --> 00:52:12,080
 It's going to provide more friction.

812
00:52:12,080 --> 00:52:13,760
 And it's proportionally more.

813
00:52:13,760 --> 00:52:17,720
 And that I can summarize that friction interaction

814
00:52:17,720 --> 00:52:18,960
 with this single coefficient.

815
00:52:18,960 --> 00:52:25,960
 In 2D, what does this look like?

816
00:52:25,960 --> 00:52:31,000
 I say it's greater than-- I've got

817
00:52:31,000 --> 00:52:37,060
 an absolute value of the normal force is proportional to my--

818
00:52:37,060 --> 00:52:38,800
 the absolute value of the tangential force

819
00:52:38,800 --> 00:52:41,520
 is proportional to my normal force.

820
00:52:41,520 --> 00:52:43,760
 That means as my normal force grows,

821
00:52:43,760 --> 00:52:46,440
 I can get more tangential force.

822
00:52:46,440 --> 00:52:48,160
 And the way that we draw this, you

823
00:52:48,160 --> 00:52:54,960
 could draw this as the admissible frictions here

824
00:52:54,960 --> 00:52:56,960
 live in a cone.

825
00:52:56,960 --> 00:52:58,560
 As the normal force increases, then I

826
00:52:58,560 --> 00:53:00,880
 can have larger tangential forces.

827
00:53:00,880 --> 00:53:05,280
 Anything inside this region here.

828
00:53:05,280 --> 00:53:07,360
 And this is called the friction cone.

829
00:53:07,920 --> 00:53:18,640
 This definition still works in 3D.

830
00:53:18,640 --> 00:53:23,560
 The friction cone now becomes an ice cream cone in 3D.

831
00:53:23,560 --> 00:53:26,360
 Still describes a limit on the total amount

832
00:53:26,360 --> 00:53:28,320
 of frictional force based on the normal force.

833
00:53:36,600 --> 00:53:39,920
 So what happens here then?

834
00:53:39,920 --> 00:53:41,960
 So I said these things quickly.

835
00:53:41,960 --> 00:53:43,840
 It's the smallest force that resists sliding.

836
00:53:43,840 --> 00:53:45,420
 And then it's the maximal dissipation.

837
00:53:45,420 --> 00:53:52,200
 So if you think about a simple case, for instance, of my ball.

838
00:53:52,200 --> 00:53:53,800
 Or let me make it a box so we don't

839
00:53:53,800 --> 00:53:56,120
 think about the rolling version of it.

840
00:53:56,120 --> 00:54:01,920
 On an inclined plane.

841
00:54:01,920 --> 00:54:05,480
 Then I'll have normal forces that

842
00:54:05,480 --> 00:54:07,480
 live inside some friction cone.

843
00:54:07,480 --> 00:54:13,000
 I'll summarize the contact at these two points for now.

844
00:54:13,000 --> 00:54:16,960
 I can say there's little points of contact here

845
00:54:16,960 --> 00:54:18,620
 and the rest is suspended a little bit.

846
00:54:18,620 --> 00:54:26,240
 So I'm allowed to have any force inside the friction cone.

847
00:54:26,240 --> 00:54:27,400
 So what happens now?

848
00:54:27,400 --> 00:54:35,240
 If I have mg pulling me down like this,

849
00:54:35,240 --> 00:54:38,280
 and I have a frictional force that

850
00:54:38,280 --> 00:54:43,160
 has to live inside this cone that's trying to push up.

851
00:54:43,160 --> 00:54:45,360
 And it's going to pick the maximal direction it

852
00:54:45,360 --> 00:54:48,160
 can pick up.

853
00:54:48,160 --> 00:54:51,160
 My artwork, I think actually I had

854
00:54:51,160 --> 00:54:52,720
 forgotten to make this carefully.

855
00:54:52,720 --> 00:54:53,800
 But I did make it.

856
00:54:53,800 --> 00:54:57,920
 Both of those red lines are consistently slanted.

857
00:54:57,920 --> 00:55:02,360
 So given this beautiful rendition here,

858
00:55:02,360 --> 00:55:06,560
 there is no force that can be applied

859
00:55:06,560 --> 00:55:10,720
 at these points that would perfectly resist gravity.

860
00:55:10,720 --> 00:55:14,400
 So this object's going to slide.

861
00:55:14,400 --> 00:55:17,640
 If my friction cone was-- if my mu was larger,

862
00:55:17,640 --> 00:55:20,440
 my friction cone could increase.

863
00:55:20,440 --> 00:55:23,000
 You see the geometric picture I'm trying to say?

864
00:55:23,000 --> 00:55:24,520
 In order to get force balance, I would

865
00:55:24,520 --> 00:55:31,760
 need a force of friction that's perfectly resisting gravity.

866
00:55:31,760 --> 00:55:34,000
 Since this is outside my friction cone in that picture,

867
00:55:34,000 --> 00:55:36,200
 that means that thing's going to slide.

868
00:55:36,200 --> 00:55:40,120
 If I were to increase the friction cone by increasing mu,

869
00:55:40,120 --> 00:55:41,920
 then I could get inside that.

870
00:55:41,920 --> 00:55:46,320
 Or if I were to decrease the ramp, I could get inside that.

871
00:55:46,320 --> 00:55:48,360
 But there's actually a beautiful geometric version

872
00:55:48,360 --> 00:55:50,280
 of friction in that picture.

873
00:55:51,280 --> 00:55:51,780
 OK.

874
00:55:51,780 --> 00:55:55,040
 Ask some questions.

875
00:55:55,040 --> 00:55:55,680
 Is this landing?

876
00:55:55,680 --> 00:55:59,160
 Is this a useful level of detail?

877
00:55:59,160 --> 00:56:00,240
 No?

878
00:56:00,240 --> 00:56:02,840
 That's fine.

879
00:56:02,840 --> 00:56:06,680
 So basically it's because we want

880
00:56:06,680 --> 00:56:09,120
 a force that's going to be gravity.

881
00:56:09,120 --> 00:56:09,620
 Yes.

882
00:56:09,620 --> 00:56:11,280
 [INAUDIBLE]

883
00:56:11,280 --> 00:56:11,780
 Yes.

884
00:56:11,780 --> 00:56:14,600
 But that's outside of the friction cone.

885
00:56:14,600 --> 00:56:15,120
 Exactly.

886
00:56:15,120 --> 00:56:18,960
 So if I were to make a free body diagram, which I'm doing here,

887
00:56:18,960 --> 00:56:22,200
 right, and I said I wanted the forces to balance,

888
00:56:22,200 --> 00:56:23,920
 then in order for the forces to balance,

889
00:56:23,920 --> 00:56:25,960
 the forces of contact would have to be

890
00:56:25,960 --> 00:56:29,240
 able to be equal and opposite to the force of gravity.

891
00:56:29,240 --> 00:56:34,220
 And because that is not an acceptable friction force,

892
00:56:34,220 --> 00:56:36,440
 that means that it would slide.

893
00:56:36,440 --> 00:56:38,880
 And in fact, the friction force you would get

894
00:56:38,880 --> 00:56:44,360
 would be on this line resisting as much as possible.

895
00:56:44,360 --> 00:56:47,040
 That's the maximal dissipation idea.

896
00:56:47,040 --> 00:56:50,720
 Resisting as much as possible, but ultimately still not

897
00:56:50,720 --> 00:56:51,840
 stopping it from sliding.

898
00:56:51,840 --> 00:56:56,360
 What else can I say to help?

899
00:56:56,360 --> 00:57:04,000
 The friction cone idea is going to come up over and over again.

900
00:57:04,000 --> 00:57:05,960
 You can't talk about manipulation

901
00:57:05,960 --> 00:57:08,640
 without saying friction cone.

902
00:57:08,640 --> 00:57:13,120
 So you don't have to understand all the details about it,

903
00:57:13,120 --> 00:57:16,680
 but the concept of a friction cone is essential.

904
00:57:16,680 --> 00:57:17,180
 Yes?

905
00:57:17,180 --> 00:57:20,720
 So do you want it to stay inside the cone or outside?

906
00:57:20,720 --> 00:57:23,760
 The forces will always be inside the cone.

907
00:57:23,760 --> 00:57:25,640
 That's the rule.

908
00:57:25,640 --> 00:57:31,360
 And if I want this brick to stay still,

909
00:57:31,360 --> 00:57:35,520
 then I would want the friction cone

910
00:57:35,520 --> 00:57:40,200
 to have a force inside it that could resist that gravity.

911
00:57:40,200 --> 00:57:42,700
 Yeah?

912
00:57:42,700 --> 00:57:43,680
 How does this work?

913
00:57:43,680 --> 00:57:46,160
 Is this arbitrary, the way you do the cones?

914
00:57:46,160 --> 00:57:50,880
 Or is it based off of how the rocks run up to the planks?

915
00:57:50,880 --> 00:57:51,520
 Good.

916
00:57:51,520 --> 00:57:52,680
 Good, good, good question.

917
00:57:52,680 --> 00:57:56,920
 So the normal is defined.

918
00:57:56,920 --> 00:57:58,480
 It turns out in the general case,

919
00:57:58,480 --> 00:58:02,680
 it's defined by the direction in which the distance is smallest.

920
00:58:02,680 --> 00:58:06,280
 In this picture, it's totally reasonable.

921
00:58:06,280 --> 00:58:07,880
 I'm going to use the same colors here,

922
00:58:07,880 --> 00:58:10,520
 is to say that the normal Fn was here.

923
00:58:13,920 --> 00:58:20,840
 The tangent is a coordinate system that is on the surface.

924
00:58:20,840 --> 00:58:21,520
 Yeah?

925
00:58:21,520 --> 00:58:23,020
 When it's a two-dimensional surface,

926
00:58:23,020 --> 00:58:26,480
 we have to pick a coordinate system for those tangents.

927
00:58:26,480 --> 00:58:30,520
 And so therefore, the tangent in red is in this direction.

928
00:58:30,520 --> 00:58:31,020
 It's normal.

929
00:58:31,020 --> 00:58:40,720
 So that's what defines the geometry of that cone.

930
00:58:40,720 --> 00:58:45,680
 The angle there is given by the coefficient of friction.

931
00:58:45,680 --> 00:58:49,640
 I have a picture, actually, of the coordinate systems

932
00:58:49,640 --> 00:58:52,160
 somewhere here.

933
00:58:52,160 --> 00:58:56,080
 So in general, I have two general objects.

934
00:58:56,080 --> 00:58:58,400
 I define the sign distance between those objects

935
00:58:58,400 --> 00:58:59,480
 with this.

936
00:58:59,480 --> 00:59:01,840
 The normal is always the direction

937
00:59:01,840 --> 00:59:05,020
 of that sign distance, the gradient of the sign distance,

938
00:59:05,020 --> 00:59:07,040
 it turns out.

939
00:59:07,040 --> 00:59:11,520
 And the tangent is some choice like this.

940
00:59:11,520 --> 00:59:14,160
 I tried to do a 3D picture.

941
00:59:14,160 --> 00:59:16,000
 I hope that is sort of clear.

942
00:59:16,000 --> 00:59:19,400
 You could pick any coordinate system on that surface.

943
00:59:19,400 --> 00:59:21,360
 And then you'll design a cone, so it

944
00:59:21,360 --> 00:59:25,280
 would look like an ice cream cone,

945
00:59:25,280 --> 00:59:27,040
 with a normal in the middle of the cone.

946
00:59:27,040 --> 00:59:34,920
 Sliding friction's cool, too, but I'm not sure

947
00:59:34,920 --> 00:59:36,000
 if you have the appetite.

948
00:59:36,000 --> 00:59:36,500
 Yeah?

949
00:59:36,500 --> 00:59:38,460
 AUDIENCE: How does the top of the cone close?

950
00:59:38,460 --> 00:59:42,200
 Is it a straight line, or is it an arc?

951
00:59:42,200 --> 00:59:45,640
 PROFESSOR: So there's actually no top.

952
00:59:45,640 --> 00:59:50,160
 So this law of friction, which is not a great law, honestly.

953
00:59:50,160 --> 00:59:53,560
 It's the best we've got, but it has problems.

954
00:59:53,560 --> 00:59:55,760
 Actually, I'll tell you the problem in a second here.

955
00:59:55,760 --> 00:59:58,160
 But this says, if you give me more normal force,

956
00:59:58,160 --> 00:59:59,400
 I will give you more friction.

957
00:59:59,400 --> 01:00:01,560
 There's no limit.

958
01:00:01,560 --> 01:00:02,720
 Yeah.

959
01:00:02,720 --> 01:00:04,560
 OK, here's a reason why it's bad.

960
01:00:04,560 --> 01:00:07,680
 And this is why rigid contact is actually bad.

961
01:00:07,680 --> 01:00:09,600
 Here's a thought experiment.

962
01:00:09,600 --> 01:00:15,880
 So imagine I have a table with four legs.

963
01:00:15,880 --> 01:00:18,760
 And all I know, all of the equations of motion

964
01:00:18,760 --> 01:00:20,640
 would tell me is that if I walk up

965
01:00:20,640 --> 01:00:22,960
 to a table that's standing still,

966
01:00:22,960 --> 01:00:26,200
 then the normal forces must be sufficient to balance

967
01:00:26,200 --> 01:00:28,480
 the force of gravity.

968
01:00:28,480 --> 01:00:30,760
 So I know that there's a sum of normal forces

969
01:00:30,760 --> 01:00:32,880
 that cancels gravity.

970
01:00:32,880 --> 01:00:34,840
 Even more, I actually know that those forces

971
01:00:34,840 --> 01:00:38,160
 have to resist the torque, any torques due to gravity.

972
01:00:38,160 --> 01:00:42,080
 But I've got four feet, and I could produce the necessary

973
01:00:42,080 --> 01:00:46,460
 torque with only three feet.

974
01:00:46,460 --> 01:00:48,080
 That means that the rules of mechanics

975
01:00:48,080 --> 01:00:53,420
 don't actually tell me how much normal force is in each feet.

976
01:00:53,420 --> 01:00:58,840
 It's like just a failing of our rules of rigid mechanics.

977
01:00:58,840 --> 01:01:01,000
 So I could take some normal force over here

978
01:01:01,000 --> 01:01:03,200
 and put it over here and still get a valid solution

979
01:01:03,200 --> 01:01:04,840
 to the equations.

980
01:01:04,840 --> 01:01:06,920
 Everything I've said here does not completely

981
01:01:06,920 --> 01:01:08,840
 define what Fn is.

982
01:01:08,840 --> 01:01:10,360
 Here's the problem now.

983
01:01:10,360 --> 01:01:14,760
 So if you go to push the table, some of those feet

984
01:01:14,760 --> 01:01:16,320
 might be in sticking.

985
01:01:16,320 --> 01:01:17,640
 Some of them might be in sliding.

986
01:01:17,640 --> 01:01:19,320
 Depending on the normal force, you

987
01:01:19,320 --> 01:01:21,640
 don't know what the friction force is.

988
01:01:21,640 --> 01:01:24,360
 So the rules of rigid body mechanics

989
01:01:24,360 --> 01:01:28,200
 will not tell me if the table goes straight, or turns,

990
01:01:28,200 --> 01:01:29,560
 or left or right.

991
01:01:29,560 --> 01:01:31,160
 All of them are possible solutions

992
01:01:31,160 --> 01:01:32,400
 given the governing equations.

993
01:01:32,400 --> 01:01:34,520
 They do not give me a unique solution

994
01:01:34,520 --> 01:01:36,680
 to the differential equations I generate.

995
01:01:36,680 --> 01:01:39,240
 That seems totally embarrassing.

996
01:01:39,240 --> 01:01:42,000
 We have so much smarts in mechanics,

997
01:01:42,000 --> 01:01:44,400
 but we can't tell you which way the table is going to go.

998
01:01:44,400 --> 01:01:46,240
 We would need an atom-level simulation

999
01:01:46,240 --> 01:01:50,240
 of the differences of the actual contacts or whatever.

1000
01:01:50,240 --> 01:01:53,040
 We need more than a point model of contact at each feet

1001
01:01:53,040 --> 01:01:55,200
 to resolve that ambiguity.

1002
01:01:55,200 --> 01:01:57,600
 I can write down a perfectly reasonable set of equations,

1003
01:01:57,600 --> 01:02:01,080
 and it has non-unique solutions.

1004
01:02:01,080 --> 01:02:01,560
 [INAUDIBLE]

1005
01:02:01,560 --> 01:02:14,160
 That's a different thing.

1006
01:02:14,160 --> 01:02:18,080
 First of all, that's probably not good for your felt table.

1007
01:02:18,080 --> 01:02:20,800
 If my kids were doing that, I would yell at them.

1008
01:02:20,800 --> 01:02:23,840
 You're saying you push down, and then it squirts out.

1009
01:02:23,840 --> 01:02:25,360
 I think if you push down perfectly

1010
01:02:25,360 --> 01:02:27,800
 with absolute normal force, it wouldn't squirt out.

1011
01:02:27,800 --> 01:02:30,000
 You're putting a large force, and you're accidentally

1012
01:02:30,000 --> 01:02:32,440
 putting a little bit on the side, and it'll go out.

1013
01:02:32,440 --> 01:02:33,920
 Yeah?

1014
01:02:33,920 --> 01:02:37,880
 In that box diagram, if we put oil on that--

1015
01:02:37,880 --> 01:02:38,880
 Yeah?

1016
01:02:38,880 --> 01:02:40,880
 Would the cone change at all?

1017
01:02:40,880 --> 01:02:44,000
 Yes, that's exactly-- if I were to change the slipperiness,

1018
01:02:44,000 --> 01:02:45,600
 that is this coefficient of friction,

1019
01:02:45,600 --> 01:02:49,400
 the cones will come in, and I will more likely slide.

1020
01:02:49,400 --> 01:02:51,160
 It's exactly the right intuition.

1021
01:02:51,160 --> 01:02:53,240
 Now, the interesting thing is that the coefficient

1022
01:02:53,240 --> 01:02:56,400
 of friction is really a property of the interaction

1023
01:02:56,400 --> 01:02:59,880
 between the two types of materials.

1024
01:02:59,880 --> 01:03:02,880
 So you can't say, this object, this mustard bottle,

1025
01:03:02,880 --> 01:03:05,480
 has coefficient of friction 3.

1026
01:03:05,480 --> 01:03:08,400
 It's when the mustard pairs with the steel table,

1027
01:03:08,400 --> 01:03:09,840
 it has a certain coefficient.

1028
01:03:09,840 --> 01:03:12,160
 It's in contact pairs.

1029
01:03:12,160 --> 01:03:14,320
 So it's a little annoying to specify,

1030
01:03:14,320 --> 01:03:16,880
 and people typically specify individual numbers

1031
01:03:16,880 --> 01:03:19,400
 for individual ones and come up with a hacky way

1032
01:03:19,400 --> 01:03:22,920
 to combine them in the simulator.

1033
01:03:22,920 --> 01:03:23,420
 Yes?

1034
01:03:23,420 --> 01:03:26,480
 AUDIENCE: You're not considering the contact area, right?

1035
01:03:26,480 --> 01:03:28,040
 PROFESSOR: I am going to-- not yet.

1036
01:03:28,040 --> 01:03:28,680
 Not yet.

1037
01:03:28,680 --> 01:03:29,840
 But this is exactly right.

1038
01:03:29,840 --> 01:03:33,240
 So I summarized-- that's why you heard me hem and haw about,

1039
01:03:33,240 --> 01:03:34,840
 I just drew the forces there.

1040
01:03:34,840 --> 01:03:37,320
 But really, there should be forces distributed potentially

1041
01:03:37,320 --> 01:03:39,560
 across that entire thing.

1042
01:03:39,560 --> 01:03:42,600
 But most simulators don't do that.

1043
01:03:42,600 --> 01:03:44,000
 So let's actually talk about that.

1044
01:03:44,000 --> 01:03:51,000
 So sliding friction is awesome, but I'm going to skip it.

1045
01:03:51,000 --> 01:03:53,880
 So basically, yeah, I mean, there's a different--

1046
01:03:53,880 --> 01:03:55,800
 the rules of governing what force

1047
01:03:55,800 --> 01:04:01,080
 you'll get when you do start sliding have similar rules.

1048
01:04:01,080 --> 01:04:03,760
 Typically, it's basically-- it's almost exactly the same

1049
01:04:03,760 --> 01:04:06,080
 with maximal dissipation, but most of the time,

1050
01:04:06,080 --> 01:04:08,160
 people will say that your mu decreases

1051
01:04:08,160 --> 01:04:09,320
 once you start sliding.

1052
01:04:09,320 --> 01:04:12,880
 You'll have a different coefficient of sliding friction

1053
01:04:12,880 --> 01:04:16,280
 than static friction.

1054
01:04:16,280 --> 01:04:18,600
 So just if you see mu static or mu dynamic,

1055
01:04:18,600 --> 01:04:22,400
 that just means once you start moving,

1056
01:04:22,400 --> 01:04:24,680
 we have a different coefficient of friction.

1057
01:04:24,680 --> 01:04:27,920
 And that is-- it shouldn't be that way, right?

1058
01:04:27,920 --> 01:04:30,040
 That's just like our equations aren't quite right,

1059
01:04:30,040 --> 01:04:31,240
 and we're going to cover it up by saying

1060
01:04:31,240 --> 01:04:35,440
 there's two numbers there, and they discontinuously interact.

1061
01:04:35,440 --> 01:04:36,320
 It's just weird.

1062
01:04:36,320 --> 01:04:38,360
 But this is our best rigid approximation.

1063
01:04:38,360 --> 01:04:45,600
 OK, so now I think you appreciate a little bit more

1064
01:04:45,600 --> 01:04:47,840
 this notion of contact forces, how they

1065
01:04:47,840 --> 01:04:50,240
 need to be big, potentially.

1066
01:04:50,240 --> 01:04:53,440
 So for instance, this was back in the day

1067
01:04:53,440 --> 01:04:56,040
 when we were competing to win Atlas.

1068
01:04:56,040 --> 01:04:58,880
 And this was in Gazebo, right?

1069
01:04:58,880 --> 01:05:03,360
 And we didn't get to pick the parameters of the simulator,

1070
01:05:03,360 --> 01:05:05,720
 right?

1071
01:05:05,720 --> 01:05:08,100
 And it was really annoying to walk over the rough terrain,

1072
01:05:08,100 --> 01:05:12,480
 because it would go like this, right?

1073
01:05:12,480 --> 01:05:15,640
 So one of two things should have happened at this point.

1074
01:05:15,640 --> 01:05:17,100
 If we had control of the simulator,

1075
01:05:17,100 --> 01:05:20,920
 we would have changed the stiffness of the ground down

1076
01:05:20,920 --> 01:05:22,920
 and admitted that it would sink in a little bit.

1077
01:05:22,920 --> 01:05:26,800
 Or we would have turned the time step down, right?

1078
01:05:26,800 --> 01:05:29,240
 When you start seeing artifacts like that,

1079
01:05:29,240 --> 01:05:31,980
 that means you're getting into the regime where your integrator

1080
01:05:31,980 --> 01:05:33,500
 is not accurately tracking.

1081
01:05:33,500 --> 01:05:35,920
 There's a few other ways that you could get that artifact,

1082
01:05:35,920 --> 01:05:36,720
 and I'll tell you.

1083
01:05:36,720 --> 01:05:38,520
 But that's getting into the regime

1084
01:05:38,520 --> 01:05:41,400
 where your integrator is not tracking the true dynamics.

1085
01:05:41,400 --> 01:05:44,440
 And your first instinct should be to turn the time step down.

1086
01:05:44,440 --> 01:05:46,720
 Your second instinct should be to start

1087
01:05:46,720 --> 01:05:49,560
 looking for where the stiffness in your differential equation

1088
01:05:49,560 --> 01:05:51,480
 is coming from.

1089
01:05:51,480 --> 01:05:55,120
 Ironically, in the first demo, the IWA moving around and picking

1090
01:05:55,120 --> 01:06:00,120
 up the block, I had to pick a certain time step, right?

1091
01:06:00,120 --> 01:06:03,200
 And I wanted it to run well in deep node and all these things.

1092
01:06:03,200 --> 01:06:05,480
 The place where the stiffness comes from,

1093
01:06:05,480 --> 01:06:06,600
 I think you'll never guess.

1094
01:06:09,800 --> 01:06:13,000
 It's just an IWA moving around with a little red block.

1095
01:06:13,000 --> 01:06:13,760
 Any guess?

1096
01:06:13,760 --> 01:06:15,960
 What's the stiff part of the differential equation?

1097
01:06:15,960 --> 01:06:18,240
 And that's it.

1098
01:06:18,240 --> 01:06:20,040
 I've set you up to say it's the red block.

1099
01:06:20,040 --> 01:06:22,000
 It's not the red block.

1100
01:06:22,000 --> 01:06:23,280
 It's the fingers.

1101
01:06:23,280 --> 01:06:26,240
 It turns out the way that we simulate the WSG--

1102
01:06:26,240 --> 01:06:28,120
 I guess I did say it maybe a little bit,

1103
01:06:28,120 --> 01:06:29,280
 but that was not excellent.

1104
01:06:29,280 --> 01:06:36,560
 But yeah, the WSG has a mechanical drive

1105
01:06:36,560 --> 01:06:38,080
 so that the two fingers are always

1106
01:06:38,080 --> 01:06:40,800
 equal and opposite magnitude.

1107
01:06:40,800 --> 01:06:45,160
 We simulate that with a stiff spring, a too stiff spring.

1108
01:06:45,160 --> 01:06:47,240
 It has to be stiff, but it's the thing

1109
01:06:47,240 --> 01:06:49,620
 that drives the bottleneck of my simulator.

1110
01:06:49,620 --> 01:06:51,440
 That's annoying.

1111
01:06:51,440 --> 01:06:52,360
 But at least I know it.

1112
01:06:52,360 --> 01:06:53,080
 I found it.

1113
01:06:53,080 --> 01:06:55,560
 And I know that if I want to make my simulator faster,

1114
01:06:55,560 --> 01:06:59,240
 I can change that number or handle that stiffness

1115
01:06:59,240 --> 01:07:01,840
 properly.

1116
01:07:01,840 --> 01:07:05,280
 OK, let's think about the question of surfaces.

1117
01:07:05,280 --> 01:07:08,040
 So we had a question now that why

1118
01:07:08,040 --> 01:07:10,280
 did I draw two arrows when I really should be thinking

1119
01:07:10,280 --> 01:07:13,440
 about integrating over the surface?

1120
01:07:13,440 --> 01:07:14,680
 It's a pretty subtle thing.

1121
01:07:14,680 --> 01:07:24,560
 So most simulators think about force vectors

1122
01:07:24,560 --> 01:07:25,980
 applied at points.

1123
01:07:25,980 --> 01:07:28,100
 That's the natural thing to think about when you're

1124
01:07:28,100 --> 01:07:30,280
 writing a dynamics engine.

1125
01:07:30,280 --> 01:07:31,640
 But it gets subtle fast.

1126
01:07:31,640 --> 01:07:37,120
 So let's just think about box on box contact.

1127
01:07:37,120 --> 01:07:39,360
 That's what we saw when I dropped a bunch of red boxes

1128
01:07:39,360 --> 01:07:40,320
 out of the sky, right?

1129
01:07:40,320 --> 01:07:50,720
 So let's say I've got one box and I've got another box here.

1130
01:07:50,720 --> 01:07:52,880
 Box one and box two.

1131
01:07:52,880 --> 01:07:57,860
 Where do I draw the contact forces, my normal forces?

1132
01:07:57,860 --> 01:08:03,840
 I drew them here and here to make my free body diagram work.

1133
01:08:03,840 --> 01:08:07,480
 But that was a little arbitrary.

1134
01:08:07,480 --> 01:08:09,840
 You might think if you're writing the simulator

1135
01:08:09,840 --> 01:08:12,760
 that you'd think, oh, I'll just pick the corners.

1136
01:08:12,760 --> 01:08:15,960
 But that's not robust enough to handle all the cases, right?

1137
01:08:15,960 --> 01:08:18,440
 So where are you going to pick them

1138
01:08:18,440 --> 01:08:20,080
 if you find yourself in a situation

1139
01:08:20,080 --> 01:08:24,080
 where your box is hanging off the end?

1140
01:08:24,080 --> 01:08:29,320
 The point is maybe I need to somehow pick here and pick

1141
01:08:29,320 --> 01:08:31,720
 here, for instance, would be a reasonable choice.

1142
01:08:31,720 --> 01:08:37,920
 But there's other cases, too.

1143
01:08:37,920 --> 01:08:41,480
 So because the integration step isn't perfect

1144
01:08:41,480 --> 01:08:44,960
 and I might not simulate the equations perfectly,

1145
01:08:44,960 --> 01:08:51,160
 I might find myself with my block like this.

1146
01:08:51,160 --> 01:08:53,760
 My integration wasn't perfect, so my geometries

1147
01:08:53,760 --> 01:08:56,640
 are overlapping a little bit.

1148
01:08:56,640 --> 01:08:58,960
 Now where do you draw the contact forces?

1149
01:08:58,960 --> 01:09:01,200
 It's not super clear.

1150
01:09:01,200 --> 01:09:03,160
 Maybe you pick here.

1151
01:09:03,160 --> 01:09:04,520
 Maybe you pick here.

1152
01:09:04,520 --> 01:09:12,000
 Writing an algorithm that picks those forces consistently

1153
01:09:12,000 --> 01:09:14,160
 is hard, maybe impossible.

1154
01:09:14,160 --> 01:09:15,280
 I don't know.

1155
01:09:15,280 --> 01:09:17,840
 I think it has never been done.

1156
01:09:17,840 --> 01:09:21,040
 And this is another big reason why simulators of contact

1157
01:09:21,040 --> 01:09:25,160
 become unstable, is you'll be simulating along.

1158
01:09:25,160 --> 01:09:27,480
 You'll take steps of the integration.

1159
01:09:27,480 --> 01:09:29,360
 And it will quickly change its mind

1160
01:09:29,360 --> 01:09:32,960
 about where the forces should be applied.

1161
01:09:32,960 --> 01:09:35,000
 And then all of a sudden, something will explode.

1162
01:09:35,000 --> 01:09:39,400
 That could be what was happening here, too,

1163
01:09:39,400 --> 01:09:41,320
 is that it could be slightly changing

1164
01:09:41,320 --> 01:09:43,680
 its mind about where the forces should be applied.

1165
01:09:47,400 --> 01:09:52,760
 So here's a reasonable candidate.

1166
01:09:52,760 --> 01:09:57,000
 So let's say I've got two boxes that are in penetration.

1167
01:09:57,000 --> 01:09:59,200
 I think a natural algorithm that I would try to write

1168
01:09:59,200 --> 01:10:03,240
 would say, I'm going to pick the point of maximal penetration.

1169
01:10:03,240 --> 01:10:05,640
 And then I'm going to take the closest exit

1170
01:10:05,640 --> 01:10:07,000
 from that maximal penetration.

1171
01:10:07,000 --> 01:10:08,680
 And I'm going to apply a force like that.

1172
01:10:08,680 --> 01:10:13,240
 So that's a pretty good algorithm.

1173
01:10:16,160 --> 01:10:19,480
 But if I start looking at the way that force gets applied

1174
01:10:19,480 --> 01:10:22,240
 as I move the objects through, there's

1175
01:10:22,240 --> 01:10:25,160
 a problem, which is that the location of the force

1176
01:10:25,160 --> 01:10:28,960
 changes discontinuously as I move across that corner.

1177
01:10:28,960 --> 01:10:36,480
 So in particular, this notion of penetration distance

1178
01:10:36,480 --> 01:10:39,280
 and closest exit has the property

1179
01:10:39,280 --> 01:10:43,140
 that if I'm going in and I cross this corner,

1180
01:10:43,140 --> 01:10:44,840
 a force that was previously pushing me

1181
01:10:44,840 --> 01:10:47,840
 in this direction, my normal force, all of a sudden

1182
01:10:47,840 --> 01:10:50,040
 tried to decide to push up in this direction.

1183
01:10:50,040 --> 01:10:51,500
 Since I'm into penetration, it could

1184
01:10:51,500 --> 01:10:54,120
 be a large force that suddenly changed direction.

1185
01:10:54,120 --> 01:10:58,400
 This is another big source of stiffness or instability

1186
01:10:58,400 --> 01:11:00,880
 in the differential equations, in the contact equations.

1187
01:11:00,880 --> 01:11:06,160
 OK.

1188
01:11:06,160 --> 01:11:07,280
 Take a quick stretch, and then I'll

1189
01:11:07,280 --> 01:11:08,740
 tell you how to solve that problem.

1190
01:11:08,740 --> 01:11:12,220
 [SIDE CONVERSATION]

1191
01:11:12,220 --> 01:11:13,220
 Let's see.

1192
01:11:13,220 --> 01:11:21,180
 My blue chalk.

1193
01:11:21,180 --> 01:11:24,180
 [SIDE CONVERSATION]

1194
01:11:24,180 --> 01:11:45,980
 OK.

1195
01:11:45,980 --> 01:11:47,560
 I'm going to solve it, because we only

1196
01:11:47,560 --> 01:11:50,540
 have a little bit of time left.

1197
01:11:50,540 --> 01:11:57,940
 So I think this really is a big source of errors

1198
01:11:57,940 --> 01:11:59,580
 in a lot of simulations.

1199
01:11:59,580 --> 01:12:01,940
 I think the answer, in some sense, was in your question.

1200
01:12:01,940 --> 01:12:04,380
 Why not integrate over the surface?

1201
01:12:04,380 --> 01:12:06,900
 The answer has just been it's computationally expensive

1202
01:12:06,900 --> 01:12:09,540
 and hard to do that computational geometry.

1203
01:12:09,540 --> 01:12:13,100
 But one of the things that has made the simulation

1204
01:12:13,100 --> 01:12:15,020
 engine in Drake much more robust now

1205
01:12:15,020 --> 01:12:17,380
 is by we're doing that extra work

1206
01:12:17,380 --> 01:12:19,300
 to integrate over the surface.

1207
01:12:19,300 --> 01:12:24,180
 So a first trick, which actually we use a lot,

1208
01:12:24,180 --> 01:12:28,020
 is to just-- and you can put this in any simulator.

1209
01:12:28,020 --> 01:12:30,300
 You can certainly put it in Drake.

1210
01:12:30,300 --> 01:12:34,460
 We often actually put extra contact geometries down.

1211
01:12:34,460 --> 01:12:38,180
 So for that red brick to fall and land in the piles

1212
01:12:38,180 --> 01:12:41,140
 and be accurate in all the different cases,

1213
01:12:41,140 --> 01:12:44,980
 if you visualize the collision geometry instead

1214
01:12:44,980 --> 01:12:47,300
 of the visual geometry, you'll actually

1215
01:12:47,300 --> 01:12:50,500
 see that the red box has a little box just in set,

1216
01:12:50,500 --> 01:12:52,900
 just partly in set from the original box.

1217
01:12:52,900 --> 01:12:59,780
 And then there's zero radius spheres at all of the corners.

1218
01:12:59,780 --> 01:13:00,540
 Why?

1219
01:13:00,540 --> 01:13:03,540
 I'm telling the simulator, do your best

1220
01:13:03,540 --> 01:13:10,500
 in all these hard places to pick one point to summarize

1221
01:13:10,500 --> 01:13:13,860
 the force, but go ahead and put an extra point at the corners.

1222
01:13:13,860 --> 01:13:15,300
 Always do that.

1223
01:13:15,300 --> 01:13:18,340
 I'm saying there's an extra-- we get one contact force

1224
01:13:18,340 --> 01:13:20,660
 per collision geometry pair.

1225
01:13:20,660 --> 01:13:23,220
 So by having extra points declared at the side,

1226
01:13:23,220 --> 01:13:25,800
 I'm just saying always pick the corners

1227
01:13:25,800 --> 01:13:27,660
 and then do your best on the interior.

1228
01:13:27,660 --> 01:13:29,320
 When we're simulating with point contact,

1229
01:13:29,320 --> 01:13:31,300
 that actually works surprisingly well,

1230
01:13:31,300 --> 01:13:35,860
 even in these sort of cases like the bricks falling down

1231
01:13:35,860 --> 01:13:36,340
 like this.

1232
01:13:36,340 --> 01:13:38,680
 If you watch carefully, this is actually only simulating

1233
01:13:38,680 --> 01:13:40,420
 with point contact.

1234
01:13:40,420 --> 01:13:43,420
 And I had to convince myself.

1235
01:13:43,420 --> 01:13:48,700
 Every one of those cases is actually resisting penetration

1236
01:13:48,700 --> 01:13:54,060
 because some corner is hitting that slightly in set box,

1237
01:13:54,060 --> 01:13:55,780
 or the points on points.

1238
01:13:55,780 --> 01:13:57,460
 So it's a very good heuristic that makes

1239
01:13:57,460 --> 01:13:58,900
 these things work pretty well.

1240
01:13:58,900 --> 01:14:01,060
 Even if gripper's picking up the box in the middle,

1241
01:14:01,060 --> 01:14:02,940
 that has worked very well.

1242
01:14:02,940 --> 01:14:06,420
 So if you just want to use a point contact-based simulator

1243
01:14:06,420 --> 01:14:09,380
 better, then you can help by just making the collision

1244
01:14:09,380 --> 01:14:12,540
 geometry a little bit more friendly.

1245
01:14:12,540 --> 01:14:14,220
 But you can also do this harder thing

1246
01:14:14,220 --> 01:14:20,140
 of trying to do the surface integrals.

1247
01:14:20,140 --> 01:14:21,140
 How does that work?

1248
01:14:21,140 --> 01:14:22,780
 So this is called-- in Drake, it's

1249
01:14:22,780 --> 01:14:24,340
 called hydroelastic contact.

1250
01:14:24,340 --> 01:14:26,660
 So it turns out the rules of physics

1251
01:14:26,660 --> 01:14:30,220
 across a surface in 3D of arbitrary geometry,

1252
01:14:30,220 --> 01:14:32,220
 they're not in a textbook.

1253
01:14:32,220 --> 01:14:33,580
 We had to invent some.

1254
01:14:33,580 --> 01:14:34,380
 That sounds bad.

1255
01:14:34,380 --> 01:14:39,220
 But we took our best extension of the existing laws

1256
01:14:39,220 --> 01:14:41,660
 of physics across a surface, and we applied them

1257
01:14:41,660 --> 01:14:43,300
 in this way.

1258
01:14:43,300 --> 01:14:47,220
 But it required first a bunch of computational geometry,

1259
01:14:47,220 --> 01:14:50,620
 which you take meshes intersecting with other meshes,

1260
01:14:50,620 --> 01:14:53,660
 and you compute volumetric meshes

1261
01:14:53,660 --> 01:14:56,900
 on the fly of the intersection.

1262
01:14:56,900 --> 01:14:59,900
 And then you try to take a surface inside that mesh, which

1263
01:14:59,900 --> 01:15:02,420
 summarizes the collision boundary,

1264
01:15:02,420 --> 01:15:05,060
 and you take an integral across that surface mesh.

1265
01:15:05,060 --> 01:15:07,780
 And you apply forces in a proportion

1266
01:15:07,780 --> 01:15:09,820
 across that whole surface integral.

1267
01:15:09,820 --> 01:15:11,980
 And that has made a huge difference in the way

1268
01:15:11,980 --> 01:15:14,140
 that we do simulation.

1269
01:15:14,140 --> 01:15:15,660
 You get these beautiful simulations

1270
01:15:15,660 --> 01:15:21,180
 that if you turn on all of the hydroelastic visualization,

1271
01:15:21,180 --> 01:15:23,660
 you'll see the rich contact geometry moving around.

1272
01:15:23,660 --> 01:15:30,100
 If you take the box-on-box collision,

1273
01:15:30,100 --> 01:15:33,060
 where it was changing discontinuously before,

1274
01:15:33,060 --> 01:15:36,740
 now we get beautiful, smooth changing in contact forces.

1275
01:15:39,660 --> 01:15:41,780
 Just to show the before and after here.

1276
01:15:41,780 --> 01:15:47,420
 It's an expensive solution to the problem,

1277
01:15:47,420 --> 01:15:49,340
 but that is a robust solution to the problem.

1278
01:15:49,340 --> 01:15:58,700
 There's a lot of computational geometry work behind that.

1279
01:15:58,700 --> 01:15:59,660
 And I want to be clear.

1280
01:15:59,660 --> 01:16:03,340
 So the model that we have going on here now

1281
01:16:03,340 --> 01:16:05,820
 is actually, in most of the cases,

1282
01:16:05,820 --> 01:16:07,620
 when I say it's soft on soft, for instance,

1283
01:16:07,620 --> 01:16:10,060
 that would be the spring-like model.

1284
01:16:10,060 --> 01:16:15,180
 So we have a stiffness in these hydroelastic simulations.

1285
01:16:15,180 --> 01:16:17,620
 The object is not deforming.

1286
01:16:17,620 --> 01:16:20,620
 You can do fully deformable simulation, too.

1287
01:16:20,620 --> 01:16:23,700
 This is a nearly rigid simulation.

1288
01:16:23,700 --> 01:16:25,100
 We're allowing penetration.

1289
01:16:25,100 --> 01:16:28,700
 So the contact geometry doesn't change.

1290
01:16:28,700 --> 01:16:30,940
 But on every instant, we're allowing the penetration.

1291
01:16:30,940 --> 01:16:33,100
 And we're computing an integral over the penetration

1292
01:16:33,100 --> 01:16:35,260
 to resist the force.

1293
01:16:35,260 --> 01:16:37,260
 So this is good for soft simulation

1294
01:16:37,260 --> 01:16:38,900
 in the low deformation mode.

1295
01:16:38,900 --> 01:16:42,980
 If you can say my geometry is roughly not changing,

1296
01:16:42,980 --> 01:16:44,800
 but I want it to be squishy a little bit,

1297
01:16:44,800 --> 01:16:46,740
 this is a good model for that.

1298
01:16:46,740 --> 01:16:51,100
 Or for a nearly rigid, if I turn k up on my stiffness,

1299
01:16:51,100 --> 01:16:54,940
 I can simulate very pretty nearly rigid things with this.

1300
01:16:54,940 --> 01:16:57,620
 It's not going to simulate a plush toy.

1301
01:16:57,620 --> 01:17:00,220
 If you want to pick up a plush toy

1302
01:17:00,220 --> 01:17:02,660
 and shake it around, or a rope, or a cloth,

1303
01:17:02,660 --> 01:17:06,060
 this is not the right model for that.

1304
01:17:06,060 --> 01:17:08,660
 That's what it means when I said state space for simulation

1305
01:17:08,660 --> 01:17:11,340
 and planning is the original rigid body state.

1306
01:17:11,340 --> 01:17:15,420
 It's not adding state to track the shape of the surface.

1307
01:17:15,420 --> 01:17:18,660
 What is the [INAUDIBLE]

1308
01:17:18,660 --> 01:17:22,340
 Friction in hydroelastic, again, is-- I mean,

1309
01:17:22,340 --> 01:17:23,900
 it's applied in a similar way.

1310
01:17:23,900 --> 01:17:25,740
 Sliding friction is even more subtle.

1311
01:17:25,740 --> 01:17:30,100
 But it required taking our best approximation of Coulomb

1312
01:17:30,100 --> 01:17:33,620
 friction on that surface.

1313
01:17:33,620 --> 01:17:40,980
 So there's a lot of details, but it's almost Coulomb frictiony.

1314
01:17:40,980 --> 01:17:47,820
 So it's more expensive than point contact,

1315
01:17:47,820 --> 01:17:50,780
 but less expensive than finite element, for instance.

1316
01:17:50,780 --> 01:17:55,820
 So you get these great simulations, then.

1317
01:17:55,820 --> 01:17:58,100
 If you watch the hand pick up the mug

1318
01:17:58,100 --> 01:18:00,580
 and you turn off the hand visualization

1319
01:18:00,580 --> 01:18:04,500
 and just show the hydroelastic regions,

1320
01:18:04,500 --> 01:18:07,460
 this is what turned it into a really robust simulation.

1321
01:18:07,460 --> 01:18:08,540
 This is one of the things.

1322
01:18:08,540 --> 01:18:16,300
 The other thing is a really good contact solver.

1323
01:18:16,300 --> 01:18:18,140
 So we're not doing Euler integration.

1324
01:18:18,140 --> 01:18:20,340
 We're actually doing a much more advanced integration

1325
01:18:20,340 --> 01:18:22,180
 scheme inside Drake.

1326
01:18:22,900 --> 01:18:24,380
 [INAUDIBLE]

1327
01:18:24,380 --> 01:18:32,620
 The demo reels from the teams that are working on this

1328
01:18:32,620 --> 01:18:33,260
 are hilarious.

1329
01:18:33,260 --> 01:18:35,580
 They always just have random objects falling.

1330
01:18:35,580 --> 01:18:39,020
 And they always look beautiful and are

1331
01:18:39,020 --> 01:18:40,300
 doing more advanced things.

1332
01:18:40,300 --> 01:18:45,140
 But this week, it was green peppers falling out of the sky.

1333
01:18:45,140 --> 01:18:48,780
 And this is now a green pepper in a bowl

1334
01:18:48,780 --> 01:18:51,740
 that almost falls off a table, but not.

1335
01:18:51,740 --> 01:18:55,820
 And the contact forces are being visualized.

1336
01:18:55,820 --> 01:18:59,820
 What's really amazing is if you watch the contact surface

1337
01:18:59,820 --> 01:19:02,460
 changing even between the bowl and the table.

1338
01:19:02,460 --> 01:19:04,300
 It's the little lip of the bowl.

1339
01:19:04,300 --> 01:19:07,980
 And that's so subtle to get that right.

1340
01:19:07,980 --> 01:19:12,820
 And if you want to measure the happiness of a dynamics expert,

1341
01:19:12,820 --> 01:19:19,580
 the measure is how smooth are those contact forces moving.

1342
01:19:19,580 --> 01:19:21,300
 There's some really fun situations.

1343
01:19:21,300 --> 01:19:24,060
 I think I've got a LEGO example here somewhere.

1344
01:19:24,060 --> 01:19:25,860
 We put LEGOs on.

1345
01:19:25,860 --> 01:19:27,620
 We're mating LEGOs.

1346
01:19:27,620 --> 01:19:29,580
 And the contact forces came out like this

1347
01:19:29,580 --> 01:19:31,420
 and were just like rock solid.

1348
01:19:31,420 --> 01:19:35,140
 And I think that was ecstasy for the dynamics team.

1349
01:19:35,140 --> 01:19:37,900
 That was like, did you see what our contact force engine just

1350
01:19:37,900 --> 01:19:38,980
 did?

1351
01:19:38,980 --> 01:19:40,900
 Because normally it'd be like, ping, ping,

1352
01:19:40,900 --> 01:19:43,900
 like this, right?

1353
01:19:43,900 --> 01:19:49,420
 So a lot of simulators will use this blocks falling

1354
01:19:49,420 --> 01:19:51,940
 from the sky as kind of a demo reel

1355
01:19:51,940 --> 01:19:54,740
 of very advanced simulations.

1356
01:19:54,740 --> 01:19:56,980
 But it's a kind of a trick, right?

1357
01:19:56,980 --> 01:19:59,900
 Because you can't look at that and judge if it's

1358
01:19:59,900 --> 01:20:01,860
 physically accurate or not.

1359
01:20:01,860 --> 01:20:03,360
 In practice, if you were to zoom in,

1360
01:20:03,360 --> 01:20:04,980
 you'd see objects intersecting all the time.

1361
01:20:04,980 --> 01:20:06,360
 Because what they do when they're

1362
01:20:06,360 --> 01:20:10,340
 simulating that is they say, I've got like 10,000 contacts

1363
01:20:10,340 --> 01:20:11,740
 happening.

1364
01:20:11,740 --> 01:20:13,380
 I'm going to pick 10.

1365
01:20:13,380 --> 01:20:15,020
 I'll make those work this time step.

1366
01:20:15,020 --> 01:20:17,140
 And then the next time step, I'll pick another 10.

1367
01:20:17,140 --> 01:20:19,140
 And that 10 is a magic number, right?

1368
01:20:19,140 --> 01:20:21,600
 And in net, it kind of looks like things fall and separate,

1369
01:20:21,600 --> 01:20:22,420
 and that's all good.

1370
01:20:22,420 --> 01:20:23,700
 But it's not very accurate.

1371
01:20:23,700 --> 01:20:25,340
 And the contact forces, like you'd see,

1372
01:20:25,340 --> 01:20:26,060
 would go, beep, beep, beep, beep, beep, beep,

1373
01:20:26,060 --> 01:20:26,860
 all over the place.

1374
01:20:26,860 --> 01:20:29,060
 And they'd be missing in some places or whatever.

1375
01:20:29,060 --> 01:20:33,460
 So the real test is if you visualize the contact forces

1376
01:20:33,460 --> 01:20:35,540
 and they are just sitting rock steady,

1377
01:20:35,540 --> 01:20:38,260
 then you've got a strong numerical recipe behind it.

1378
01:20:38,260 --> 01:20:44,580
 Let me ask-- yeah?

1379
01:20:44,580 --> 01:20:48,500
 For the hydroelastic contact, why is it important

1380
01:20:48,500 --> 01:20:52,020
 that we allow penetration?

1381
01:20:52,020 --> 01:21:01,500
 So OK, there's a multi-level response.

1382
01:21:01,500 --> 01:21:03,180
 So the question was, why is it important

1383
01:21:03,180 --> 01:21:04,900
 that we allow penetration?

1384
01:21:04,900 --> 01:21:08,620
 So fundamentally, if we think about a spring model,

1385
01:21:08,620 --> 01:21:10,860
 then there's no contact force until penetration.

1386
01:21:10,860 --> 01:21:13,100
 So the first choice is to do that.

1387
01:21:13,100 --> 01:21:14,780
 The alternative to a spring model

1388
01:21:14,780 --> 01:21:17,260
 is to handle the impulsive forces

1389
01:21:17,260 --> 01:21:19,960
 and try to obey those constraints exactly.

1390
01:21:19,960 --> 01:21:24,500
 There is a mode you can try to put one soft thing

1391
01:21:24,500 --> 01:21:27,120
 with another hard object in hydroelastic that

1392
01:21:27,120 --> 01:21:28,660
 does some of this work.

1393
01:21:28,660 --> 01:21:31,820
 But right now, in the simplest version of the model,

1394
01:21:31,820 --> 01:21:33,940
 forces are only defined once you're in penetration.

1395
01:21:33,940 --> 01:21:38,900
 That's when you have a surface to work with.

1396
01:21:38,900 --> 01:21:39,400
 Yes?

1397
01:21:39,400 --> 01:21:41,520
 When you say slower, more expensive

1398
01:21:41,520 --> 01:21:46,240
 than the point contact, like for the mug with the hand,

1399
01:21:46,240 --> 01:21:48,520
 how long would that take?

1400
01:21:48,520 --> 01:21:50,120
 Yeah, yeah.

1401
01:21:50,120 --> 01:21:54,120
 We always aim for real-time simulation.

1402
01:21:54,120 --> 01:21:54,620
 What's that?

1403
01:21:54,620 --> 01:21:56,400
 Still real-time.

1404
01:21:56,400 --> 01:21:58,440
 It depends on which simulation, and it

1405
01:21:58,440 --> 01:22:01,800
 depends on the number of the mesh tessellation of the--

1406
01:22:01,800 --> 01:22:04,760
 so you have to take your surface mesh and make it a tet mesh.

1407
01:22:04,760 --> 01:22:07,320
 And the number of finite elements in your tet mesh

1408
01:22:07,320 --> 01:22:09,440
 would be the computational cost.

1409
01:22:09,440 --> 01:22:13,200
 So the reason it is not on by default in Drake

1410
01:22:13,200 --> 01:22:14,960
 is because it's slower.

1411
01:22:14,960 --> 01:22:16,600
 But it's actionable.

1412
01:22:16,600 --> 01:22:18,760
 We use it-- we choose to turn it on often

1413
01:22:18,760 --> 01:22:21,960
 in our manipulation workflows.

1414
01:22:21,960 --> 01:22:23,000
 Yeah.

1415
01:22:23,000 --> 01:22:23,500
 Yes?

1416
01:22:23,500 --> 01:22:26,440
 So do you think FEM is the harder way to do it?

1417
01:22:26,440 --> 01:22:29,200
 I feel like it's also costlier.

1418
01:22:29,200 --> 01:22:30,080
 Right.

1419
01:22:30,080 --> 01:22:35,120
 So the question is, so what about finite element models, FEM?

1420
01:22:35,120 --> 01:22:39,600
 So let's just mention deformable simulation for a second here.

1421
01:22:39,600 --> 01:22:54,000
 So if I wanted to simulate a plush toy or something

1422
01:22:54,000 --> 01:22:57,480
 like this, then I might use a finite element model.

1423
01:22:57,480 --> 01:23:00,360
 [TYPING]

1424
01:23:00,360 --> 01:23:10,560
 Which is F-E-M. OK.

1425
01:23:10,560 --> 01:23:16,680
 Which roughly says I'm going to model my Stanford bunny,

1426
01:23:16,680 --> 01:23:21,400
 plush Stanford bunny, with a bunch of springs and spring

1427
01:23:21,400 --> 01:23:24,280
 masses across the surface of the object

1428
01:23:24,280 --> 01:23:26,760
 and allow them to compress and shrink and possibly change

1429
01:23:26,760 --> 01:23:29,920
 their relative location because the thing's deformable.

1430
01:23:29,920 --> 01:23:33,840
 FEM is just a computationally optimized version

1431
01:23:33,840 --> 01:23:35,960
 of that to some extent.

1432
01:23:35,960 --> 01:23:40,040
 So the question was, can we make finite element real time?

1433
01:23:40,040 --> 01:23:43,240
 I think people definitely have and can.

1434
01:23:43,240 --> 01:23:47,200
 GPU is a big accelerator for FEM type models,

1435
01:23:47,200 --> 01:23:52,400
 where contact is actually not super--

1436
01:23:52,400 --> 01:23:55,000
 is not optimized well by GPU because it's

1437
01:23:55,000 --> 01:23:59,440
 very branchy in the sense of you take a different path

1438
01:23:59,440 --> 01:24:02,080
 through the code, whether you're making contact between object

1439
01:24:02,080 --> 01:24:04,240
 one and object three or not.

1440
01:24:04,240 --> 01:24:06,400
 And that branches so much that the GPU

1441
01:24:06,400 --> 01:24:08,080
 isn't a huge accelerator.

1442
01:24:08,080 --> 01:24:10,320
 But for a finite element where you have a whole mesh

1443
01:24:10,320 --> 01:24:12,560
 and you know things are going to be--

1444
01:24:12,560 --> 01:24:14,640
 there's no branching on that particular mesh,

1445
01:24:14,640 --> 01:24:16,100
 then you put it on a finite element

1446
01:24:16,100 --> 01:24:19,800
 and people have very performant simulations.

1447
01:24:19,800 --> 01:24:22,080
 So there's an NVIDIA simulation of a fingertip

1448
01:24:22,080 --> 01:24:25,880
 with a soft finger that's running at real time rates.

1449
01:24:25,880 --> 01:24:26,380
 Yes?

1450
01:24:26,380 --> 01:24:26,880
 [INAUDIBLE]

1451
01:24:26,880 --> 01:24:35,320
 So OK, then there's a question of how

1452
01:24:35,320 --> 01:24:39,480
 does the finite element get connected with contact forces.

1453
01:24:39,480 --> 01:24:41,600
 And I think you can use all the same--

1454
01:24:41,600 --> 01:24:43,000
 if you treat each of your methods

1455
01:24:43,000 --> 01:24:47,760
 as-- each of your elements as either rigid or soft,

1456
01:24:47,760 --> 01:24:50,160
 allowing penetration or not, I think all of those things

1457
01:24:50,160 --> 01:24:53,360
 can be handled, the same connections.

1458
01:24:53,360 --> 01:24:56,400
 Now, Drake has FEM also.

1459
01:24:56,400 --> 01:24:58,880
 It's not on by default either.

1460
01:24:58,880 --> 01:25:01,480
 But we do have a finite element method

1461
01:25:01,480 --> 01:25:04,560
 that's not GPU accelerated yet because it's

1462
01:25:04,560 --> 01:25:06,520
 very hard to release open source code that

1463
01:25:06,520 --> 01:25:08,440
 will work on everybody's GPU.

1464
01:25:08,440 --> 01:25:11,760
 But that's coming.

1465
01:25:11,760 --> 01:25:13,360
 And there's one other one I'll mention.

1466
01:25:13,360 --> 01:25:14,320
 But there's a question.

1467
01:25:14,320 --> 01:25:14,820
 [INAUDIBLE]

1468
01:25:14,820 --> 01:25:18,780
 So you allow penetration.

1469
01:25:18,780 --> 01:25:21,740
 You have to write normalized forces.

1470
01:25:21,740 --> 01:25:25,220
 But what happens if you have deformation on the block?

1471
01:25:25,220 --> 01:25:28,680
 But then you don't have a guarantee of normalized forces,

1472
01:25:28,680 --> 01:25:31,620
 which basically comes through by having penetration,

1473
01:25:31,620 --> 01:25:34,020
 or deformation, not penetration.

1474
01:25:34,020 --> 01:25:34,520
 Yes.

1475
01:25:34,520 --> 01:25:35,020
 [INAUDIBLE]

1476
01:25:35,020 --> 01:25:38,260
 So this is a great question.

1477
01:25:38,260 --> 01:25:45,020
 So the recipe of trying to summarize a whole body when

1478
01:25:45,020 --> 01:25:48,020
 you're in penetration with a single force

1479
01:25:48,020 --> 01:25:50,660
 is difficult with a spring force.

1480
01:25:50,660 --> 01:25:53,500
 But if I'm willing to take forces everywhere,

1481
01:25:53,500 --> 01:25:56,620
 then the question is resolved again.

1482
01:25:56,620 --> 01:25:59,620
 So I'm actually-- it's not just a single normal force that's

1483
01:25:59,620 --> 01:26:00,200
 being applied.

1484
01:26:00,200 --> 01:26:01,860
 You could summarize the total forces

1485
01:26:01,860 --> 01:26:04,340
 by putting a point somewhere.

1486
01:26:04,340 --> 01:26:05,860
 They're mathematically equivalent.

1487
01:26:05,860 --> 01:26:07,300
 But the way it's being computed is

1488
01:26:07,300 --> 01:26:10,380
 taking integral over the surface of contact.

1489
01:26:10,380 --> 01:26:11,940
 And so that ambiguity disappears.

1490
01:26:11,940 --> 01:26:23,980
 The other-- so finite elements are good for many--

1491
01:26:23,980 --> 01:26:26,260
 I've never actually seen anybody shake a Stanford bunny.

1492
01:26:26,260 --> 01:26:29,580
 But I'm sure there's a paper out there that does that.

1493
01:26:29,580 --> 01:26:33,060
 But let's say I wanted a plush toy or something large

1494
01:26:33,060 --> 01:26:34,180
 and soft.

1495
01:26:34,180 --> 01:26:37,420
 When you get to cloth simulation,

1496
01:26:37,420 --> 01:26:39,500
 that's an extra level of complexity

1497
01:26:39,500 --> 01:26:42,940
 because you have to worry a lot about thin objects.

1498
01:26:42,940 --> 01:26:45,220
 You can have piercing phenomenon.

1499
01:26:45,220 --> 01:26:47,980
 So a small-- if you take slightly too big of a time

1500
01:26:47,980 --> 01:26:50,180
 step, you're on the other side of-- part of your object

1501
01:26:50,180 --> 01:26:51,660
 is on the other side of the object.

1502
01:26:51,660 --> 01:26:53,020
 And then so you just have to deal

1503
01:26:53,020 --> 01:26:55,460
 with these breakthrough events.

1504
01:26:55,460 --> 01:26:57,860
 But you can do that, again, with a finite element method,

1505
01:26:57,860 --> 01:27:00,460
 for instance, and extra work.

1506
01:27:00,460 --> 01:27:02,700
 But we-- I would say I don't claim

1507
01:27:02,700 --> 01:27:04,340
 that Drake can support cloth yet.

1508
01:27:04,340 --> 01:27:07,300
 That'll be a future work.

1509
01:27:07,300 --> 01:27:10,460
 The other one that a lot of people are interested in

1510
01:27:10,460 --> 01:27:20,380
 and have been working with is MPM, material point methods,

1511
01:27:20,380 --> 01:27:21,860
 particle type simulations.

1512
01:27:21,860 --> 01:27:31,220
 So if you've seen NVIDIA Flex, for instance,

1513
01:27:31,220 --> 01:27:35,260
 or if you've seen these particle simulations where you have

1514
01:27:35,260 --> 01:27:37,760
 something that could be a fluid, it could turn into a rigid,

1515
01:27:37,760 --> 01:27:40,060
 it can be something in between, this

1516
01:27:40,060 --> 01:27:42,180
 is doing not quite the atom level,

1517
01:27:42,180 --> 01:27:46,460
 but a big molecule kind of level simulation of these objects.

1518
01:27:46,460 --> 01:27:50,620
 And on the GPU, it can be made surprisingly performant.

1519
01:27:50,620 --> 01:27:54,060
 You tend to give up a lot in terms of--

1520
01:27:54,060 --> 01:27:57,500
 if you tried to simulate a rigid thing with an MPM model,

1521
01:27:57,500 --> 01:28:00,700
 you would find big gaps in the modeling.

1522
01:28:00,700 --> 01:28:04,340
 But for fluids and other things, again,

1523
01:28:04,340 --> 01:28:06,140
 if you were to compare it to Navier-Stokes,

1524
01:28:06,140 --> 01:28:08,100
 you'd probably find big gaps.

1525
01:28:08,100 --> 01:28:11,420
 But in terms of if I just want to see a robot crack an egg

1526
01:28:11,420 --> 01:28:14,660
 and see what that looks like, then I

1527
01:28:14,660 --> 01:28:16,780
 think it's the way that people have been trending.

1528
01:28:16,780 --> 01:28:17,280
 Yes?

1529
01:28:17,280 --> 01:28:22,540
 I have some questions about [INAUDIBLE]

1530
01:28:22,540 --> 01:28:23,040
 Yes.

1531
01:28:23,040 --> 01:28:26,500
 So it's like you can-- so from the method we just learned,

1532
01:28:26,500 --> 01:28:29,420
 you can capture the thought between two objects.

1533
01:28:29,420 --> 01:28:29,920
 Good.

1534
01:28:29,920 --> 01:28:32,900
 So when one object is in contact with multiple objects,

1535
01:28:32,900 --> 01:28:34,860
 it's going to be like other objects are also

1536
01:28:34,860 --> 01:28:37,180
 in contact with other objects.

1537
01:28:37,180 --> 01:28:37,680
 Yes.

1538
01:28:37,680 --> 01:28:41,780
 Do we just solve a huge equation to get the net effect?

1539
01:28:41,780 --> 01:28:46,900
 Or is it like, it was everyone, but the others are static?

1540
01:28:46,900 --> 01:28:48,340
 It's a beautiful question.

1541
01:28:48,340 --> 01:28:52,900
 So yeah, the question-- that's why I gave these optimization

1542
01:28:52,900 --> 01:28:54,220
 principles.

1543
01:28:54,220 --> 01:28:56,900
 They give trivial answers in the--

1544
01:28:56,900 --> 01:28:59,300
 so let me repeat the question, sorry.

1545
01:28:59,300 --> 01:29:01,620
 I've only said anything about two objects colliding.

1546
01:29:01,620 --> 01:29:05,260
 But I can have cases where I've got a bunch of objects

1547
01:29:05,260 --> 01:29:07,380
 colliding, like in the blocks falling, for instance.

1548
01:29:07,380 --> 01:29:10,220
 So then how do these forces get resolved in that?

1549
01:29:10,220 --> 01:29:14,940
 So in the penetration with springs, it's clear.

1550
01:29:14,940 --> 01:29:18,180
 The interesting part is when I'm doing rigid contact, let's say,

1551
01:29:18,180 --> 01:29:20,220
 and I'm trying to avoid penetration

1552
01:29:20,220 --> 01:29:24,980
 in a multi-object setting, then you actually

1553
01:29:24,980 --> 01:29:27,380
 resolve these forces of smallest force that

1554
01:29:27,380 --> 01:29:30,820
 resists sliding and maximum dissipation

1555
01:29:30,820 --> 01:29:34,060
 in the multi-body equations, with all of them

1556
01:29:34,060 --> 01:29:35,220
 adding constraints.

1557
01:29:35,220 --> 01:29:38,140
 And you solve an optimization problem in every time step

1558
01:29:38,140 --> 01:29:40,140
 to resolve the forces.

1559
01:29:40,140 --> 01:29:43,260
 These are the time-stepping simulators.

1560
01:29:43,260 --> 01:29:46,520
 If you've heard of linear complementarity problems, LCP,

1561
01:29:46,520 --> 01:29:48,420
 that is a way to solve this problem.

1562
01:29:48,420 --> 01:29:51,700
 It's falling out of favor, because it's

1563
01:29:51,700 --> 01:29:53,420
 a bad numerical problem.

1564
01:29:53,420 --> 01:29:57,260
 But it's-- yes, we solve an optimization problem

1565
01:29:57,260 --> 01:29:59,460
 in every time step in order to figure out the forces

1566
01:29:59,460 --> 01:30:01,820
 in the general case.

1567
01:30:01,820 --> 01:30:02,500
 Great question.

1568
01:30:02,500 --> 01:30:12,740
 OK, so your wizardry level of using-- even just being

1569
01:30:12,740 --> 01:30:15,540
 a user of context simulation, I hope, got up a little bit.

1570
01:30:15,540 --> 01:30:19,540
 You saw a little bit of what's going on behind the scenes.

1571
01:30:19,540 --> 01:30:22,700
 But if you take away one thing, if you

1572
01:30:22,700 --> 01:30:25,700
 see your feet shaking, or objects, whatever,

1573
01:30:25,700 --> 01:30:28,300
 the first thing you do is you turn down the time step

1574
01:30:28,300 --> 01:30:29,980
 and make sure that phenomenon goes away.

1575
01:30:29,980 --> 01:30:32,580
 You should always be able to take that phenomenon away

1576
01:30:32,580 --> 01:30:34,540
 by making the time step small enough.

1577
01:30:34,540 --> 01:30:37,780
 It just might be painfully slow to simulate.

1578
01:30:37,780 --> 01:30:41,380
 But then what you do is you find the source of stiffness

1579
01:30:41,380 --> 01:30:45,020
 in your equations, figure out why the gripper was tuned

1580
01:30:45,020 --> 01:30:46,100
 with too high of a gain.

1581
01:30:46,100 --> 01:30:47,260
 It might be your controller.

1582
01:30:47,260 --> 01:30:50,180
 Oftentimes, a controller will add stiffness,

1583
01:30:50,180 --> 01:30:52,940
 or it might be some contact parameter.

1584
01:30:52,940 --> 01:30:56,300
 Resolve that stiffness, and then crank your simulation back up

1585
01:30:56,300 --> 01:30:59,100
 to get fast simulation.

1586
01:30:59,100 --> 01:31:02,420
 And what makes a fast simulator is really

1587
01:31:02,420 --> 01:31:05,420
 how big can you make h.

1588
01:31:05,420 --> 01:31:07,080
 There's a little bit about how much

1589
01:31:07,080 --> 01:31:09,580
 you've optimized your multi-body code, a little bit.

1590
01:31:09,580 --> 01:31:12,660
 But the dominant factor is how big of a time step

1591
01:31:12,660 --> 01:31:14,020
 can you take.

1592
01:31:14,020 --> 01:31:17,740
 And that's a property of your integrator

1593
01:31:17,740 --> 01:31:20,340
 and your equations of motion.

1594
01:31:20,340 --> 01:31:20,840
 Good?

1595
01:31:20,840 --> 01:31:21,960
 OK, I'll see you Thursday.

1596
01:31:21,960 --> 01:31:31,960
 [BLANK_AUDIO]

