1
00:00:00,000 --> 00:00:10,000
 [BLANK_AUDIO]

2
00:00:10,000 --> 00:00:20,000
 [BLANK_AUDIO]

3
00:00:20,000 --> 00:00:30,000
 [BLANK_AUDIO]

4
00:00:30,000 --> 00:00:40,000
 [BLANK_AUDIO]

5
00:00:40,000 --> 00:00:50,000
 [BLANK_AUDIO]

6
00:00:50,000 --> 00:01:00,000
 [BLANK_AUDIO]

7
00:01:00,000 --> 00:01:10,000
 [BLANK_AUDIO]

8
00:01:10,000 --> 00:01:20,000
 [BLANK_AUDIO]

9
00:01:20,000 --> 00:01:30,000
 [BLANK_AUDIO]

10
00:01:30,000 --> 00:01:40,000
 [BLANK_AUDIO]

11
00:01:40,000 --> 00:01:50,000
 [BLANK_AUDIO]

12
00:01:50,000 --> 00:02:00,000
 [BLANK_AUDIO]

13
00:02:00,000 --> 00:02:10,000
 [BLANK_AUDIO]

14
00:02:10,000 --> 00:02:20,000
 [BLANK_AUDIO]

15
00:02:20,000 --> 00:02:30,000
 [BLANK_AUDIO]

16
00:02:30,000 --> 00:02:40,000
 [BLANK_AUDIO]

17
00:02:40,000 --> 00:02:50,000
 [BLANK_AUDIO]

18
00:02:50,000 --> 00:03:00,000
 [BLANK_AUDIO]

19
00:03:00,000 --> 00:03:10,000
 [BLANK_AUDIO]

20
00:03:10,000 --> 00:03:20,000
 [BLANK_AUDIO]

21
00:03:20,000 --> 00:03:30,000
 [BLANK_AUDIO]

22
00:03:30,000 --> 00:03:40,000
 [BLANK_AUDIO]

23
00:03:40,000 --> 00:03:50,000
 [BLANK_AUDIO]

24
00:03:50,000 --> 00:04:00,000
 [BLANK_AUDIO]

25
00:04:00,000 --> 00:04:10,000
 [BLANK_AUDIO]

26
00:04:10,000 --> 00:04:20,000
 [BLANK_AUDIO]

27
00:04:20,000 --> 00:04:30,000
 [BLANK_AUDIO]

28
00:04:30,000 --> 00:04:40,000
 [BLANK_AUDIO]

29
00:04:40,000 --> 00:04:50,000
 [BLANK_AUDIO]

30
00:04:50,000 --> 00:04:53,000
 Okay, welcome back everybody.

31
00:04:53,000 --> 00:05:00,000
 I think we've determined, by the way, there is a shade up there.

32
00:05:00,000 --> 00:05:03,000
 But you can see the canvas being crinkled in the corner.

33
00:05:03,000 --> 00:05:08,000
 But the buttons that allow you to move it are inoperable.

34
00:05:08,000 --> 00:05:14,000
 So they've hopefully adjusted the camera settings and it'll be less washed out.

35
00:05:14,000 --> 00:05:19,000
 But we'll keep fighting the fight.

36
00:05:19,000 --> 00:05:24,000
 All right, last time we did a sort of quick tour of robot hardware to sort of

37
00:05:24,000 --> 00:05:26,000
 as background for the class.

38
00:05:26,000 --> 00:05:30,000
 And today we're gonna start into some of the real core material.

39
00:05:30,000 --> 00:05:34,000
 Where this time we really do want you to understand every equation and

40
00:05:34,000 --> 00:05:39,000
 build up a solid foundation that we're gonna use for the rest of the course.

41
00:05:39,000 --> 00:05:43,000
 Okay, so make sure you slow me down, speed me up whenever if there's any

42
00:05:43,000 --> 00:05:44,000
 questions today.

43
00:05:44,000 --> 00:05:50,000
 But I don't wanna just drop in and start teaching you the approach until I

44
00:05:50,000 --> 00:05:53,000
 motivate it with an example.

45
00:05:53,000 --> 00:05:57,000
 So I told you the whole course is gonna sort of unroll with making a robot do

46
00:05:57,000 --> 00:05:59,000
 something very simple.

47
00:05:59,000 --> 00:06:02,000
 And then making the task harder and harder and

48
00:06:02,000 --> 00:06:05,000
 trying to build up our capabilities.

49
00:06:05,000 --> 00:06:10,000
 So for today, we're gonna do just a basic pick and place.

50
00:06:10,000 --> 00:06:12,000
 This is what we're gonna achieve here.

51
00:06:12,000 --> 00:06:16,000
 We've got a red brick in a bin.

52
00:06:16,000 --> 00:06:22,000
 And we are collectively going to figure out how to program the robot to go pick

53
00:06:22,000 --> 00:06:27,000
 up that brick and move it over to the other bin, okay?

54
00:06:27,000 --> 00:06:31,000
 We're gonna do one major cheat, which is the reason why I didn't bring the robot

55
00:06:31,000 --> 00:06:37,000
 in here to do it today, in addition to the logistical hurdle that that was.

56
00:06:37,000 --> 00:06:42,000
 But we're gonna assume that perception is given for today.

57
00:06:42,000 --> 00:06:46,000
 We're gonna assume that someone has told you exactly the location of the red brick

58
00:06:46,000 --> 00:06:47,000
 in the world.

59
00:06:47,000 --> 00:06:50,000
 And we're not gonna rely on the process of getting that information from the

60
00:06:50,000 --> 00:06:52,000
 cameras, okay?

61
00:06:52,000 --> 00:06:55,000
 But given that assumption of someone telling you it's exactly the ground

62
00:06:55,000 --> 00:06:58,000
 truth initial position of the red brick and the target position and

63
00:06:58,000 --> 00:07:02,000
 orientation of the red brick, we're gonna be able to try to figure out all of the

64
00:07:02,000 --> 00:07:05,000
 work we have to do to make the robot do that.

65
00:07:05,000 --> 00:07:11,000
 Okay, and the sketch for how we're gonna do that is like this, okay?

66
00:07:11,000 --> 00:07:16,000
 First, we're gonna go through a bit of kinematics and spatial algebra.

67
00:07:16,000 --> 00:07:21,000
 I think, so the polls, by the way, the survey in the first piece, I love seeing

68
00:07:21,000 --> 00:07:23,000
 the results of those.

69
00:07:23,000 --> 00:07:24,000
 I read them carefully.

70
00:07:24,000 --> 00:07:26,000
 I adjust what I'm doing here because of it.

71
00:07:26,000 --> 00:07:31,000
 So it was very helpful for me to see that 27.4, I think, of you said you know

72
00:07:31,000 --> 00:07:34,000
 kinematics, right?

73
00:07:34,000 --> 00:07:36,000
 That helps me dial it in, right?

74
00:07:36,000 --> 00:07:40,000
 But even those of you that know kinematics, you might still benefit from

75
00:07:40,000 --> 00:07:43,000
 going through it the way we're gonna go through it.

76
00:07:43,000 --> 00:07:46,000
 I'm gonna emphasize things a little bit differently than a standard robot

77
00:07:46,000 --> 00:07:49,000
 kinematics sort of treatment.

78
00:07:49,000 --> 00:07:55,000
 Really emphasizing the algebra and not the trigonometry, okay?

79
00:07:55,000 --> 00:08:02,000
 After we understand basic sort of kinematics, we're gonna start by sort of

80
00:08:02,000 --> 00:08:06,000
 pretending the robot isn't there and just thinking about where we want the hand

81
00:08:06,000 --> 00:08:07,000
 to move over time, okay?

82
00:08:07,000 --> 00:08:12,000
 So we're gonna come up with a sketch for the end effector of the robot,

83
00:08:12,000 --> 00:08:13,000
 the gripper, okay?

84
00:08:13,000 --> 00:08:19,000
 And we're gonna just even imagine that the block gets picked up when we get

85
00:08:19,000 --> 00:08:20,000
 there, okay?

86
00:08:20,000 --> 00:08:23,000
 But we're just gonna sort of hallucinate what we want the hand to do.

87
00:08:23,000 --> 00:08:27,000
 And that's gonna be a fairly easy thing to program once we have the language of

88
00:08:27,000 --> 00:08:32,000
 kinematics and transforms and spatial algebra, okay, and trajectories.

89
00:08:32,000 --> 00:08:38,000
 And then we're gonna do the work to then convert the target end effector

90
00:08:38,000 --> 00:08:43,000
 locations, trajectory, okay, into joint angles for the robot.

91
00:08:43,000 --> 00:08:46,000
 And that's the kinematics problem.

92
00:08:46,000 --> 00:08:50,000
 And we do that by thinking about a coordinate frame attached to the gripper.

93
00:08:50,000 --> 00:08:52,000
 I'm gonna say all these things again carefully.

94
00:08:52,000 --> 00:08:56,000
 This is just the sketch for the lecture.

95
00:08:56,000 --> 00:09:00,000
 Okay, so we're gonna figure out how to move that end effector by backing out and

96
00:09:00,000 --> 00:09:04,000
 figuring out what all the joint angles have to be on the robot so that we can

97
00:09:04,000 --> 00:09:12,000
 turn that into the IWA position command going into our low-level controller.

98
00:09:12,000 --> 00:09:19,000
 Okay, so let me start by talking about kinematics, right, and spatial algebra is

99
00:09:19,000 --> 00:09:25,000
 the way I wanna talk about that.

100
00:09:25,000 --> 00:09:35,000
 So kinematics is the language, the set of tools for reasoning about the geometries.

101
00:09:35,000 --> 00:09:44,000
 So geometric properties of the algebra of the system, okay?

102
00:09:44,000 --> 00:09:46,000
 It's about geometry.

103
00:09:46,000 --> 00:09:50,000
 The concepts of geometry, I'm sure, are familiar to you, right?

104
00:09:50,000 --> 00:09:53,000
 Trigonometry is sort of familiar to you.

105
00:09:53,000 --> 00:10:01,000
 But even some of the smartest, most advanced roboticists I know often screw up

106
00:10:01,000 --> 00:10:02,000
 their spatial algebra.

107
00:10:02,000 --> 00:10:03,000
 I have done it for years.

108
00:10:03,000 --> 00:10:06,000
 I will do it again, right?

109
00:10:06,000 --> 00:10:12,000
 So the underlying geometry is very familiar.

110
00:10:12,000 --> 00:10:16,000
 But I would say that getting this right is very subtle.

111
00:10:16,000 --> 00:10:20,000
 It looks so easy, but if you don't get it right, you will inevitably mess it up

112
00:10:20,000 --> 00:10:22,000
 down the line, okay?

113
00:10:22,000 --> 00:10:23,000
 This is how it goes, right?

114
00:10:23,000 --> 00:10:27,000
 So typically you'll see someone, you know, a roboticist working on a problem,

115
00:10:27,000 --> 00:10:28,000
 it's not quite working out.

116
00:10:28,000 --> 00:10:31,000
 They've typically got their right hand in the air, right?

117
00:10:31,000 --> 00:10:34,000
 Their head is not upright most of the time.

118
00:10:34,000 --> 00:10:35,000
 They're doing something like this.

119
00:10:35,000 --> 00:10:39,000
 And then at some point they get frustrated and they phone their dynamics friend,

120
00:10:39,000 --> 00:10:40,000
 right?

121
00:10:40,000 --> 00:10:45,000
 And in particular, there's a dynamics team that works on Drake and they're just

122
00:10:45,000 --> 00:10:46,000
 fantastically good.

123
00:10:46,000 --> 00:10:50,000
 And you can phone your friend and ask, like, okay, I've got this series of

124
00:10:50,000 --> 00:10:53,000
 operations I'm trying to get right and it's wrong, what do I do?

125
00:10:53,000 --> 00:10:57,000
 And they always have, like, a really fast, correct answer, right?

126
00:10:57,000 --> 00:11:02,000
 And so what puts these people in their sort of elite group of people that can

127
00:11:02,000 --> 00:11:07,000
 answer dynamics queries correctly, right, almost all the time?

128
00:11:07,000 --> 00:11:12,000
 You know, they're very smart, that's for sure, but that's not the reason, right?

129
00:11:12,000 --> 00:11:15,000
 They just took time to make good notation.

130
00:11:15,000 --> 00:11:16,000
 That's it.

131
00:11:16,000 --> 00:11:21,000
 If you have the right notation, you can, you know, you can make the notation

132
00:11:21,000 --> 00:11:23,000
 make your math work out right, right?

133
00:11:23,000 --> 00:11:28,000
 So it just takes a little bit of work up front to agree on a notation that makes

134
00:11:28,000 --> 00:11:33,000
 it so you can't write things down incorrectly on paper or in code, right?

135
00:11:33,000 --> 00:11:36,000
 So I'm going to be a little fierce here today about telling you some of our

136
00:11:36,000 --> 00:11:40,000
 notation because it's going to save you bugs, you know, down the line if you

137
00:11:40,000 --> 00:11:41,000
 listen.

138
00:11:41,000 --> 00:11:43,000
 Okay.

139
00:11:43,000 --> 00:11:47,000
 So we're going to think about, talk about a bit about, you know, emphasis on

140
00:11:47,000 --> 00:11:50,000
 notation.

141
00:11:50,000 --> 00:11:53,000
 It matters.

142
00:11:53,000 --> 00:11:56,000
 All right, let's begin.

143
00:11:56,000 --> 00:12:00,000
 So we're going to talk, you know, the notion of geometry of kinematics, it

144
00:12:00,000 --> 00:12:02,000
 always starts with just a point, okay?

145
00:12:02,000 --> 00:12:08,000
 So let's define, start thinking about a point in space.

146
00:12:08,000 --> 00:12:12,000
 We'll call our point A, okay?

147
00:12:12,000 --> 00:12:20,000
 We want to talk about the position of this point in space.

148
00:12:20,000 --> 00:12:31,000
 We're going to talk about, and we're going to call that the position P of A,

149
00:12:31,000 --> 00:12:33,000
 okay?

150
00:12:33,000 --> 00:12:39,000
 So P for position, not point, and A is the name of the point.

151
00:12:39,000 --> 00:12:43,000
 We're going to name our points, okay?

152
00:12:43,000 --> 00:12:44,000
 Now, we have to be a little careful.

153
00:12:44,000 --> 00:12:50,000
 If you talk about a position in a 3D space, positions are sort of not

154
00:12:50,000 --> 00:12:51,000
 absolute.

155
00:12:51,000 --> 00:12:54,000
 They're always relative to something, even if it's the world origin, right?

156
00:12:54,000 --> 00:12:55,000
 Okay?

157
00:12:55,000 --> 00:13:09,000
 So we want to say it's relative to some other point, for instance.

158
00:13:09,000 --> 00:13:15,000
 So we're going to write that as the position of A relative to B.

159
00:13:15,000 --> 00:13:21,000
 And I'm going to use this weird superscript before the P, okay?

160
00:13:21,000 --> 00:13:22,000
 Everybody hates that.

161
00:13:22,000 --> 00:13:31,000
 I hated it when we first saw it, but it's the way that you get things to work, okay?

162
00:13:31,000 --> 00:13:33,000
 But even that is still not quite enough, right?

163
00:13:33,000 --> 00:13:41,000
 So if I'm saying that I've got a point B and a point A, then I've got a position,

164
00:13:41,000 --> 00:13:45,000
 you know, of A relative to B, that's describing the vector between them.

165
00:13:45,000 --> 00:13:49,000
 But if I want to write that vector down in three numbers, I have to embed it in

166
00:13:49,000 --> 00:13:50,000
 some coordinate system.

167
00:13:50,000 --> 00:13:54,000
 How do I decide which the first number is going to be my X coordinate,

168
00:13:54,000 --> 00:13:58,000
 let's say, my Y coordinate, my Z coordinate, if it's going to be in 3D space,

169
00:13:58,000 --> 00:14:13,000
 but I still need to define some coordinate system.

170
00:14:13,000 --> 00:14:17,000
 So we're going to define coordinate systems with the notion of a frame.

171
00:14:17,000 --> 00:14:22,000
 That's the right hand that people hold up in the air and look at it from different angles, okay?

172
00:14:22,000 --> 00:14:30,000
 We're going to talk about a coordinate frame or just a frame F, okay?

173
00:14:30,000 --> 00:14:37,000
 Now, this is where I got my multicolored chalk to help.

174
00:14:37,000 --> 00:14:43,000
 A coordinate frame could have its own--it has its own origin,

175
00:14:43,000 --> 00:14:53,000
 and then it has an X direction, a Y direction,

176
00:14:53,000 --> 00:15:05,000
 let's get this, X, Y, Z, okay?

177
00:15:05,000 --> 00:15:08,000
 Now, that color matters.

178
00:15:08,000 --> 00:15:11,000
 You should remember it always, and what I was just doing with the mnemonic,

179
00:15:11,000 --> 00:15:13,000
 I was just doing in my head to make sure I got it right,

180
00:15:13,000 --> 00:15:18,000
 is that X, Y, Z goes to RGB,

181
00:15:18,000 --> 00:15:21,000
 and every time you see in pretty much any software,

182
00:15:21,000 --> 00:15:24,000
 it could be computer graphics software or whatever,

183
00:15:24,000 --> 00:15:27,000
 you're going to see these little triads, they're called,

184
00:15:27,000 --> 00:15:31,000
 these little coordinate frames, just like the ones you see, okay?

185
00:15:31,000 --> 00:15:34,000
 And you know which one is X, which one is Y, which one is Z,

186
00:15:34,000 --> 00:15:36,000
 just by the color code.

187
00:15:36,000 --> 00:15:38,000
 And everybody should use the same color codes.

188
00:15:38,000 --> 00:15:40,000
 Every once in a while you see someone use something different,

189
00:15:40,000 --> 00:15:42,000
 and that's just weird.

190
00:15:42,000 --> 00:15:46,000
 But, yeah, so X, Y, Z, RGB, okay?

191
00:15:46,000 --> 00:15:48,000
 Those are your three axes.

192
00:15:48,000 --> 00:15:54,000
 And our full notation then, for just--we've just done a point so far in a frame,

193
00:15:54,000 --> 00:16:03,000
 we're going to say the position of point A relative to B in coordinate frame F, okay?

194
00:16:03,000 --> 00:16:05,000
 That's the worst it's going to get,

195
00:16:05,000 --> 00:16:09,000
 but it's going to go the distance for us, okay?

196
00:16:09,000 --> 00:16:13,000
 So this is our target.

197
00:16:13,000 --> 00:16:18,000
 This is our relative to.

198
00:16:18,000 --> 00:16:27,000
 And this is our expressed in frame.

199
00:16:27,000 --> 00:16:32,000
 Okay, that's a subscript.

200
00:16:32,000 --> 00:16:36,000
 Now, writing that all the time is good.

201
00:16:36,000 --> 00:16:38,000
 It's explicit.

202
00:16:38,000 --> 00:16:43,000
 A lot of times these things are, you know, there's some common choices for these,

203
00:16:43,000 --> 00:16:45,000
 so we do definitely have shorthand for it.

204
00:16:45,000 --> 00:16:50,000
 So if I were to write P A of F, for instance,

205
00:16:50,000 --> 00:17:00,000
 that is just shorthand for when this and this are the same.

206
00:17:00,000 --> 00:17:07,000
 There's a really important frame, which is the world frame,

207
00:17:07,000 --> 00:17:13,000
 my world origin, which we'll call W.

208
00:17:13,000 --> 00:17:16,000
 And if I write just P of A up there,

209
00:17:16,000 --> 00:17:25,000
 I'm going to assume that what you mean is A in the world frame relative to the world origin.

210
00:17:25,000 --> 00:17:32,000
 So that's just our short.

211
00:17:32,000 --> 00:17:38,000
 Okay, so we're going to have a few other really important frames today.

212
00:17:38,000 --> 00:17:43,000
 We're going to use like G for our gripper frame, O for our object frame.

213
00:17:43,000 --> 00:17:49,000
 This becomes a very nice vocabulary for starting to talk about these things.

214
00:17:49,000 --> 00:17:54,000
 So just so you start thinking about the mechanics of these, right?

215
00:17:54,000 --> 00:17:59,000
 So for instance, when does, well, let me do it in the other order here.

216
00:17:59,000 --> 00:18:02,000
 Here's a little check yourself, okay?

217
00:18:02,000 --> 00:18:05,000
 Let's say G is my gripper frame.

218
00:18:05,000 --> 00:18:12,000
 By the way, think about, if you see this now, this is just the object frame here, O.

219
00:18:12,000 --> 00:18:19,000
 I've got red as the X axis, Y as the green axis, Z as the blue axis.

220
00:18:19,000 --> 00:18:24,000
 This is commonly called, you can always use your right hand to do it, it's a right hand rule.

221
00:18:24,000 --> 00:18:31,000
 And it's a little weird, you have to remember that Y is going into the board, not out of the board.

222
00:18:31,000 --> 00:18:33,000
 That's called vehicle coordinates.

223
00:18:33,000 --> 00:18:39,000
 It's used commonly in a lot of robotics, certainly in autonomous vehicles, for instance.

224
00:18:39,000 --> 00:18:42,000
 If you're piloting an airplane, they do this.

225
00:18:42,000 --> 00:18:45,000
 So don't, yeah, I guess you want to get that right.

226
00:18:45,000 --> 00:18:48,000
 But for this class, you can always assume we're in vehicle coordinates.

227
00:18:48,000 --> 00:18:51,000
 There's pretty much two canonical choices out there.

228
00:18:51,000 --> 00:18:54,000
 Okay, so now take a second and think about this.

229
00:18:54,000 --> 00:19:06,000
 Which is a possible value for the position of the object, my red brick, relative to the gripper,

230
00:19:06,000 --> 00:19:12,000
 using the notation we talked about?

231
00:19:12,000 --> 00:19:24,000
 Yeah.

232
00:19:24,000 --> 00:19:30,000
 Good, yeah, yeah, so if I use a frame as my relative to, I'm talking about the origin of the frame.

233
00:19:30,000 --> 00:19:36,000
 So in this relative, it's valid to put a whole frame in there, meaning the origin.

234
00:19:36,000 --> 00:19:40,000
 Great.

235
00:19:40,000 --> 00:19:46,000
 I see some hands, yeah, what's up?

236
00:19:46,000 --> 00:19:48,000
 There is benefit for decoupling the B and the F, yeah.

237
00:19:48,000 --> 00:19:53,000
 You might have, I mean, even in the world frame, you might want to adjust the difference between two different points, right,

238
00:19:53,000 --> 00:19:55,000
 the relative vector between two different points.

239
00:19:55,000 --> 00:19:56,000
 That's used commonly.

240
00:19:56,000 --> 00:20:02,000
 In fact, in the mechanics of operating them depends on having that ability to decouple it.

241
00:20:02,000 --> 00:20:04,000
 Yeah.

242
00:20:04,000 --> 00:20:07,000
 Okay, option B.

243
00:20:07,000 --> 00:20:12,000
 Correct, right, because G is implied, the expressed in frame, right,

244
00:20:12,000 --> 00:20:20,000
 and so when you put your hand up like that and think about it, the object is along the Y axis here, right.

245
00:20:20,000 --> 00:20:24,000
 So point three's got to be the big one.

246
00:20:24,000 --> 00:20:34,000
 And just to lock that in, if I were to put a W here now, right,

247
00:20:34,000 --> 00:20:45,000
 now I want the location of the red object relative to the gripper frame, but in world, expressed in world coordinates, yeah.

248
00:20:45,000 --> 00:20:51,000
 Oh, the world, I'm sorry, the world is, yes, that's right, just assume it's right here.

249
00:20:51,000 --> 00:20:53,000
 I forgot to say that.

250
00:20:53,000 --> 00:21:00,000
 Thank you.

251
00:21:00,000 --> 00:21:02,000
 It's at least aligned with the grid, yeah.

252
00:21:02,000 --> 00:21:06,000
 Got an A, yes.

253
00:21:06,000 --> 00:21:07,000
 Okay.

254
00:21:07,000 --> 00:21:13,000
 Now the fact that that changed, you know, with just that one change in notation is going to be important

255
00:21:13,000 --> 00:21:15,000
 and you'll understand some of the properties, right.

256
00:21:15,000 --> 00:21:23,000
 So you'll pretty quickly understand that, for instance, let's see, I got another example here.

257
00:21:23,000 --> 00:21:29,000
 Yeah.

258
00:21:29,000 --> 00:21:42,000
 When do these two things match, right, if I have --

259
00:21:42,000 --> 00:21:51,000
 if I have different expressed in frames, when are the positions the same, yeah.

260
00:21:51,000 --> 00:21:53,000
 The object is this red brick.

261
00:21:53,000 --> 00:22:00,000
 Oh, yeah, it's my little foam red brick, it's like my little prop, yeah.

262
00:22:00,000 --> 00:22:07,000
 And it's at or near, I mean, the world frame, all you needed to know to answer this question is that the grid is the ground,

263
00:22:07,000 --> 00:22:12,000
 I should have said that more carefully, but the grid is the ground and the world frame is aligned, yeah, with,

264
00:22:12,000 --> 00:22:17,000
 that's the X axis in the world frame.

265
00:22:17,000 --> 00:22:20,000
 Yeah.

266
00:22:20,000 --> 00:22:21,000
 Yes.

267
00:22:21,000 --> 00:22:42,000
 Student: [Inaudible]

268
00:22:42,000 --> 00:22:48,000
 And then I plotted it in world coordinates.

269
00:22:48,000 --> 00:22:53,000
 Exactly, so it's going, so that vector that you drew, that in my head that I drew from here to here,

270
00:22:53,000 --> 00:23:00,000
 goes X2 and Z negative 2, yeah, perfect.

271
00:23:00,000 --> 00:23:07,000
 So when would I have a property like this, if I have two different expressed in frames, but the same points,

272
00:23:07,000 --> 00:23:13,000
 what would, when would the, in what case would that, you have a quality there?

273
00:23:13,000 --> 00:23:14,000
 Yeah.

274
00:23:14,000 --> 00:23:20,000
 Student: [Inaudible]

275
00:23:20,000 --> 00:23:24,000
 Okay, that's good, yeah, I mean, certainly if there's no rotational difference between C and D,

276
00:23:24,000 --> 00:23:30,000
 if they're just translations apart from it, yeah, then that's going to hold, okay.

277
00:23:30,000 --> 00:23:36,000
 Now, so that's a particular property, the notation's going to make it so you don't have to remember,

278
00:23:36,000 --> 00:23:40,000
 I mean, you can think about that, but the notation's going to protect you from having to remember every detail.

279
00:23:40,000 --> 00:23:47,000
 Okay, but that just exposes some of the subtlety that we want to build the notation around.

280
00:23:47,000 --> 00:23:54,000
 This is why we have rules, and why I like to think about the rules as the algebra of the rules.

281
00:23:54,000 --> 00:23:58,000
 Okay, I'll leave that here, come over here.

282
00:23:58,000 --> 00:24:06,000
 Right, so, you know, in a standard sort of kinematics class for robots, you'll like,

283
00:24:06,000 --> 00:24:14,000
 start saying I have theta, and then you'll get some sort of a length,

284
00:24:14,000 --> 00:24:19,000
 and you'll get a lot of like, x equals L sine theta, or this is cosine theta, or something like this.

285
00:24:19,000 --> 00:24:23,000
 Okay, that, all this stuff that you might have seen before in your kinematics classes,

286
00:24:23,000 --> 00:24:28,000
 27.4 of you that have seen that before, right, that is still valid.

287
00:24:28,000 --> 00:24:32,000
 But I would like to lift us up, instead of talking about the trigonometry,

288
00:24:32,000 --> 00:24:37,000
 we're going to talk about a frame here, a frame here, a frame here, okay,

289
00:24:37,000 --> 00:24:42,000
 and we're going to use algebra to talk about how they can be combined, how you go back and forth between them.

290
00:24:42,000 --> 00:24:47,000
 When the computer goes to do that algebra for you, it will compute sines and cosines and everything like that,

291
00:24:47,000 --> 00:24:51,000
 but we're going to just stay at the algebra level for now.

292
00:24:51,000 --> 00:25:04,000
 Okay, so here's the basics of the algebra, the spatial algebra.

293
00:25:04,000 --> 00:25:12,000
 We have an addition, right?

294
00:25:12,000 --> 00:25:21,000
 If I want to add two positions together, two relative positions together, I can do that,

295
00:25:21,000 --> 00:25:28,000
 but I need my superscripts to match for it to be a valid addition operation,

296
00:25:28,000 --> 00:25:33,000
 and that is how I get from A to C, right?

297
00:25:33,000 --> 00:25:48,000
 These need to match, and these need to match, okay?

298
00:25:48,000 --> 00:26:00,000
 There's an additive inverse, right?

299
00:26:00,000 --> 00:26:12,000
 So P of A to B, B relative to A, if I take the negation of that, that just flips my vector around, right?

300
00:26:12,000 --> 00:26:21,000
 That just points the vector in the other direction.

301
00:26:21,000 --> 00:26:27,000
 Okay, now you can see, with a few operations like this,

302
00:26:27,000 --> 00:26:37,000
 we can start building up a powerful set of tools that will allow me to think about how my frames move around in space.

303
00:26:37,000 --> 00:26:42,000
 But so far, we've only talked about positions and translations.

304
00:26:42,000 --> 00:26:52,000
 The other thing I need to talk about is rotations.

305
00:26:52,000 --> 00:26:57,000
 And again, there's a lot to dig into in rotations, especially 3D rotations,

306
00:26:57,000 --> 00:27:01,000
 but I want to stay first, at least at the spatial algebra sense, okay?

307
00:27:01,000 --> 00:27:14,000
 So I'm going to have my rotation here that goes between two different frames, for instance.

308
00:27:14,000 --> 00:27:23,000
 This is again my relative to, and my target frame here.

309
00:27:23,000 --> 00:27:34,000
 And think about that as the relative rotation that gets me G to F, yeah?

310
00:27:34,000 --> 00:27:41,000
 Now, I write this as a capital R. It looks like it could be a rotation matrix.

311
00:27:41,000 --> 00:27:51,000
 It's not wrong to think about it like that, but there's actually many ways to represent rotations on the computer or on your pad of paper, okay?

312
00:27:51,000 --> 00:27:54,000
 And I'm not assuming that it's a rotation matrix here.

313
00:27:54,000 --> 00:27:57,000
 This is just an abstract concept of a rotation.

314
00:27:57,000 --> 00:28:00,000
 If you choose to represent it with a rotation matrix, you're welcome to do that.

315
00:28:00,000 --> 00:28:07,000
 If you want to represent it with Euler angles, three angles, you know, roll, pitch, yaw, you can do that.

316
00:28:07,000 --> 00:28:10,000
 If you want to represent it with quaternions, you can do that, okay?

317
00:28:10,000 --> 00:28:15,000
 We'll talk about all those things again, but I just -- to abstract that, it's not necessarily a matrix,

318
00:28:15,000 --> 00:28:20,000
 but we're going to operate on it in kind of a matrix-like way in our algebra.

319
00:28:20,000 --> 00:28:30,000
 In particular, we will define the multiplication.

320
00:28:30,000 --> 00:28:36,000
 I want to take a point that's expressed in one frame and express it in a different frame.

321
00:28:36,000 --> 00:28:39,000
 It's the rotation matrix that tells me how to do that.

322
00:28:39,000 --> 00:28:54,000
 So --

323
00:28:54,000 --> 00:28:56,000
 Right, so this is back to your question, right?

324
00:28:56,000 --> 00:29:01,000
 So if I want to change my expressed in frame and leave the other ones the same,

325
00:29:01,000 --> 00:29:06,000
 then I need to take -- it's the rotation operators that operate on these expressed in frames.

326
00:29:06,000 --> 00:29:09,000
 So I can shift the positions, I can shift -- you know, these other --

327
00:29:09,000 --> 00:29:15,000
 the superscripts I can shift with addition, the subscripts I shift with multiplication,

328
00:29:15,000 --> 00:29:18,000
 you put them together and you get the full transform.

329
00:29:18,000 --> 00:29:23,000
 Okay?

330
00:29:23,000 --> 00:29:27,000
 You can also multiply rotations.

331
00:29:27,000 --> 00:29:35,000
 So RAB, RBC, as long as those intermediate subscripts hold,

332
00:29:35,000 --> 00:29:45,000
 then this gives me a rotation from R to C.

333
00:29:45,000 --> 00:30:04,000
 And there's a multiplicative inverse.

334
00:30:04,000 --> 00:30:10,000
 I take the inverse of that rotation, that's just rotating me the other direction,

335
00:30:10,000 --> 00:30:19,000
 and it gives me -- oops -- E to A.

336
00:30:19,000 --> 00:30:25,000
 Yes?

337
00:30:25,000 --> 00:30:26,000
 That's great.

338
00:30:26,000 --> 00:30:34,000
 So that's a key idea, is that you can change the expressed in frame and the origin doesn't matter.

339
00:30:34,000 --> 00:30:37,000
 Yeah?

340
00:30:37,000 --> 00:30:41,000
 That's actually an exercise.

341
00:30:41,000 --> 00:30:45,000
 But it's a straightforward calculation.

342
00:30:45,000 --> 00:30:48,000
 It's a good question to convince yourself of.

343
00:30:48,000 --> 00:30:50,000
 Exercise-worthy.

344
00:30:50,000 --> 00:30:58,000
 Yeah?

345
00:30:58,000 --> 00:31:00,000
 Multiplying positions, no.

346
00:31:00,000 --> 00:31:02,000
 Adding rotations, no.

347
00:31:02,000 --> 00:31:09,000
 The standard operation, if you want to operate with different rotations, is to multiply them together.

348
00:31:09,000 --> 00:31:10,000
 Yeah?

349
00:31:10,000 --> 00:31:13,000
 We're going to be able to -- yeah.

350
00:31:13,000 --> 00:31:15,000
 You'll see the last few.

351
00:31:15,000 --> 00:31:22,000
 But there's only a few operations that we allow, but they become very expressive.

352
00:31:22,000 --> 00:31:29,000
 Notice -- and this is related to your point -- we don't actually need an expressed in frame for the rotations.

353
00:31:29,000 --> 00:31:34,000
 If you're talking about the relative rotation between those, the origin doesn't matter,

354
00:31:34,000 --> 00:31:42,000
 and you don't need an expressed in frame.

355
00:31:42,000 --> 00:31:44,000
 Okay?

356
00:31:44,000 --> 00:31:48,000
 Now, yeah, the interesting stuff is when you have to put them together and do both.

357
00:31:48,000 --> 00:31:51,000
 Okay?

358
00:31:51,000 --> 00:31:56,000
 And that's where you get a full transformation of coordinates, a coordinate transform.

359
00:31:56,000 --> 00:31:58,000
 Is that a question or a stretch?

360
00:31:58,000 --> 00:31:59,000
 Stretch.

361
00:31:59,000 --> 00:32:00,000
 That's good.

362
00:32:00,000 --> 00:32:03,000
 Well, I mean, it's not -- you're good to stretch.

363
00:32:03,000 --> 00:32:06,000
 I welcome the stretch, but I'm sorry your arm is numb.

364
00:32:06,000 --> 00:32:16,000
 Yes?

365
00:32:16,000 --> 00:32:17,000
 Ah.

366
00:32:17,000 --> 00:32:23,000
 It's -- that's a great point.

367
00:32:23,000 --> 00:32:31,000
 So the interpretation -- so certainly in one degree of freedom, if you were to rotate along one axis

368
00:32:31,000 --> 00:32:37,000
 and then rotate again with a multiplication of our rotations, that would be like adding the angles.

369
00:32:37,000 --> 00:32:38,000
 Completely agree.

370
00:32:38,000 --> 00:32:41,000
 It gets more subtle in 3D, but you're completely right.

371
00:32:41,000 --> 00:32:46,000
 Yeah?

372
00:32:46,000 --> 00:32:56,000
 Okay, so a transform, coordinate transform is what we call it,

373
00:32:56,000 --> 00:33:00,000
 is going to be a rotation plus a translation put together.

374
00:33:00,000 --> 00:33:04,000
 And we're going to use capital X for that.

375
00:33:04,000 --> 00:33:15,000
 This is a rotation and a translation.

376
00:33:15,000 --> 00:33:18,000
 Now, you might have heard this by a few different names.

377
00:33:18,000 --> 00:33:24,000
 Pose is another word for it.

378
00:33:24,000 --> 00:33:33,000
 You might call it a full spatial transform if you're --

379
00:33:33,000 --> 00:33:35,000
 These are -- well, they're not quite synonyms.

380
00:33:35,000 --> 00:33:41,000
 Technically, pose is a noun and transform is a verb.

381
00:33:41,000 --> 00:33:48,000
 So it's okay that we have both, I guess, and they could be used correctly in a sentence in that sense.

382
00:33:48,000 --> 00:34:03,000
 The object in code that we use to talk about this is the rigid transform.

383
00:34:03,000 --> 00:34:09,000
 Okay.

384
00:34:09,000 --> 00:34:32,000
 There's a multiplication for transforms that looks a lot like the rotations.

385
00:34:32,000 --> 00:34:52,000
 There's a multiplicative inverse that flips the order of those two.

386
00:34:52,000 --> 00:34:56,000
 Yes?

387
00:34:56,000 --> 00:34:58,000
 I'm sorry, say it louder.

388
00:34:58,000 --> 00:35:01,000
 Why do we choose it to be a multiplication?

389
00:35:01,000 --> 00:35:06,000
 Yeah, it's really, I think, to keep things familiar.

390
00:35:06,000 --> 00:35:09,000
 All the operations are going to feel -- I mean, we could have chosen anything, right?

391
00:35:09,000 --> 00:35:11,000
 We could define our algebra anyway.

392
00:35:11,000 --> 00:35:19,000
 But the way you're going to operate on these things, I think, is most similar to what you think about with, like, linear algebra, multiplication, and stuff like that.

393
00:35:19,000 --> 00:35:22,000
 I think that will keep your -- I mean, even just the notion of an inverse and stuff like this.

394
00:35:22,000 --> 00:35:23,000
 When do you want to use a minus sign?

395
00:35:23,000 --> 00:35:25,000
 When do you want to call that inverse?

396
00:35:25,000 --> 00:35:34,000
 I think it's the most consistent with our wiring.

397
00:35:34,000 --> 00:35:37,000
 Okay, now, it's interesting to think about this.

398
00:35:37,000 --> 00:35:47,000
 Now, if -- remember, I tried to abstract away the mathematical concept of a rotation from the representation in numbers.

399
00:35:47,000 --> 00:35:53,000
 You know, if I represent this as a 3 by 3 matrix, for instance, you can.

400
00:35:53,000 --> 00:35:59,000
 That's one way to do it, is the basis, the x, y, z coordinates, basically.

401
00:35:59,000 --> 00:36:03,000
 Then this inverse is actually just the matrix inverse.

402
00:36:03,000 --> 00:36:05,000
 So that's another answer for you here, right?

403
00:36:05,000 --> 00:36:10,000
 Is that it's going to operate in many cases like a matrix.

404
00:36:10,000 --> 00:36:19,000
 It happens that if you were to do a similar kind of representation of this, then typically these are represented with 3 by 4 matrices,

405
00:36:19,000 --> 00:36:29,000
 because that's what graphics processors and even CPUs these days can eat up and chew out -- whatever -- chew and spit out very well.

406
00:36:29,000 --> 00:36:32,000
 They can crank lots of these.

407
00:36:32,000 --> 00:36:39,000
 But then the inverse here, the inverse of this is not just a matrix inverse, even though there's a matrix representation of those things.

408
00:36:39,000 --> 00:36:41,000
 It's slightly more -- it's not hard.

409
00:36:41,000 --> 00:36:46,000
 It's, again, computationally optimized, but it's not quite a matrix inverse here.

410
00:36:46,000 --> 00:36:53,000
 We have to -- we've defined an abstraction here that is independent of the matrix representation.

411
00:36:53,000 --> 00:36:59,000
 And the code will take care of that if you operate among matrices.

412
00:36:59,000 --> 00:37:13,000
 OK, the most important thing here, then, is that -- I'll put it right here -- is that this pose helps us go move points around in different frames.

413
00:37:13,000 --> 00:37:17,000
 It combines the operations of translation and rotation.

414
00:37:17,000 --> 00:37:30,000
 So in particular, we have to get the subscripts and superscripts right to get it completely right here.

415
00:37:30,000 --> 00:37:41,000
 If I want to transform a position relative to f expressed in f into being relative to g expressed in g,

416
00:37:41,000 --> 00:37:44,000
 which if you think about it, that's kind of what we're going to want.

417
00:37:44,000 --> 00:37:47,000
 That's the operation that matters the most.

418
00:37:47,000 --> 00:37:49,000
 If I've got a point in the world and I want to think about where it is --

419
00:37:49,000 --> 00:37:55,000
 let's say my camera took a picture of something and I want to change it from camera coordinates to world coordinates,

420
00:37:55,000 --> 00:37:58,000
 this is the operation we want.

421
00:37:58,000 --> 00:38:08,000
 And all you would need is the pose of the camera here, for instance.

422
00:38:08,000 --> 00:38:14,000
 I could maybe write it as xwc, camera in the world frame.

423
00:38:14,000 --> 00:38:21,000
 And that would allow me to take points that were measured by a camera and project them into world coordinates.

424
00:38:21,000 --> 00:38:28,000
 And when I do define this multiplication of a transform times a position,

425
00:38:28,000 --> 00:38:36,000
 then you could also break that down and it's two steps.

426
00:38:36,000 --> 00:38:49,000
 It's the addition and the rotation that are held inside that transform with the subscripts implied.

427
00:38:49,000 --> 00:38:54,000
 That's my shorthand.

428
00:38:54,000 --> 00:38:59,000
 This transform collects the operations of position and rotation.

429
00:38:59,000 --> 00:39:06,000
 Now, I promise, you'll start writing code and you'll twist around saying,

430
00:39:06,000 --> 00:39:13,000
 "Should I add the position of the frame first and then multiply or should I multiply or whatever?"

431
00:39:13,000 --> 00:39:20,000
 This notation can save you if you choose.

432
00:39:20,000 --> 00:39:24,000
 Any more questions on that? I love the questions.

433
00:39:24,000 --> 00:39:33,000
 Oh, a series of questions.

434
00:39:33,000 --> 00:39:44,000
 I'm adding the position and I'm multiplying the rotation times this other position.

435
00:39:44,000 --> 00:39:51,000
 That's to take the total transform from frame F to frame G.

436
00:39:51,000 --> 00:39:57,000
 If I want to take this thing that's expressed in and relative to F and put it as expressed in and relative to G,

437
00:39:57,000 --> 00:40:06,000
 then I do this, which is just a shorthand for doing this.

438
00:40:06,000 --> 00:40:27,000
 Yeah, a transform that contains both the position and the rotation.

439
00:40:27,000 --> 00:40:39,000
 I'm going to check their frames.

440
00:40:39,000 --> 00:40:45,000
 Their frames, because points don't have orientation.

441
00:40:45,000 --> 00:40:48,000
 These are all good things to check.

442
00:40:48,000 --> 00:40:53,000
 When I wrote the notes, I tried to think about every one of them and be explicit about that.

443
00:40:53,000 --> 00:41:00,000
 I'm pretty sure I answered those right.

444
00:41:00,000 --> 00:41:07,000
 I forget what it was. There's one of them that you would think you could use a point, but it just never occurs in practice.

445
00:41:07,000 --> 00:41:09,000
 We don't even include it in our notation.

446
00:41:09,000 --> 00:41:19,000
 Everything we've said is consistent.

447
00:41:19,000 --> 00:41:25,000
 We have a basic language now of thinking about how to operate on transforms.

448
00:41:25,000 --> 00:41:29,000
 We need to take the points and move them around between different coordinate frames.

449
00:41:29,000 --> 00:41:32,000
 This is our language.

450
00:41:32,000 --> 00:41:40,000
 The way we get it right, this language is also going to extend into velocities, for instance, even accelerations, forces.

451
00:41:40,000 --> 00:41:44,000
 The same tools go all the way up through the dynamics level.

452
00:41:44,000 --> 00:41:50,000
 We've only talked about positions so far.

453
00:41:50,000 --> 00:42:05,000
 Here's an interesting question for you.

454
00:42:05,000 --> 00:42:26,000
 When I call plant getPositions, some of you thought a lot about that, of the context and the EWA.

455
00:42:26,000 --> 00:42:28,000
 What do I get out?

456
00:42:28,000 --> 00:42:35,000
 This isn't a Dray question. This is a real question.

457
00:42:35,000 --> 00:42:39,000
 What does this thing return?

458
00:42:39,000 --> 00:42:41,000
 A vector of joint positions.

459
00:42:41,000 --> 00:42:44,000
 How big was that vector?

460
00:42:44,000 --> 00:42:45,000
 It's 7 most of the time.

461
00:42:45,000 --> 00:42:50,000
 It happens in the Pset problem. I think we used the planar one, so it was 3.

462
00:42:50,000 --> 00:42:54,000
 In the full 3D, EWA has 7 degrees of freedom.

463
00:42:54,000 --> 00:42:57,000
 In the plane, we locked a bunch of them out, so there's only 3.

464
00:42:57,000 --> 00:43:04,000
 This returns a 7 by 1 vector.

465
00:43:04,000 --> 00:43:15,000
 What do you think you would get if you called getPositions of the same context--

466
00:43:15,000 --> 00:43:18,000
 these are the plant contexts, right?

467
00:43:18,000 --> 00:43:29,000
 The plant contexts for the foam brick. I'll just write brick.

468
00:43:29,000 --> 00:43:42,000
 What do you think you get out if you call that?

469
00:43:42,000 --> 00:43:44,000
 Okay. That's nice.

470
00:43:44,000 --> 00:43:46,000
 7 joint angles that you get for the brick.

471
00:43:46,000 --> 00:43:50,000
 What are the 7?

472
00:43:50,000 --> 00:43:54,000
 What 7 angles do you think about?

473
00:43:54,000 --> 00:43:55,000
 The EWA joint angles?

474
00:43:55,000 --> 00:43:57,000
 Got it.

475
00:43:57,000 --> 00:44:01,000
 That's not what I'm looking for, but it's a good idea.

476
00:44:01,000 --> 00:44:04,000
 Yes?

477
00:44:04,000 --> 00:44:16,000
 It could be a scalar, but it needs to be a complete description of the position of that brick.

478
00:44:16,000 --> 00:44:21,000
 The generalized position means position and orientation.

479
00:44:21,000 --> 00:44:24,000
 I know that's confusing, but the generalized position--

480
00:44:24,000 --> 00:44:36,000
 everything I need to represent the configuration of that brick.

481
00:44:36,000 --> 00:44:40,000
 Good. So he says, I don't know which rotation we're representing internally,

482
00:44:40,000 --> 00:44:42,000
 but maybe if it's a quaternion, it would be 7 by 1.

483
00:44:42,000 --> 00:44:49,000
 It does come out to be also a 7 by 1 vector.

484
00:44:49,000 --> 00:44:58,000
 And it's 7 numbers that represent this.

485
00:44:58,000 --> 00:45:01,000
 Why is it 7 numbers?

486
00:45:01,000 --> 00:45:05,000
 The 7 numbers are the x position, the y position, the z position,

487
00:45:05,000 --> 00:45:14,000
 and then the quaternion x, y, z, w, where this--

488
00:45:14,000 --> 00:45:24,000
 I know not everybody knows quaternions, but this is a unit quaternion.

489
00:45:24,000 --> 00:45:28,000
 So the magnitude of q is 1.

490
00:45:28,000 --> 00:45:29,000
 So it's unit.

491
00:45:29,000 --> 00:45:33,000
 There's an extra constraint on that.

492
00:45:33,000 --> 00:45:36,000
 My point is not to teach you everything about quaternions.

493
00:45:36,000 --> 00:45:43,000
 My point is that in robotics, there are many ways to represent 3D rotation.

494
00:45:43,000 --> 00:45:47,000
 And even when you run a single simulation,

495
00:45:47,000 --> 00:45:50,000
 you will go back and forth between them often.

496
00:45:50,000 --> 00:45:51,000
 And we try to make that easy.

497
00:45:51,000 --> 00:45:56,000
 So if you have a rigid transform, you can extract its rotation.

498
00:45:56,000 --> 00:46:00,000
 You can flip it to a quaternion representation, to a three angles,

499
00:46:00,000 --> 00:46:02,000
 a roll pitch yaw representation.

500
00:46:02,000 --> 00:46:04,000
 You can treat it as a matrix.

501
00:46:04,000 --> 00:46:09,000
 Each of those are particularly well-suited for particular operations.

502
00:46:09,000 --> 00:46:12,000
 If you want to throw it on the GPU and compute series of transforms,

503
00:46:12,000 --> 00:46:14,000
 then you want the matrix representation.

504
00:46:14,000 --> 00:46:18,000
 And those become matrix multiplies that are heavily optimized.

505
00:46:18,000 --> 00:46:23,000
 There are other operations where if you want to represent it in a vector,

506
00:46:23,000 --> 00:46:27,000
 if you took your rotation and took the nine numbers and put it in a vector,

507
00:46:27,000 --> 00:46:29,000
 then you're carrying around more numbers than you need.

508
00:46:29,000 --> 00:46:33,000
 It's not an efficient representation.

509
00:46:33,000 --> 00:46:38,000
 You would think you only need three numbers, the roll pitch yaw.

510
00:46:38,000 --> 00:46:41,000
 But the roll pitch yaw-- I won't go into great detail,

511
00:46:41,000 --> 00:46:43,000
 but it has singularities.

512
00:46:43,000 --> 00:46:47,000
 So you can get yourself into problems if you only use roll pitch yaw.

513
00:46:47,000 --> 00:46:51,000
 It's not actually a complete representation of orientation in 3D space.

514
00:46:51,000 --> 00:46:54,000
 There's something called gimbal lock.

515
00:46:54,000 --> 00:46:57,000
 And robots don't like that.

516
00:46:57,000 --> 00:47:01,000
 So we carry around four numbers in our configuration,

517
00:47:01,000 --> 00:47:07,000
 in our minimal vector representation of an orientation.

518
00:47:07,000 --> 00:47:09,000
 And we carry around one extra constraint.

519
00:47:09,000 --> 00:47:12,000
 And that's the way we get around the singularities.

520
00:47:12,000 --> 00:47:13,000
 Yeah?

521
00:47:13,000 --> 00:47:14,000
 Sorry.

522
00:47:14,000 --> 00:47:18,000
 [INAUDIBLE]

523
00:47:18,000 --> 00:47:19,000
 Good.

524
00:47:19,000 --> 00:47:20,000
 Yeah.

525
00:47:20,000 --> 00:47:27,000
 So in the context, it actually-- because this is a floating base,

526
00:47:27,000 --> 00:47:29,000
 it only exists in world frame.

527
00:47:29,000 --> 00:47:30,000
 That's true.

528
00:47:30,000 --> 00:47:33,000
 [INAUDIBLE]

529
00:47:33,000 --> 00:47:34,000
 Yeah.

530
00:47:34,000 --> 00:47:37,000
 That'll be super clear in a few pictures, I think.

531
00:47:37,000 --> 00:47:38,000
 Yeah.

532
00:47:38,000 --> 00:47:40,000
 So call me on it if it's not.

533
00:47:40,000 --> 00:47:43,500
 Nice.

534
00:47:43,500 --> 00:47:44,000
 OK.

535
00:47:44,000 --> 00:47:48,000
 So we're building up the tools and just many different representations

536
00:47:48,000 --> 00:47:50,000
 of orientation.

537
00:47:50,000 --> 00:47:51,000
 It's interesting, actually.

538
00:47:51,000 --> 00:47:54,000
 Everything is beautiful and clean in two dimensions.

539
00:47:54,000 --> 00:47:57,000
 If you want to do rotations in 2D, you can represent it

540
00:47:57,000 --> 00:47:59,000
 with a single number or an angle.

541
00:47:59,000 --> 00:48:01,000
 Everything works beautifully.

542
00:48:01,000 --> 00:48:06,000
 When you get to 3D, everything's worse.

543
00:48:06,000 --> 00:48:09,000
 There's all these weird quirks about representing orientations in 3D.

544
00:48:09,000 --> 00:48:12,000
 We have highly optimized tools to deal with it,

545
00:48:12,000 --> 00:48:15,000
 but it's slightly unsatisfying that there's not

546
00:48:15,000 --> 00:48:18,000
 one right answer for all of these.

547
00:48:18,000 --> 00:48:22,000
 When we get to spatial velocities, angular velocity, things collapse.

548
00:48:22,000 --> 00:48:24,000
 And actually, there is a one right representation.

549
00:48:24,000 --> 00:48:27,000
 But orientation is bad.

550
00:48:27,000 --> 00:48:30,000
 It's ugly.

551
00:48:30,000 --> 00:48:31,000
 OK.

552
00:48:31,000 --> 00:48:36,000
 So now that we have our algebra, we're going to program a robot.

553
00:48:36,000 --> 00:48:39,000
 And I told you the way we're going to program the robot to start

554
00:48:39,000 --> 00:48:43,000
 is by making a series of key frames, really.

555
00:48:43,000 --> 00:48:44,000
 I'm going to start by--

556
00:48:44,000 --> 00:48:52,000
 the world was perceived by an oracle.

557
00:48:52,000 --> 00:48:59,000
 So someone like the Oracle of Delphi says, oh, your object is at xwo.

558
00:48:59,000 --> 00:48:59,500
 Right?

559
00:48:59,500 --> 00:49:00,400
 Someone told me xwo.

560
00:49:00,400 --> 00:49:10,040
 When I say oracular or an oracle, it's a weird-- yeah.

561
00:49:10,040 --> 00:49:12,520
 The etymology of that sort of is weird.

562
00:49:12,520 --> 00:49:16,000
 But we often say, oh, if someone magically

563
00:49:16,000 --> 00:49:19,000
 gave you the right answer, we call that the oracle

564
00:49:19,000 --> 00:49:22,000
 or the oracular perception.

565
00:49:22,000 --> 00:49:26,840
 In this case, I'm going to say the object, which I'll just use as o.

566
00:49:26,840 --> 00:49:31,560
 The object frame or the object pose or the object frame,

567
00:49:31,560 --> 00:49:35,120
 which I'm going to describe in numbers with a transform or a pose

568
00:49:35,120 --> 00:49:38,200
 here in the world coordinates.

569
00:49:38,200 --> 00:49:39,820
 Someone told me where the red brick is.

570
00:49:39,820 --> 00:49:42,320
 And they told me by giving me this.

571
00:49:42,320 --> 00:49:43,400
 OK.

572
00:49:43,400 --> 00:49:51,920
 And now my job is to come up with a series of hand--

573
00:49:51,920 --> 00:49:57,680
 I want to figure out what xg of w is at many different times.

574
00:49:57,680 --> 00:50:04,800
 That's the next step of our operation.

575
00:50:04,800 --> 00:50:05,320
 OK.

576
00:50:05,320 --> 00:50:07,160
 So actually, there's going to be many different frames

577
00:50:07,160 --> 00:50:08,280
 we're going to think about.

578
00:50:08,280 --> 00:50:11,200
 Let's take-- I'm going to even call this the object's initial.

579
00:50:11,200 --> 00:50:15,840
 That says initial there.

580
00:50:15,840 --> 00:50:21,400
 And I want to have a target or a final object frame.

581
00:50:21,400 --> 00:50:24,680
 So this is where I want to set it down.

582
00:50:24,680 --> 00:50:26,440
 I guess I called it goal in my notes.

583
00:50:26,440 --> 00:50:28,720
 And if I don't make them match, then I

584
00:50:28,720 --> 00:50:32,080
 will do the wrong thing in 10 minutes.

585
00:50:32,080 --> 00:50:35,580
 OK.

586
00:50:35,580 --> 00:50:40,000
 And then I need to start designing the gripper key frames.

587
00:50:40,000 --> 00:50:42,360
 So I'll make maybe--

588
00:50:42,360 --> 00:50:46,080
 I have an initial gripper.

589
00:50:46,080 --> 00:50:51,380
 When the robot woke up, the robot is in some particular initial gripper

590
00:50:51,380 --> 00:50:52,320
 location.

591
00:50:52,320 --> 00:50:55,800
 The object is in some initial that I've been told about.

592
00:50:55,800 --> 00:50:57,760
 And then I want to make--

593
00:50:57,760 --> 00:51:04,600
 I figure out where the gripper needs to be when I pick the object,

594
00:51:04,600 --> 00:51:08,000
 where it should be when I place the object.

595
00:51:08,000 --> 00:51:13,880
 And actually, there's a subtlety, right?

596
00:51:13,880 --> 00:51:18,080
 Because we don't want to knock the object over when

597
00:51:18,080 --> 00:51:20,360
 we're coming in to pick it up.

598
00:51:20,360 --> 00:51:23,820
 So we typically make a pre-pick location.

599
00:51:23,820 --> 00:51:27,540
 So we first actually just drive the robot simply just above the object.

600
00:51:27,540 --> 00:51:29,340
 We'll call that pre-pick.

601
00:51:29,340 --> 00:51:30,380
 And then we'll go down.

602
00:51:30,380 --> 00:51:31,420
 We'll close our hand.

603
00:51:31,420 --> 00:51:34,280
 We'll go back up to pre-pick.

604
00:51:34,280 --> 00:51:37,140
 And then go over to pre-place.

605
00:51:37,140 --> 00:51:38,140
 Yeah.

606
00:51:38,140 --> 00:51:39,980
 Is that good?

607
00:51:39,980 --> 00:51:42,700
 I sound silly saying it, but I think you know what I mean.

608
00:51:42,700 --> 00:51:47,900
 Pre-pick, g pre-place.

609
00:51:47,900 --> 00:51:50,660
 And then maybe the g final.

610
00:51:50,660 --> 00:51:54,420
 I'll go to some final position.

611
00:51:54,420 --> 00:51:54,920
 All right.

612
00:51:54,920 --> 00:51:58,860
 So these are the frames abstractly.

613
00:51:58,860 --> 00:52:01,260
 And we're going to represent them by giving them

614
00:52:01,260 --> 00:52:03,380
 transforms for each of those.

615
00:52:03,380 --> 00:52:05,580
 First in the world coordinates.

616
00:52:05,580 --> 00:52:08,340
 And we'll design a set of key frames that do that.

617
00:52:08,340 --> 00:52:13,620
 By the way, all that algebra stuff is right in the notes.

618
00:52:13,620 --> 00:52:19,140
 And you can highlight on it and change my lectures.

619
00:52:19,140 --> 00:52:22,660
 And all the rules are there and careful and the inverse

620
00:52:22,660 --> 00:52:23,780
 and all that stuff's there.

621
00:52:23,780 --> 00:52:28,700
 So this is roughly what we're trying to do now

622
00:52:28,700 --> 00:52:34,900
 is come up with this imagined hand moving through the air

623
00:52:34,900 --> 00:52:41,740
 trajectory that goes from object initial to object goal.

624
00:52:41,740 --> 00:52:44,580
 And we're going to ignore the dynamics of actually picking it

625
00:52:44,580 --> 00:52:45,740
 up.

626
00:52:45,740 --> 00:52:47,080
 We're just going to hallucinate.

627
00:52:47,080 --> 00:52:49,940
 If I were to do this, what's it going to do?

628
00:52:49,940 --> 00:52:51,460
 It's pretty funny, actually.

629
00:52:51,460 --> 00:52:53,860
 I made this list.

630
00:52:53,860 --> 00:52:56,300
 Typed in the code to make the example.

631
00:52:56,300 --> 00:52:58,540
 And I had forgotten an important detail.

632
00:52:58,540 --> 00:53:01,260
 There's one more frame that I think you need.

633
00:53:01,260 --> 00:53:02,500
 Seems pretty important.

634
00:53:02,500 --> 00:53:07,700
 It'll come up in a second here.

635
00:53:07,700 --> 00:53:10,420
 You kind of need to go-- you can't go from a straight line,

636
00:53:10,420 --> 00:53:16,100
 it turns out, from the pre-pick to the pre-final.

637
00:53:16,100 --> 00:53:17,500
 This is a simulation running.

638
00:53:17,500 --> 00:53:20,220
 So I'd sheared the hand off because I

639
00:53:20,220 --> 00:53:24,220
 forgot to clear the bins.

640
00:53:24,220 --> 00:53:26,900
 So we're actually going to make one more in the middle

641
00:53:26,900 --> 00:53:31,020
 here, which is G clearance.

642
00:53:31,020 --> 00:53:32,780
 Mia culpa.

643
00:53:32,780 --> 00:53:35,340
 Look at that.

644
00:53:35,340 --> 00:53:37,580
 And that's why we test things in simulation before we

645
00:53:37,580 --> 00:53:38,580
 go into the real world.

646
00:53:38,580 --> 00:53:39,080
 OK.

647
00:53:39,080 --> 00:53:46,220
 So the language that we have now makes it actually

648
00:53:46,220 --> 00:53:48,020
 relatively easy.

649
00:53:48,020 --> 00:53:50,620
 I mean, it's a little verbose because there's a lot of frames,

650
00:53:50,620 --> 00:53:54,420
 but every individual line is actually very simple.

651
00:53:54,420 --> 00:53:59,580
 To make-- if someone just tells me the initial gripper,

652
00:53:59,580 --> 00:54:05,980
 the initial object, then I can go on through.

653
00:54:05,980 --> 00:54:13,780
 I should say, when I write PABF on the board,

654
00:54:13,780 --> 00:54:17,220
 to write that in code, we do P_AB_F.

655
00:54:17,220 --> 00:54:24,260
 And that works.

656
00:54:24,260 --> 00:54:30,020
 So this, hard to write in your software editor.

657
00:54:30,020 --> 00:54:32,060
 This is our translation of that.

658
00:54:32,060 --> 00:54:36,460
 And similarly for rotations and transforms.

659
00:54:36,460 --> 00:54:36,940
 OK.

660
00:54:36,940 --> 00:54:41,700
 So given that, you can sort of read through here.

661
00:54:41,700 --> 00:54:49,620
 The first thing I do is I try to decide an initial grasp

662
00:54:49,620 --> 00:54:50,740
 for the object.

663
00:54:50,740 --> 00:54:54,380
 I wanted to find the position of the grasp

664
00:54:54,380 --> 00:54:56,580
 by first thinking about where I want the object

665
00:54:56,580 --> 00:54:59,660
 to be relative to the hand.

666
00:54:59,660 --> 00:55:00,660
 OK.

667
00:55:00,660 --> 00:55:05,140
 So the numbers here are 0, 0.11, and 0.

668
00:55:05,140 --> 00:55:05,980
 Why is that?

669
00:55:05,980 --> 00:55:15,260
 I want it to be above and down the y-axis.

670
00:55:15,260 --> 00:55:17,580
 Green is why.

671
00:55:17,580 --> 00:55:21,420
 Positive 0.11 puts it right about here.

672
00:55:21,420 --> 00:55:25,660
 I'd like the center of the object to be at y, 0.11.

673
00:55:25,660 --> 00:55:28,020
 Turns out that's the length of the hand and the fingers.

674
00:55:28,020 --> 00:55:30,180
 It's in meters.

675
00:55:30,180 --> 00:55:31,500
 OK.

676
00:55:31,500 --> 00:55:33,260
 And I'll be otherwise 0, 0.

677
00:55:33,260 --> 00:55:35,060
 So that'll place my hand exactly above it.

678
00:55:35,060 --> 00:55:41,380
 And then for my rotations, I just

679
00:55:41,380 --> 00:55:43,920
 need to make sure that the frame is such that I'm coming down

680
00:55:43,920 --> 00:55:45,060
 from above.

681
00:55:45,060 --> 00:55:51,380
 So I can do that by just putting the relative orientation

682
00:55:51,380 --> 00:55:54,300
 of the gripper frame relative to the object

683
00:55:54,300 --> 00:55:57,380
 with a couple rotation matrices.

684
00:55:57,380 --> 00:55:59,060
 That's my least favorite line in this.

685
00:55:59,060 --> 00:56:00,980
 I could do it a couple different ways.

686
00:56:00,980 --> 00:56:03,140
 But I made an x rotation and a z rotation.

687
00:56:03,140 --> 00:56:06,900
 I thought that would be the simplest out of the box.

688
00:56:06,900 --> 00:56:12,060
 And then I can combine the rotation and the position

689
00:56:12,060 --> 00:56:20,100
 that I desire of the object relative to the gripper

690
00:56:20,100 --> 00:56:20,900
 into this object.

691
00:56:20,900 --> 00:56:22,060
 But that's not enough, right?

692
00:56:22,060 --> 00:56:23,700
 I still have to go from--

693
00:56:23,700 --> 00:56:27,940
 define from the grasp to the object is the inverse.

694
00:56:27,940 --> 00:56:34,340
 And I want to ultimately go from the grasp to the world.

695
00:56:34,340 --> 00:56:37,540
 But since I know all of the relative transforms,

696
00:56:37,540 --> 00:56:39,380
 I can make all of that work.

697
00:56:39,380 --> 00:56:42,500
 I can go from x o initial, x o grasp

698
00:56:42,500 --> 00:56:46,220
 tells me what the grasp should be at the time of picking.

699
00:56:46,220 --> 00:56:49,700
 It's all just following the algebra.

700
00:56:49,700 --> 00:56:50,860
 It was interesting.

701
00:56:50,860 --> 00:56:54,260
 We asked separately, do you know Python, which most of you

702
00:56:54,260 --> 00:56:55,300
 said yes.

703
00:56:55,300 --> 00:56:58,380
 And we asked if you know NumPy, and less of you said yes.

704
00:56:58,380 --> 00:57:03,980
 This is multiplication, matrix multiplication in NumPy,

705
00:57:03,980 --> 00:57:05,300
 the little add around symbol.

706
00:57:05,300 --> 00:57:10,100
 Don't shoot the messenger.

707
00:57:10,100 --> 00:57:11,740
 That's not my favorite.

708
00:57:11,740 --> 00:57:14,100
 But that's just a matrix multiplication.

709
00:57:14,100 --> 00:57:18,500
 So the NumPy abstraction is provided here on transforms.

710
00:57:18,500 --> 00:57:20,820
 And behind the scenes, it's doing what it needs to do,

711
00:57:20,820 --> 00:57:22,540
 with whatever rotation representation

712
00:57:22,540 --> 00:57:28,100
 you've done in order to make that math we just did work.

713
00:57:28,100 --> 00:57:32,580
 And with a relatively simple cascade of transforms,

714
00:57:32,580 --> 00:57:36,540
 we can come up with a list of grippers in the world frame.

715
00:57:36,540 --> 00:57:38,780
 And I just did it in a little dictionary

716
00:57:38,780 --> 00:57:42,940
 here that goes through and names all of them.

717
00:57:42,940 --> 00:57:44,980
 The clearance one is actually one of the easier,

718
00:57:44,980 --> 00:57:48,060
 the more interesting ones, because I wanted to--

719
00:57:48,060 --> 00:57:50,180
 I was in some initial orientation,

720
00:57:50,180 --> 00:57:52,340
 and I had some final orientation.

721
00:57:52,340 --> 00:57:56,060
 And so to be somewhere half orientation between there,

722
00:57:56,060 --> 00:57:58,260
 I had to do a little bit of orientation math

723
00:57:58,260 --> 00:58:03,620
 to find, to decide what the half angle was in a general way.

724
00:58:03,620 --> 00:58:06,860
 And that was easiest to switch to yet another representation

725
00:58:06,860 --> 00:58:10,460
 of orientations, which is the axis angle representation.

726
00:58:10,460 --> 00:58:12,340
 And then there, you just flip the axis angle,

727
00:58:12,340 --> 00:58:14,380
 you divide the angle in two, and you flip back,

728
00:58:14,380 --> 00:58:15,500
 and you're good.

729
00:58:15,500 --> 00:58:18,780
 So all of these are good at different pieces of the stack.

730
00:58:19,780 --> 00:58:25,140
 So that gives us our key frames.

731
00:58:25,140 --> 00:58:28,380
 And then we have to somehow decide the timing.

732
00:58:28,380 --> 00:58:32,540
 So we need to go from just key frames to the timing.

733
00:58:46,780 --> 00:58:59,940
 See, I want to go from xg initial, xg pre-pick,

734
00:58:59,940 --> 00:59:01,980
 to just some trajectory that I'm going

735
00:59:01,980 --> 00:59:04,660
 to execute on the robot, which is

736
00:59:04,660 --> 00:59:09,220
 the gripper in the world frame as a function of time.

737
00:59:09,220 --> 00:59:11,980
 So somehow, I need to embed those in time.

738
00:59:15,780 --> 00:59:22,340
 So maybe at time 0, I'm at xg initial.

739
00:59:22,340 --> 00:59:31,100
 And at different times, I'm going to be at xg pre-pick,

740
00:59:31,100 --> 00:59:32,300
 and so on.

741
00:59:32,300 --> 00:59:33,620
 But in order to move the robot, I

742
00:59:33,620 --> 00:59:35,580
 need to define how I get between the two.

743
00:59:35,580 --> 00:59:41,860
 So the language we use for these is

744
00:59:41,860 --> 00:59:43,660
 the language of trajectories.

745
00:59:43,660 --> 00:59:50,980
 So I'm going to make a pose trajectory.

746
00:59:50,980 --> 00:59:57,060
 And it's interesting now, we have to think, in order to do this,

747
00:59:57,060 --> 00:59:59,560
 we have to think about what's the right way to interpolate

748
00:59:59,560 --> 01:00:04,380
 between poses, between transforms.

749
01:00:04,380 --> 01:00:08,460
 So for positions, it's perfectly reasonable to just do

750
01:00:08,460 --> 01:00:10,860
 sort of a straight line interpolation.

751
01:00:10,860 --> 01:00:14,020
 That would be like, if people know the term, first order

752
01:00:14,020 --> 01:00:15,580
 hold.

753
01:00:15,580 --> 01:00:19,060
 That would be from filtering or something like that,

754
01:00:19,060 --> 01:00:20,860
 you could call it a first order hold.

755
01:00:20,860 --> 01:00:30,820
 But for positions, p of g at time 0, pg, say, at time 1,

756
01:00:30,820 --> 01:00:32,340
 linear interpolation is fine.

757
01:00:32,340 --> 01:00:39,140
 You can get fancier.

758
01:00:39,140 --> 01:00:41,780
 Maybe you don't want to have any discontinuities.

759
01:00:41,780 --> 01:00:44,540
 Your robot might go--

760
01:00:44,540 --> 01:00:46,700
 if you do that, maybe you want to smooth those out,

761
01:00:46,700 --> 01:00:48,820
 so you could have a smoother interpolation,

762
01:00:48,820 --> 01:00:52,940
 like a cubic spline would be something people would do.

763
01:00:52,940 --> 01:00:56,580
 But for today, we're going to just do a linear interpolation.

764
01:00:56,580 --> 01:01:03,140
 So I just define the time of this, time initial, time

765
01:01:03,140 --> 01:01:07,420
 pre-pick, and then I just take a linear combination of those

766
01:01:07,420 --> 01:01:10,740
 to index by time.

767
01:01:10,740 --> 01:01:12,380
 What about for the rotations, though?

768
01:01:12,380 --> 01:01:18,860
 Once again, unfortunately, we have

769
01:01:18,860 --> 01:01:23,260
 to think about the different rotations, the different ways

770
01:01:23,260 --> 01:01:24,220
 to represent rotation.

771
01:01:24,220 --> 01:01:31,540
 You can do axis angle, but the axis

772
01:01:31,540 --> 01:01:34,100
 is changing, not just the angle is changing as you move along.

773
01:01:35,100 --> 01:01:40,740
 Interpolating linearly in rotation matrices

774
01:01:40,740 --> 01:01:42,100
 is not a good idea.

775
01:01:42,100 --> 01:01:43,780
 I could convince you of that if you want,

776
01:01:43,780 --> 01:01:45,540
 but if you just took the numbers that

777
01:01:45,540 --> 01:01:46,820
 populate a rotation matrix--

778
01:01:46,820 --> 01:01:53,700
 so a rotation matrix would be a 3 by 3 matrix.

779
01:01:53,700 --> 01:01:55,860
 It would be an orthonormal matrix.

780
01:01:55,860 --> 01:01:59,260
 You'd like the vectors to all be of unit length.

781
01:01:59,260 --> 01:02:01,780
 You could interpolate between two orthonormal matrices

782
01:02:01,780 --> 01:02:05,180
 and get vectors that are not unit length, for instance.

783
01:02:05,180 --> 01:02:07,140
 You wouldn't even have a valid rotation matrix

784
01:02:07,140 --> 01:02:11,940
 if you just took rotation 1, rotation 2, smash them together.

785
01:02:11,940 --> 01:02:13,380
 You wouldn't get a valid rotation.

786
01:02:13,380 --> 01:02:19,220
 It turns out that the most natural way to do this

787
01:02:19,220 --> 01:02:21,340
 is in the language of quaternions again.

788
01:02:21,340 --> 01:02:24,220
 So of our many rotation representations,

789
01:02:24,220 --> 01:02:27,380
 quaternions tends to be a winner here.

790
01:02:27,380 --> 01:02:30,180
 And basically, you take a--

791
01:02:30,180 --> 01:02:34,860
 it's almost to say a straight line in quaternions

792
01:02:34,860 --> 01:02:36,660
 is the right thing.

793
01:02:36,660 --> 01:02:39,380
 But quaternions have to be unit norm,

794
01:02:39,380 --> 01:02:41,260
 just like rotation matrices do.

795
01:02:41,260 --> 01:02:45,580
 So you have to do an interpolation on the sphere,

796
01:02:45,580 --> 01:02:48,580
 basically.

797
01:02:48,580 --> 01:02:49,780
 So that's all good.

798
01:02:49,780 --> 01:02:52,660
 It's called spherical linear interpolation.

799
01:02:52,660 --> 01:02:56,100
 [WRITING]

800
01:02:56,100 --> 01:03:08,060
 Slurp, if you're cool.

801
01:03:08,060 --> 01:03:08,560
 Slurp.

802
01:03:08,560 --> 01:03:15,700
 Spherical linear-- take some liberties-- interpolation.

803
01:03:15,700 --> 01:03:17,380
 Yeah?

804
01:03:17,380 --> 01:03:18,420
 OK.

805
01:03:18,420 --> 01:03:22,420
 And the code will do this for you.

806
01:03:22,420 --> 01:03:25,660
 All you have to know is that don't call linear interpolate

807
01:03:25,660 --> 01:03:27,060
 on quaternions.

808
01:03:27,060 --> 01:03:28,340
 You'd be unhappy.

809
01:03:28,340 --> 01:03:33,900
 Call slurp on the quaternions.

810
01:03:33,900 --> 01:03:37,220
 Now, this matters a lot, actually.

811
01:03:37,220 --> 01:03:41,060
 A lot of people have thought now about pose estimation

812
01:03:41,060 --> 01:03:43,940
 with deep networks, for instance.

813
01:03:43,940 --> 01:03:46,620
 So you're trying to train a neural network, let's say,

814
01:03:46,620 --> 01:03:49,820
 to output poses.

815
01:03:49,820 --> 01:03:53,100
 If you don't get these details right,

816
01:03:53,100 --> 01:03:57,180
 you might get zero training error on this pose,

817
01:03:57,180 --> 01:03:58,860
 zero training error on this pose.

818
01:03:58,860 --> 01:04:01,180
 But when the network goes to interpolate,

819
01:04:01,180 --> 01:04:03,100
 you're going to have the same problems.

820
01:04:03,100 --> 01:04:07,380
 So the representation people use for your output layer

821
01:04:07,380 --> 01:04:09,540
 in a neural network that's trying to estimate pose

822
01:04:09,540 --> 01:04:10,100
 matters.

823
01:04:10,100 --> 01:04:14,740
 And it's all the same details we're doing here.

824
01:04:14,740 --> 01:04:17,340
 This just happens to be our interpolation across time.

825
01:04:17,340 --> 01:04:20,100
 But for years, people would--

826
01:04:20,100 --> 01:04:21,900
 my neural network's not learning poses.

827
01:04:21,900 --> 01:04:23,500
 And it's just, well, you asked it to learn something

828
01:04:23,500 --> 01:04:24,580
 it sort of couldn't learn.

829
01:04:24,580 --> 01:04:26,920
 And then the field figured out the right ways to ask it.

830
01:04:26,920 --> 01:04:31,860
 OK.

831
01:04:31,860 --> 01:04:33,120
 Is that clear?

832
01:04:33,120 --> 01:04:36,660
 So it turns out that we try to make all this stuff easy

833
01:04:36,660 --> 01:04:39,540
 in code.

834
01:04:39,540 --> 01:04:41,780
 There's various different trajectories

835
01:04:41,780 --> 01:04:44,300
 that you can use.

836
01:04:44,300 --> 01:04:47,380
 Piecewise quaternion slurp, for instance.

837
01:04:47,380 --> 01:04:55,660
 And a piecewise pose, which just takes the linear interpolation

838
01:04:55,660 --> 01:05:00,340
 plus the quaternion slurp interpolation.

839
01:05:00,340 --> 01:05:02,000
 It takes the whole pose.

840
01:05:02,000 --> 01:05:04,620
 So a piecewise pose will take a pose at this time,

841
01:05:04,620 --> 01:05:07,300
 a pose at this time, a pose at this time, a pose at this time,

842
01:05:07,300 --> 01:05:09,700
 and give you a nice, smooth linear interpolation

843
01:05:09,700 --> 01:05:13,220
 as appropriate with the rotations.

844
01:05:13,220 --> 01:05:15,620
 And that gets us our imagined trajectory.

845
01:05:15,620 --> 01:05:20,700
 A lot of tools, but hopefully it's OK.

846
01:05:20,700 --> 01:05:27,420
 All right, so that was step two.

847
01:05:27,420 --> 01:05:30,380
 Step one was just understanding this notion of frames.

848
01:05:30,380 --> 01:05:33,060
 Step two was making the sketch.

849
01:05:33,060 --> 01:05:39,100
 Step three is connecting the gripper back to joint angles.

850
01:05:39,100 --> 01:05:43,020
 And so luckily, forward kinematics

851
01:05:43,020 --> 01:05:46,780
 is a pretty simple thing given all the spatial algebra.

852
01:06:08,940 --> 01:06:13,180
 So forward kinematics is the operation

853
01:06:13,180 --> 01:06:16,500
 of going from joint positions.

854
01:06:16,500 --> 01:06:26,620
 Most of the time for most of our robots,

855
01:06:26,620 --> 01:06:27,980
 I could just say joint angles.

856
01:06:27,980 --> 01:06:29,740
 It's mostly angles, but you could

857
01:06:29,740 --> 01:06:35,700
 have a prismatic joint or a linear joint on your robot.

858
01:06:35,700 --> 01:06:37,620
 It's more generally joint positions.

859
01:06:37,620 --> 01:06:39,260
 You can have a couple different--

860
01:06:39,260 --> 01:06:42,100
 you can have helical joints and all kinds

861
01:06:42,100 --> 01:06:44,940
 of weird things on robots.

862
01:06:44,940 --> 01:06:48,460
 You go from joint positions to poses.

863
01:06:48,460 --> 01:06:57,940
 And just to get the language down,

864
01:06:57,940 --> 01:07:10,540
 inverse kinematics is from poses to joint positions.

865
01:07:18,260 --> 01:07:27,780
 We'll do differential kinematics soon too,

866
01:07:27,780 --> 01:07:32,700
 which is going to be basically the derivative of this map.

867
01:07:32,700 --> 01:07:39,060
 So it's going to be from joint velocities

868
01:07:39,060 --> 01:07:49,260
 to 3D spatial velocities, which we'll define soon.

869
01:07:49,260 --> 01:07:55,180
 But this is the family of kinematics methods.

870
01:07:55,180 --> 01:07:58,980
 The one we want first here is just forward kinematics.

871
01:07:58,980 --> 01:08:02,260
 So forward kinematics would be if I

872
01:08:02,260 --> 01:08:06,700
 want to find the position of the gripper,

873
01:08:06,700 --> 01:08:11,660
 let's say the pose of a gripper in space,

874
01:08:11,660 --> 01:08:24,500
 I need that to be a function of the joint angles,

875
01:08:24,500 --> 01:08:25,980
 the joint positions here.

876
01:08:25,980 --> 01:08:32,660
 This is the forward kinematics function.

877
01:08:32,660 --> 01:08:42,460
 So the way that we do this--

878
01:08:42,460 --> 01:08:44,420
 normally, I mean, in the most cases,

879
01:08:44,420 --> 01:08:46,580
 the software would do all the heavy lifting for you.

880
01:08:46,580 --> 01:08:49,860
 You just need to know how to ask it.

881
01:08:49,860 --> 01:08:55,740
 It depends on how we represent positions, our choice of poses.

882
01:08:55,740 --> 01:09:00,620
 But mostly, it's the picture you already suspect here.

883
01:09:00,620 --> 01:09:09,300
 So where I've got a kinematic frame at my gripper,

884
01:09:09,300 --> 01:09:11,700
 step one is to go to the kinematic frame

885
01:09:11,700 --> 01:09:15,900
 in my second to last link using my spatial algebra.

886
01:09:15,900 --> 01:09:19,460
 And then go to my third to last link, my fourth to the last,

887
01:09:19,460 --> 01:09:21,540
 until you get all the way back to the world.

888
01:09:21,540 --> 01:09:25,060
 And you just recursively apply the spatial algebra,

889
01:09:25,060 --> 01:09:28,500
 and it'll do the work for you.

890
01:09:28,500 --> 01:09:32,380
 The only interesting thing is that the relative frame

891
01:09:32,380 --> 01:09:37,620
 between any two bodies, when you have a joint in the middle,

892
01:09:37,620 --> 01:09:45,500
 depends partly on Q. So you'll get, for instance,

893
01:09:45,500 --> 01:09:54,140
 from body one, let's say, from body one to body two,

894
01:09:54,140 --> 01:09:58,860
 relies on first saying, from the body frame,

895
01:09:58,860 --> 01:10:02,580
 where is the joint, then figuring out

896
01:10:02,580 --> 01:10:05,660
 what is the relative-- the transform

897
01:10:05,660 --> 01:10:08,300
 as a function of the joint angle,

898
01:10:08,300 --> 01:10:11,420
 and then from that joint to the parent frame.

899
01:10:11,420 --> 01:10:17,580
 So there's three transforms that will take you from your one

900
01:10:17,580 --> 01:10:21,140
 link to the parent link.

901
01:10:21,140 --> 01:10:25,420
 So this would typically be, I've got to go from body one

902
01:10:25,420 --> 01:10:31,580
 to body two, then it's going to be composed of--

903
01:10:31,580 --> 01:10:33,980
 from the-- let me call it, actually,

904
01:10:33,980 --> 01:10:35,260
 the parent and the child.

905
01:10:35,260 --> 01:10:36,660
 How about that?

906
01:10:36,660 --> 01:10:40,260
 From the parent to the child, then I'm

907
01:10:40,260 --> 01:10:43,060
 going to go from the parent to the parent joint.

908
01:10:46,540 --> 01:10:49,540
 And then I'm going to--

909
01:10:49,540 --> 01:10:51,820
 let's say it's Q7 first.

910
01:10:51,820 --> 01:10:59,180
 This is my joint, from parent joint to child joint,

911
01:10:59,180 --> 01:11:03,740
 and then from child joint to child frame.

912
01:11:03,740 --> 01:11:10,900
 And every one of those relative transforms

913
01:11:10,900 --> 01:11:14,620
 is made up of a composition, through our spatial algebra,

914
01:11:14,620 --> 01:11:16,520
 of those transforms.

915
01:11:16,520 --> 01:11:18,380
 Yes?

916
01:11:18,380 --> 01:11:22,580
 So that's my seventh joint angle on the robot,

917
01:11:22,580 --> 01:11:25,140
 but the point is really that it's just one number

918
01:11:25,140 --> 01:11:29,420
 for a revolute joint here that defines the rotation matrix,

919
01:11:29,420 --> 01:11:31,540
 if you will, that's inside here.

920
01:11:31,540 --> 01:11:33,940
 If it's a revolute joint, it's going to change the angles.

921
01:11:33,940 --> 01:11:39,380
 Now, this is not an artificial construction.

922
01:11:39,380 --> 01:11:41,580
 It's everywhere in robotics.

923
01:11:41,580 --> 01:11:43,340
 You may realize it, right?

924
01:11:43,340 --> 01:11:47,520
 But right in the robot description files,

925
01:11:47,520 --> 01:11:50,400
 if you look at the way things are defined,

926
01:11:50,400 --> 01:11:53,840
 you define first a link, like EULINK1.

927
01:11:53,840 --> 01:11:55,160
 You say where it's--

928
01:11:55,160 --> 01:11:57,440
 you say its pose, its inertial pose,

929
01:11:57,440 --> 01:12:00,720
 where is its center of mass and its moment of inertia.

930
01:12:00,720 --> 01:12:05,960
 But then you also say, what's the joint?

931
01:12:05,960 --> 01:12:10,280
 You give the position of the joint as a relative pose.

932
01:12:10,280 --> 01:12:11,320
 This is not my format.

933
01:12:11,320 --> 01:12:12,560
 This is the standard format.

934
01:12:12,560 --> 01:12:14,320
 You say, what's the child?

935
01:12:14,320 --> 01:12:17,440
 What's the parent?

936
01:12:17,440 --> 01:12:20,800
 And the fact that it's revolute lets

937
01:12:20,800 --> 01:12:22,640
 you know what this operation has to be

938
01:12:22,640 --> 01:12:25,960
 as a function of that one angle.

939
01:12:25,960 --> 01:12:28,560
 So it's just a matter of composing these transforms

940
01:12:28,560 --> 01:12:34,920
 together, and the order of those transforms

941
01:12:34,920 --> 01:12:37,320
 and the values in those transforms

942
01:12:37,320 --> 01:12:39,760
 are completely described in our robot description formats.

943
01:12:40,640 --> 01:12:43,120
 The EUL is kind of a boring one, because you're really

944
01:12:43,120 --> 01:12:47,920
 just going from the tip back to the base.

945
01:12:47,920 --> 01:12:53,120
 The Allegro hand is a slightly more interesting hand here.

946
01:12:53,120 --> 01:12:56,120
 So if you plot the kinematic tree,

947
01:12:56,120 --> 01:13:01,000
 you just plot the parent-child relationship straight

948
01:13:01,000 --> 01:13:04,320
 from the URDF that describes the robot description file that

949
01:13:04,320 --> 01:13:06,160
 describes the hand.

950
01:13:06,160 --> 01:13:08,320
 You'll see that there's a little bit of a difference

951
01:13:08,320 --> 01:13:09,120
 there, right?

952
01:13:09,120 --> 01:13:12,680
 You'll see that there's a root, like the palm of the hand.

953
01:13:12,680 --> 01:13:16,680
 And then each of those fingers has a revolute joint

954
01:13:16,680 --> 01:13:18,040
 that connects to the hand.

955
01:13:18,040 --> 01:13:20,200
 And then there's another joint that connects to that

956
01:13:20,200 --> 01:13:21,480
 and another joint that connects to that.

957
01:13:21,480 --> 01:13:24,960
 These are all revolute.

958
01:13:24,960 --> 01:13:28,800
 So if I have a red ball, maybe an apple--

959
01:13:28,800 --> 01:13:29,560
 is that an apple?

960
01:13:29,560 --> 01:13:32,720
 Yeah, an apple relative to the tip of my fingers.

961
01:13:32,720 --> 01:13:36,400
 I want to figure out where the tip of the hand.

962
01:13:36,400 --> 01:13:38,960
 Then I just apply the transforms up the tree.

963
01:13:38,960 --> 01:13:44,320
 And similarly, if I need to figure out what these two are,

964
01:13:44,320 --> 01:13:46,800
 I can go up and back down.

965
01:13:46,800 --> 01:13:51,440
 Typically, there's a lot of very clever caching that happens.

966
01:13:51,440 --> 01:13:56,320
 So you can ask questions of the kinematics many, many times.

967
01:13:56,320 --> 01:13:58,280
 And it just computes the tree once and then

968
01:13:58,280 --> 01:14:00,880
 makes it fast to ask as many questions of the kinematics

969
01:14:00,880 --> 01:14:01,680
 as you want.

970
01:14:01,680 --> 01:14:03,000
 Sorry, so I'll give you a hand.

971
01:14:03,000 --> 01:14:03,500
 Yeah?

972
01:14:03,500 --> 01:14:10,940
 [INAUDIBLE]

973
01:14:10,940 --> 01:14:12,140
 Awesome.

974
01:14:12,140 --> 01:14:16,380
 So that's a great question is, are there multiple solutions?

975
01:14:16,380 --> 01:14:21,660
 So the map from joint positions to poses is unique.

976
01:14:21,660 --> 01:14:23,580
 If you tell me what the joint angles are,

977
01:14:23,580 --> 01:14:25,300
 the robot really is in that position.

978
01:14:25,300 --> 01:14:27,140
 And the end effector is in a known position.

979
01:14:27,140 --> 01:14:30,660
 That is a one-way mapping that's unique.

980
01:14:30,660 --> 01:14:33,020
 If you ask me to put it in a pose,

981
01:14:33,020 --> 01:14:34,420
 how do I get the joint positions?

982
01:14:34,420 --> 01:14:36,020
 There could be multiple joint positions

983
01:14:36,020 --> 01:14:37,180
 that could be the same.

984
01:14:37,180 --> 01:14:39,060
 So in general, the inverse kinematics problem

985
01:14:39,060 --> 01:14:42,140
 is harder than the forward kinematics.

986
01:14:42,140 --> 01:14:44,480
 It turns out that the differential kinematics is

987
01:14:44,480 --> 01:14:46,080
 also--

988
01:14:46,080 --> 01:14:47,740
 it's a little bit easier to think about.

989
01:14:47,740 --> 01:14:50,860
 So we're going to do a lot of the work for that demo.

990
01:14:50,860 --> 01:14:54,240
 Actually, we're going to avoid solving the inverse kinematics

991
01:14:54,240 --> 01:14:54,740
 problem.

992
01:14:54,740 --> 01:14:57,900
 We're going to solve those two problems first.

993
01:14:57,900 --> 01:14:59,060
 Yeah?

994
01:14:59,060 --> 01:14:59,860
 You can ask again.

995
01:14:59,860 --> 01:15:00,360
 Yeah?

996
01:15:00,360 --> 01:15:15,800
 [INAUDIBLE]

997
01:15:15,800 --> 01:15:16,880
 You're right on.

998
01:15:16,880 --> 01:15:20,400
 So the follow-up question was, why is that useful?

999
01:15:20,400 --> 01:15:23,280
 Why is forward kinematics useful, right?

1000
01:15:23,280 --> 01:15:25,920
 Absolutely, we need to solve a version of this.

1001
01:15:25,920 --> 01:15:28,040
 But it turns out that the differential kinematics

1002
01:15:28,040 --> 01:15:33,200
 version is going to be the best solution for this first version.

1003
01:15:33,200 --> 01:15:37,400
 So basically, when the robot wakes up, I have a cue.

1004
01:15:37,400 --> 01:15:40,400
 I'm going to figure out where the end effector is now.

1005
01:15:40,400 --> 01:15:42,520
 And then if I want to move the hand

1006
01:15:42,520 --> 01:15:45,360
 in a particular trajectory, it's easier

1007
01:15:45,360 --> 01:15:48,920
 to figure out differentially how I should move my joints

1008
01:15:48,920 --> 01:15:52,920
 to follow a trajectory than to answer the question of,

1009
01:15:52,920 --> 01:15:55,440
 if I'm here, I want you to be over here from scratch.

1010
01:15:55,440 --> 01:15:56,560
 Decide how to be there.

1011
01:15:56,560 --> 01:15:59,140
 It's actually easier to have a fully defined trajectory that

1012
01:15:59,140 --> 01:16:02,240
 takes you there, because you can use the Jacobians

1013
01:16:02,240 --> 01:16:03,040
 of the kinematics.

1014
01:16:03,040 --> 01:16:04,000
 And we're going to see that.

1015
01:16:04,000 --> 01:16:06,840
 So we actually are going to do differential inverse kinematics

1016
01:16:06,840 --> 01:16:08,800
 because it's easier than the full inverse kinematics

1017
01:16:08,800 --> 01:16:09,720
 problem.

1018
01:16:09,720 --> 01:16:10,480
 Great question.

1019
01:16:10,480 --> 01:16:10,980
 Yes?

1020
01:16:10,980 --> 01:16:18,560
 [INAUDIBLE]

1021
01:16:18,560 --> 01:16:20,680
 Oh, good, good, yeah.

1022
01:16:20,680 --> 01:16:23,920
 I was using P for parent, C for child.

1023
01:16:24,520 --> 01:16:27,480
 [INAUDIBLE]

1024
01:16:27,480 --> 01:16:28,960
 Yeah, yeah, I'm going to-- yeah.

1025
01:16:28,960 --> 01:16:33,040
 So think about there's a body.

1026
01:16:33,040 --> 01:16:37,280
 This is where multicolor comes into play.

1027
01:16:37,280 --> 01:16:39,840
 I've got a parent object--

1028
01:16:39,840 --> 01:16:40,760
 parent.

1029
01:16:40,760 --> 01:16:45,480
 And it has some frame here.

1030
01:16:45,480 --> 01:16:46,600
 It's 3D in general.

1031
01:16:46,600 --> 01:16:48,600
 I'm just going to do the two.

1032
01:16:48,600 --> 01:16:49,680
 And then I've got a child.

1033
01:16:52,760 --> 01:16:57,160
 And it's got some natural coordinate frame here.

1034
01:16:57,160 --> 01:17:00,520
 But I need to do all the kinematics math.

1035
01:17:00,520 --> 01:17:02,040
 I need to find two different things.

1036
01:17:02,040 --> 01:17:06,200
 I want to define where is the joint that's connecting them

1037
01:17:06,200 --> 01:17:07,920
 relative to the parent.

1038
01:17:07,920 --> 01:17:10,160
 And then I'm going to define where is the joint that's

1039
01:17:10,160 --> 01:17:11,600
 connecting them.

1040
01:17:11,600 --> 01:17:15,480
 So I'll call this one P joint.

1041
01:17:15,480 --> 01:17:18,320
 Let me write it not right on top of everything else.

1042
01:17:18,320 --> 01:17:20,200
 P joint.

1043
01:17:20,200 --> 01:17:20,960
 What do I call it?

1044
01:17:20,960 --> 01:17:23,960
 Yeah, P joint.

1045
01:17:23,960 --> 01:17:30,360
 And then I'll call this one C joint.

1046
01:17:30,360 --> 01:17:38,560
 And so the location of the joint relative to any body

1047
01:17:38,560 --> 01:17:39,960
 is a constant.

1048
01:17:39,960 --> 01:17:42,520
 The numbers are just hidden in the description format.

1049
01:17:42,520 --> 01:17:45,920
 Similarly, the joint relative to the parent, those are constants.

1050
01:17:45,920 --> 01:17:50,320
 But the transform that goes from child joint to parent joint

1051
01:17:50,320 --> 01:17:53,040
 is a function of the current joint angle.

1052
01:17:53,040 --> 01:17:57,640
 And so for rotary joints, there's

1053
01:17:57,640 --> 01:17:59,240
 a one function that you would use

1054
01:17:59,240 --> 01:18:01,240
 to go from this to this as a function.

1055
01:18:01,240 --> 01:18:03,400
 For prismatic joints, there's a different one.

1056
01:18:03,400 --> 01:18:05,640
 For helical joints, there's a different one.

1057
01:18:05,640 --> 01:18:09,360
 And that defines that last transform that you need.

1058
01:18:09,360 --> 01:18:10,960
 And you just apply it recursively.

1059
01:18:10,960 --> 01:18:12,040
 No, thank you for asking.

1060
01:18:12,040 --> 01:18:12,540
 That's good.

1061
01:18:12,540 --> 01:18:22,340
,

1062
01:18:22,340 --> 01:18:33,060
 So when you want to call the kinematics engine in code,

1063
01:18:33,060 --> 01:18:36,820
 you can ask a multi-body plant.

1064
01:18:36,820 --> 01:18:38,280
 There's a method on multi-body plant

1065
01:18:38,280 --> 01:18:39,780
 that evaluates the kinematics.

1066
01:18:39,780 --> 01:18:41,740
 There's a bunch of methods on multi-body plant.

1067
01:18:41,740 --> 01:18:43,900
 You can get the kinematic velocities.

1068
01:18:43,900 --> 01:18:45,220
 You can do accelerations.

1069
01:18:45,220 --> 01:18:45,980
 You can do forces.

1070
01:18:45,980 --> 01:18:47,780
 You can do all these other things.

1071
01:18:47,780 --> 01:18:50,060
 The one that is exactly what we're talking about today,

1072
01:18:50,060 --> 01:18:53,020
 that computes exactly those series of transforms for you,

1073
01:18:53,020 --> 01:18:56,060
 is with proper optimizations behind the scenes.

1074
01:18:56,060 --> 01:18:57,740
 So you can call this as much as you want

1075
01:18:57,740 --> 01:19:02,940
 and everything like that, is eval body pose in world.

1076
01:19:02,940 --> 01:19:03,460
 Pretty clear.

1077
01:19:03,460 --> 01:19:06,220
 And the code says, I'm going to give you

1078
01:19:06,220 --> 01:19:09,540
 xwb for a body b in world.

1079
01:19:09,540 --> 01:19:12,820
 And you'll see that notation, the monogram notation.

1080
01:19:12,820 --> 01:19:16,580
 In fact, it was working on Drake with the dynamics team

1081
01:19:16,580 --> 01:19:19,420
 that made me change the way I talked about kinematics.

1082
01:19:19,420 --> 01:19:22,940
 And I adopted the notation when we

1083
01:19:22,940 --> 01:19:25,260
 tried to get rid of the bugs in my code, roughly.

1084
01:19:25,260 --> 01:19:30,660
 So if you just have a multi-body plant,

1085
01:19:30,660 --> 01:19:33,700
 plant.evalbody impose in world will do that.

1086
01:19:33,700 --> 01:19:36,300
 The context is what holds q.

1087
01:19:36,300 --> 01:19:38,580
 So that is a function of q.

1088
01:19:38,580 --> 01:19:39,700
 It's just this.

1089
01:19:39,700 --> 01:19:47,620
 If you want to do it in-- if you want a different system

1090
01:19:47,620 --> 01:19:51,220
 to evaluate the poses of the multi-body plant in the systems

1091
01:19:51,220 --> 01:19:54,740
 framework, you can just pull on the body poses output port.

1092
01:19:54,740 --> 01:19:57,820
 That has all the body poses available for you pre-computed.

1093
01:19:57,820 --> 01:20:02,380
 So a downstream system can just chew them up.

1094
01:20:02,380 --> 01:20:05,780
 So the other-- I mean, there's a bunch of optimizations

1095
01:20:05,780 --> 01:20:06,700
 hidden in the code.

1096
01:20:06,700 --> 01:20:09,660
 If nobody ever asks for those body poses,

1097
01:20:09,660 --> 01:20:11,980
 it only computes the things it needs to compute.

1098
01:20:11,980 --> 01:20:14,020
 So it's only when a downstream system asks you

1099
01:20:14,020 --> 01:20:15,940
 for, let's say, the camera output or something like this,

1100
01:20:15,940 --> 01:20:17,280
 then it would render the camera.

1101
01:20:17,280 --> 01:20:19,500
 But if you never ask, it doesn't render.

1102
01:20:19,500 --> 01:20:22,260
 And for body poses, it happens that almost everything

1103
01:20:22,260 --> 01:20:24,260
 you do with a plant is going to cause

1104
01:20:24,260 --> 01:20:25,540
 you to compute the kinematics.

1105
01:20:25,540 --> 01:20:27,180
 So you're probably not saving very much

1106
01:20:27,180 --> 01:20:28,540
 by not calling that one.

1107
01:20:28,540 --> 01:20:30,980
 But in general, it only computes things when it needs to.

1108
01:20:30,980 --> 01:20:35,420
 And then it caches them so you can call it many times.

1109
01:20:35,420 --> 01:20:38,140
 And again, the body poses output port,

1110
01:20:38,140 --> 01:20:39,940
 it says this is going to give you

1111
01:20:39,940 --> 01:20:43,340
 a list of xwb for all of the bodies in the plant.

1112
01:20:43,340 --> 01:20:49,020
 So that's just the mechanics of using it.

1113
01:20:49,020 --> 01:20:52,380
 All right, so I'm going to start differential kinematics.

1114
01:20:52,380 --> 01:20:56,380
 But we left time on Tuesday to finish it.

1115
01:20:56,380 --> 01:21:01,500
 And maybe I'll just set as a goal

1116
01:21:01,500 --> 01:21:04,820
 to try to make my answer to your question a little bit more

1117
01:21:04,820 --> 01:21:09,260
 complete, and we'll fill in the details after.

1118
01:21:09,260 --> 01:21:23,780
 So let's think about differential kinematics.

1119
01:21:34,780 --> 01:21:37,020
 So what I want to do is somehow say,

1120
01:21:37,020 --> 01:21:40,460
 if I make a small change to my joint angles,

1121
01:21:40,460 --> 01:21:43,540
 what's the small change that's going to result in the end

1122
01:21:43,540 --> 01:21:45,460
 effector?

1123
01:21:45,460 --> 01:21:49,820
 So let me use this variational notation here.

1124
01:21:49,820 --> 01:21:54,500
 I want to say, what's a delta in xb as a function

1125
01:21:54,500 --> 01:21:59,300
 of a small change in q?

1126
01:21:59,300 --> 01:22:05,020
 And the math we need to do that is just

1127
01:22:05,020 --> 01:22:08,460
 taking the gradient of this thing.

1128
01:22:08,460 --> 01:22:13,140
 Whatever function we've already got,

1129
01:22:13,140 --> 01:22:14,680
 if I just take the gradient of that,

1130
01:22:14,680 --> 01:22:17,780
 that's going to give me my differential relationship

1131
01:22:17,780 --> 01:22:21,220
 between a change in joint angle and a change

1132
01:22:21,220 --> 01:22:23,700
 in the end effector positions.

1133
01:22:23,700 --> 01:22:27,240
 And in every field, but certainly in robotics,

1134
01:22:27,240 --> 01:22:28,980
 that thing is called a Jacobian.

1135
01:22:28,980 --> 01:22:31,420
 In this case, it's a kinematic Jacobian.

1136
01:22:31,420 --> 01:22:34,740
 So we would often just write this as jb,

1137
01:22:34,740 --> 01:22:37,900
 remembering that it's a function of q of dq.

1138
01:22:37,900 --> 01:22:44,580
 So this is the kinematic Jacobian.

1139
01:22:53,500 --> 01:22:58,400
 Now, your question about invertibility was good.

1140
01:22:58,400 --> 01:23:01,000
 So this is still going the good way.

1141
01:23:01,000 --> 01:23:03,640
 Given a change in velocities, I can

1142
01:23:03,640 --> 01:23:06,840
 tell you what a change in pose is with no problems.

1143
01:23:06,840 --> 01:23:08,440
 And then what you're going to see

1144
01:23:08,440 --> 01:23:12,160
 is that the inverse of this may not exist,

1145
01:23:12,160 --> 01:23:14,240
 which is because there could be multiple solutions.

1146
01:23:14,240 --> 01:23:17,040
 If there's a manifold of solutions that

1147
01:23:17,040 --> 01:23:19,440
 could give me the same end effector,

1148
01:23:19,440 --> 01:23:21,980
 then the inverse operation could be opposed.

1149
01:23:21,980 --> 01:23:27,780
 The interesting question-- so we know how to represent--

1150
01:23:27,780 --> 01:23:34,340
 I think it's reasonable if q is a 7 by 1 vector, joint angles,

1151
01:23:34,340 --> 01:23:41,020
 let's say, then dq, if I want to say joint velocities--

1152
01:23:41,020 --> 01:23:43,220
 if I put it in units of time in a second--

1153
01:23:43,220 --> 01:23:44,720
 it's sort of reasonable to just say,

1154
01:23:44,720 --> 01:23:46,220
 I'm going to take the seven numbers

1155
01:23:46,220 --> 01:23:51,160
 and talk about the rotational velocity of each of my joints.

1156
01:23:51,160 --> 01:23:54,580
 So we'll call that q dot, or you'll

1157
01:23:54,580 --> 01:23:56,140
 see it written as v sometimes, which

1158
01:23:56,140 --> 01:23:58,900
 is the joint of 7 by 1 joint velocities.

1159
01:23:58,900 --> 01:24:10,660
 The interesting question is, how do we represent this?

1160
01:24:15,620 --> 01:24:19,660
 We had a bunch of different ways to represent orientations.

1161
01:24:19,660 --> 01:24:22,060
 How are we going to represent this?

1162
01:24:22,060 --> 01:24:24,560
 And I'll just give the answer, and then we'll

1163
01:24:24,560 --> 01:24:28,180
 have to continue next time.

1164
01:24:28,180 --> 01:24:33,300
 So remember, we talked about 3 by 4 matrices

1165
01:24:33,300 --> 01:24:35,340
 as a way to represent x.

1166
01:24:35,340 --> 01:24:39,740
 We talked about, if you want a vector representation,

1167
01:24:39,740 --> 01:24:44,500
 you could have x, y, z plus quaternions.

1168
01:24:44,500 --> 01:24:45,700
 And there's axis angle.

1169
01:24:45,700 --> 01:24:47,860
 There's all these different things.

1170
01:24:47,860 --> 01:24:51,380
 The derivative of this, though, there is a one true answer.

1171
01:24:51,380 --> 01:24:55,180
 We're back to everything's good again.

1172
01:24:55,180 --> 01:24:58,060
 In this case, there's a spatial velocity,

1173
01:24:58,060 --> 01:24:59,420
 which really is--

1174
01:24:59,420 --> 01:25:01,260
 there's no singularities with respect to it.

1175
01:25:01,260 --> 01:25:03,420
 It turns out just three numbers are enough,

1176
01:25:03,420 --> 01:25:05,180
 and they represent everything, and they're

1177
01:25:05,180 --> 01:25:07,060
 useful for all of our computations.

1178
01:25:07,060 --> 01:25:10,340
 So it turns out we're going to call this spatial velocity.

1179
01:25:10,340 --> 01:25:24,900
 And it's six numbers, which is going to be x dot, y dot, z

1180
01:25:24,900 --> 01:25:27,820
 dot, and then three angular velocities.

1181
01:25:35,740 --> 01:25:43,420
 So always and forever, we'll use this sort of spatial velocity.

1182
01:25:43,420 --> 01:25:47,300
 Spatial velocities have an algebra.

1183
01:25:47,300 --> 01:25:50,580
 We're going to define the same addition, multiplication

1184
01:25:50,580 --> 01:25:52,180
 operations on these.

1185
01:25:52,180 --> 01:25:54,180
 If you want to take a spatial velocity expressed

1186
01:25:54,180 --> 01:25:56,100
 in one frame, put it in another frame,

1187
01:25:56,100 --> 01:25:59,500
 we're going to grow our algebra to that, accelerations

1188
01:25:59,500 --> 01:26:01,340
 and whatnot.

1189
01:26:01,340 --> 01:26:04,420
 So I'll pick up there next Tuesday.

1190
01:26:04,420 --> 01:26:06,420
 Good.

1191
01:26:06,420 --> 01:26:09,900
 [SIDE CONVERSATION]

1192
01:26:09,900 --> 01:26:14,360
 Yeah?

1193
01:26:14,360 --> 01:26:14,860
 [INAUDIBLE]

1194
01:26:14,860 --> 01:26:18,340
 The plan, like, context versus, like, spatial context.

1195
01:26:18,340 --> 01:26:18,840
 Good.

1196
01:26:18,840 --> 01:26:19,340
 Yeah?

1197
01:26:19,340 --> 01:26:22,740
 Like, the plan context, like, the plan is, like,

1198
01:26:22,740 --> 01:26:24,340
 the world, right?

1199
01:26:24,340 --> 01:26:24,840
 Good.

1200
01:26:24,840 --> 01:26:27,300
 So we have--

1201
01:26:27,300 --> 01:26:29,860
 I made the point last time that the simulation is more

1202
01:26:29,860 --> 01:26:31,660
 than the physics engine, right?

1203
01:26:31,660 --> 01:26:33,540
 So when you have a whole diagram,

1204
01:26:33,540 --> 01:26:36,940
 one of the pieces of the diagram is the multi-body plan.

1205
01:26:36,940 --> 01:26:37,980
 There's also the scene--

1206
01:26:37,980 --> 01:26:40,740
 [INAUDIBLE]

1207
01:26:40,740 --> 01:26:43,580
 It's the physics engine.

1208
01:26:43,580 --> 01:26:44,080
 So--

1209
01:26:44,080 --> 01:26:45,820
 [INAUDIBLE]

1210
01:26:45,820 --> 01:26:46,320
 Yeah, yeah.

1211
01:26:46,320 --> 01:26:46,820
 That's fine.

1212
01:26:46,820 --> 01:26:47,940
 That's fine.

1213
01:26:47,940 --> 01:26:49,980
 So the only reason I want to make that distinction

1214
01:26:49,980 --> 01:26:52,260
 is because, like, the controller also

1215
01:26:52,260 --> 01:26:54,100
 has a model of the robot in it.

1216
01:26:54,100 --> 01:26:55,400
 There's multiple places where you

1217
01:26:55,400 --> 01:26:58,180
 might want to have a model of the robot in it, OK?

1218
01:26:58,180 --> 01:26:59,700
 And they all might have some state.

1219
01:27:02,260 --> 01:27:05,140
 So you have a context for the whole diagram.

1220
01:27:05,140 --> 01:27:06,340
 If you want to get--

1221
01:27:06,340 --> 01:27:08,580
 the plant context is just the context for that.

1222
01:27:08,580 --> 01:27:10,420
 It's just, you know, position.

1223
01:27:10,420 --> 01:27:12,180
 It's just time, state, and input.

1224
01:27:12,180 --> 01:27:12,680
 Oh, OK.

1225
01:27:12,680 --> 01:27:13,620
 Of the plant.

1226
01:27:13,620 --> 01:27:14,180
 Of the plant.

1227
01:27:14,180 --> 01:27:14,500
 Of, like, the robot.

1228
01:27:14,500 --> 01:27:15,500
 Of the multi-body plan.

1229
01:27:15,500 --> 01:27:16,220
 Yep.

1230
01:27:16,220 --> 01:27:18,260
 Of the physical simulation of the robot.

1231
01:27:18,260 --> 01:27:18,760
 OK.

1232
01:27:18,760 --> 01:27:21,460
 And then, like, the station context is, like--

1233
01:27:21,460 --> 01:27:23,220
 That will be the one that contains

1234
01:27:23,220 --> 01:27:25,460
 the context of all of the sub-diagram,

1235
01:27:25,460 --> 01:27:27,220
 the pieces of the diagram.

1236
01:27:27,220 --> 01:27:27,700
 OK.

1237
01:27:27,700 --> 01:27:29,700
 So plant context is part of station context?

1238
01:27:29,700 --> 01:27:30,180
 It is.

1239
01:27:30,180 --> 01:27:30,660
 Yep.

1240
01:27:30,660 --> 01:27:31,620
 It's actually just a--

1241
01:27:31,620 --> 01:27:33,780
 it's a pointer into the middle of a bigger--

1242
01:27:33,780 --> 01:27:34,780
 Oh, OK.

1243
01:27:34,780 --> 01:27:35,620
 OK.

1244
01:27:35,620 --> 01:27:36,120
 Good.

1245
01:27:36,120 --> 01:27:36,780
 Good, good.

1246
01:27:36,780 --> 01:27:37,460
 How's it going?

1247
01:27:37,460 --> 01:27:37,960
 Hi.

1248
01:27:37,960 --> 01:27:41,820
 I have a question in regards to, like, the undergrad versus,

1249
01:27:41,820 --> 01:27:43,500
 like, the graduate version of the class.

1250
01:27:43,500 --> 01:27:44,000
 OK.

1251
01:27:44,000 --> 01:27:44,500
 Yeah.

1252
01:27:44,500 --> 01:27:46,460
 So for context, I'm a 416.

1253
01:27:46,460 --> 01:27:46,960
 OK.

1254
01:27:46,960 --> 01:27:48,860
 And so this class doesn't necessarily, like,

1255
01:27:48,860 --> 01:27:49,860
 have any time requirements.

1256
01:27:49,860 --> 01:27:50,360
 Yep.

1257
01:27:50,360 --> 01:27:52,900
 So I'm not bounded to, like, meeting at, like, a CIM,

1258
01:27:52,900 --> 01:27:54,180
 whatever, or stuff like that.

1259
01:27:54,180 --> 01:27:55,180
 Yeah, yeah.

1260
01:27:55,180 --> 01:27:58,900
 And so I saw that the grad version is 12 units instead

1261
01:27:58,900 --> 01:27:59,380
 of 15.

1262
01:27:59,380 --> 01:28:00,380
 Yep.

1263
01:28:00,380 --> 01:28:02,380
 Is that because of the fact that the grad--

1264
01:28:02,380 --> 01:28:05,180
 like, the graduate version does not have a CIM component?

1265
01:28:05,180 --> 01:28:06,480
 Like, what's the right of the--

1266
01:28:06,480 --> 01:28:07,260
 That's exactly right.

1267
01:28:07,260 --> 01:28:07,540
 Yeah.

1268
01:28:07,540 --> 01:28:09,060
 The recitations and the work that they

1269
01:28:09,060 --> 01:28:10,980
 do in the recitations adds three more units.

1270
01:28:10,980 --> 01:28:11,700
 OK.

1271
01:28:11,700 --> 01:28:14,460
 Now, the problem sets are mostly the same

1272
01:28:14,460 --> 01:28:16,620
 with, like, a few differences, right?

1273
01:28:16,620 --> 01:28:19,660
 So, like, this week there's one more problem on the graduate.

1274
01:28:19,660 --> 01:28:21,340
 It's not always going to be more--

1275
01:28:21,340 --> 01:28:23,460
 I mean, because they're both meant to be 12 units,

1276
01:28:23,460 --> 01:28:26,840
 but we are aiming for a little bit more maturity.

1277
01:28:26,840 --> 01:28:28,820
 So we should be able to do the same work--

1278
01:28:28,820 --> 01:28:29,980
 that work in 12 hours.

1279
01:28:29,980 --> 01:28:30,820
 And we're going to--

1280
01:28:30,820 --> 01:28:33,180
 our survey questions sort of keep us honest about that,

1281
01:28:33,180 --> 01:28:34,660
 and we can scale it back and forth.

1282
01:28:34,660 --> 01:28:37,060
 So, yeah, it's designed--

1283
01:28:37,060 --> 01:28:38,760
 I mean, I think the biggest thing you lose

1284
01:28:38,760 --> 01:28:41,220
 is all the-- is, like, the super project aspect of it

1285
01:28:41,220 --> 01:28:43,060
 and the Friday recitations.

1286
01:28:43,060 --> 01:28:45,340
 So what's this aspect of the project?

1287
01:28:45,340 --> 01:28:48,740
 Just the communications staff, you know,

1288
01:28:48,740 --> 01:28:51,700
 talks you through the rhetorical argument of your project,

1289
01:28:51,700 --> 01:28:52,300
 like, set it up.

1290
01:28:52,300 --> 01:28:52,980
 How are you going to make it-- you know,

1291
01:28:52,980 --> 01:28:55,300
 what is the thing you're trying to prove or disprove?

1292
01:28:55,300 --> 01:28:57,260
 They're going to, like, help you with your project proposal,

1293
01:28:57,260 --> 01:28:58,540
 help you with the-- right?

1294
01:28:58,540 --> 01:29:01,780
 And so-- and use it as an excuse to teach you

1295
01:29:01,780 --> 01:29:03,180
 how to communicate, right?

1296
01:29:03,180 --> 01:29:05,420
 And then help you make a really good project.

1297
01:29:05,420 --> 01:29:08,100
 The technical part of the project is the same in both.

1298
01:29:08,100 --> 01:29:08,600
 OK.

1299
01:29:08,600 --> 01:29:12,380
 And I guess, like, as a follow-up question to that,

1300
01:29:12,380 --> 01:29:13,380
 for the grad--

1301
01:29:13,380 --> 01:29:15,780
 so, like, for the undergraduate one, is it still the same?

1302
01:29:15,780 --> 01:29:17,780
 Or, like, we can, like, one or two grad students?

1303
01:29:17,780 --> 01:29:18,280
 Yep.

1304
01:29:18,280 --> 01:29:18,780
 Yep.

1305
01:29:18,780 --> 01:29:19,280
 Yep.

1306
01:29:19,280 --> 01:29:20,980
 And what kind of difference in expectation

1307
01:29:20,980 --> 01:29:23,100
 is there for, like, quantity, which is the product

1308
01:29:23,100 --> 01:29:23,980
 you're dealing with?

1309
01:29:23,980 --> 01:29:25,580
 It's not about quantity.

1310
01:29:25,580 --> 01:29:27,620
 I think just we expect a little bit-- the emphasis

1311
01:29:27,620 --> 01:29:30,420
 on the project and the graduate is more on the technical part.

1312
01:29:30,420 --> 01:29:31,220
 The technical, OK.

1313
01:29:31,220 --> 01:29:31,720
 Yeah.

1314
01:29:31,720 --> 01:29:33,340
 And I try to say this carefully on the website.

1315
01:29:33,340 --> 01:29:34,420
 So read the-- you know, read the words

1316
01:29:34,420 --> 01:29:35,500
 and make sure you're happy with those words.

1317
01:29:35,500 --> 01:29:35,820
 Yeah.

1318
01:29:35,820 --> 01:29:36,100
 OK.

1319
01:29:36,100 --> 01:29:36,580
 Thank you.

1320
01:29:36,580 --> 01:29:37,080
 Cool.

1321
01:29:37,080 --> 01:29:37,660
 Appreciate it.

1322
01:29:37,660 --> 01:29:38,300
 How's it going?

1323
01:29:38,300 --> 01:29:38,800
 Hi.

1324
01:29:38,800 --> 01:29:40,100
 I was just wondering--

1325
01:29:40,100 --> 01:29:41,860
 I know, like, I'm not sure if you're

1326
01:29:41,860 --> 01:29:43,580
 going to explain this in future lectures,

1327
01:29:43,580 --> 01:29:46,820
 but you showed, like, the link structure for the kinematic.

1328
01:29:46,820 --> 01:29:47,340
 Yeah.

1329
01:29:47,340 --> 01:29:49,060
 Like, the kinematic structure of Drake.

1330
01:29:49,060 --> 01:29:51,300
 I'm just wondering if the dynamic structure is similar

1331
01:29:51,300 --> 01:29:54,060
 to that and if that, like, inhibits some models

1332
01:29:54,060 --> 01:29:56,300
 that you can use, like, in Drake.

1333
01:29:56,300 --> 01:29:59,620
 Like for example, if you had like two rotors at--

