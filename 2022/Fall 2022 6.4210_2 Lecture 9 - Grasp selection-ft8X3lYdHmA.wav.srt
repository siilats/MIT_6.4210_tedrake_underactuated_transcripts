1
00:00:00,000 --> 00:00:02,000
 [footsteps]

2
00:00:02,000 --> 00:00:04,000
 [footsteps]

3
00:00:04,000 --> 00:00:06,000
 [footsteps]

4
00:00:06,000 --> 00:00:08,000
 [footsteps]

5
00:00:08,000 --> 00:00:10,000
 [footsteps]

6
00:00:10,000 --> 00:00:12,000
 [footsteps]

7
00:00:12,000 --> 00:00:14,240
 (mumbling)

8
00:00:14,240 --> 00:00:16,560
 (footsteps)

9
00:00:16,560 --> 00:00:18,880
 (footsteps)

10
00:00:18,880 --> 00:00:21,200
 (footsteps)

11
00:00:21,200 --> 00:00:23,520
 (footsteps)

12
00:00:23,520 --> 00:00:31,100
 (door closing)

13
00:00:31,100 --> 00:00:37,360
 (mumbling)

14
00:00:37,360 --> 00:00:40,800
 (mumbling)

15
00:00:40,800 --> 00:00:43,120
 (footsteps)

16
00:00:43,120 --> 00:00:45,360
 (mumbling)

17
00:00:45,360 --> 00:00:47,680
 (footsteps)

18
00:00:47,680 --> 00:00:49,920
 (mumbling)

19
00:00:49,920 --> 00:00:52,240
 (footsteps)

20
00:00:52,240 --> 00:00:54,480
 (mumbling)

21
00:00:54,480 --> 00:00:56,800
 (footsteps)

22
00:00:56,800 --> 00:00:59,040
 (mumbling)

23
00:00:59,040 --> 00:01:01,360
 (footsteps)

24
00:01:01,360 --> 00:01:03,600
 (mumbling)

25
00:01:03,600 --> 00:01:05,920
 (footsteps)

26
00:01:05,920 --> 00:01:08,160
 (mumbling)

27
00:01:08,160 --> 00:01:10,480
 (footsteps)

28
00:01:10,480 --> 00:01:12,720
 (mumbling)

29
00:01:12,720 --> 00:01:15,040
 (footsteps)

30
00:01:15,040 --> 00:01:17,280
 (mumbling)

31
00:01:17,280 --> 00:01:19,840
 (door closing)

32
00:01:19,840 --> 00:01:22,160
 (footsteps)

33
00:01:22,160 --> 00:01:24,400
 (mumbling)

34
00:01:24,400 --> 00:01:26,720
 (footsteps)

35
00:01:26,720 --> 00:01:28,960
 (mumbling)

36
00:01:28,960 --> 00:01:31,280
 (footsteps)

37
00:01:31,280 --> 00:01:33,520
 (mumbling)

38
00:01:33,520 --> 00:01:35,840
 (footsteps)

39
00:01:35,840 --> 00:01:38,080
 (mumbling)

40
00:01:38,080 --> 00:01:40,400
 (footsteps)

41
00:01:40,400 --> 00:01:42,640
 (mumbling)

42
00:01:42,640 --> 00:01:44,960
 (footsteps)

43
00:01:44,960 --> 00:01:47,200
 (mumbling)

44
00:01:47,200 --> 00:01:49,520
 (footsteps)

45
00:01:49,520 --> 00:01:51,760
 (mumbling)

46
00:01:51,760 --> 00:01:54,080
 (footsteps)

47
00:01:54,080 --> 00:01:56,320
 (mumbling)

48
00:01:56,320 --> 00:01:58,640
 (footsteps)

49
00:01:58,640 --> 00:02:00,880
 (mumbling)

50
00:02:00,880 --> 00:02:03,200
 (footsteps)

51
00:02:03,200 --> 00:02:05,440
 (mumbling)

52
00:02:05,440 --> 00:02:07,760
 (footsteps)

53
00:02:07,760 --> 00:02:10,000
 (mumbling)

54
00:02:10,000 --> 00:02:12,320
 (footsteps)

55
00:02:12,320 --> 00:02:14,560
 (mumbling)

56
00:02:14,560 --> 00:02:16,800
 (footsteps)

57
00:02:16,800 --> 00:02:19,040
 (mumbling)

58
00:02:19,040 --> 00:02:21,360
 (footsteps)

59
00:02:21,360 --> 00:02:23,600
 (mumbling)

60
00:02:23,600 --> 00:02:25,840
 (footsteps)

61
00:02:25,840 --> 00:02:28,080
 (mumbling)

62
00:02:28,080 --> 00:02:30,320
 (footsteps)

63
00:02:30,320 --> 00:02:32,560
 (mumbling)

64
00:02:32,560 --> 00:02:34,800
 (mumbling)

65
00:02:34,800 --> 00:02:37,120
 (footsteps)

66
00:02:37,120 --> 00:02:39,360
 (mumbling)

67
00:02:39,360 --> 00:02:41,680
 (footsteps)

68
00:02:41,680 --> 00:02:43,920
 (mumbling)

69
00:02:43,920 --> 00:02:46,160
 (footsteps)

70
00:02:46,160 --> 00:02:48,400
 (mumbling)

71
00:02:48,400 --> 00:02:50,640
 (footsteps)

72
00:02:50,640 --> 00:02:52,880
 (mumbling)

73
00:02:52,880 --> 00:02:55,120
 (footsteps)

74
00:02:55,120 --> 00:02:57,360
 (mumbling)

75
00:02:57,360 --> 00:02:59,680
 (footsteps)

76
00:02:59,680 --> 00:03:01,920
 (mumbling)

77
00:03:01,920 --> 00:03:04,240
 (footsteps)

78
00:03:04,240 --> 00:03:06,480
 (mumbling)

79
00:03:06,480 --> 00:03:08,720
 (footsteps)

80
00:03:08,720 --> 00:03:10,960
 (mumbling)

81
00:03:10,960 --> 00:03:13,200
 (footsteps)

82
00:03:13,200 --> 00:03:15,440
 (mumbling)

83
00:03:15,440 --> 00:03:17,680
 (footsteps)

84
00:03:17,680 --> 00:03:19,920
 (mumbling)

85
00:03:19,920 --> 00:03:22,240
 (footsteps)

86
00:03:22,240 --> 00:03:23,360
 (mumbling)

87
00:03:23,360 --> 00:03:24,720
 - Okay, let's do it.

88
00:03:24,720 --> 00:03:29,840
 This is day two of our mini series

89
00:03:29,840 --> 00:03:33,040
 on going from one object in a bin

90
00:03:33,040 --> 00:03:37,400
 to a cluttered scene with a lot of the complexity

91
00:03:37,400 --> 00:03:39,440
 that goes along with that.

92
00:03:39,440 --> 00:03:40,920
 Just to make sure I say that,

93
00:03:40,920 --> 00:03:44,120
 I think once we get this far into the course,

94
00:03:44,120 --> 00:03:47,040
 I've learned over the years that people,

95
00:03:47,040 --> 00:03:48,800
 most people appreciate me just sort of saying,

96
00:03:48,800 --> 00:03:51,800
 okay, what have we done, what are we doing,

97
00:03:51,800 --> 00:03:53,440
 why are we doing this today?

98
00:03:53,440 --> 00:03:55,440
 So I'll try to put these up most of the time

99
00:03:55,440 --> 00:03:59,720
 if I remember it, but right, we started with saying,

100
00:03:59,720 --> 00:04:01,120
 first in the basic pick and place,

101
00:04:01,120 --> 00:04:03,880
 we said we had a single known object

102
00:04:03,880 --> 00:04:05,640
 and we even assumed we knew its pose.

103
00:04:05,640 --> 00:04:07,640
 Someone told us a priori its pose.

104
00:04:07,640 --> 00:04:10,360
 When we did the geometric perception,

105
00:04:10,360 --> 00:04:12,280
 we went to a single known object.

106
00:04:12,280 --> 00:04:15,240
 We still had the model, but we had to estimate its pose.

107
00:04:15,240 --> 00:04:17,640
 And this week we're trying to do many diverse

108
00:04:17,640 --> 00:04:20,560
 and unknown objects with unknown poses.

109
00:04:20,560 --> 00:04:22,880
 The task is relatively simple though.

110
00:04:22,880 --> 00:04:26,400
 It's just gonna be clearing the bin kind of task.

111
00:04:26,400 --> 00:04:29,160
 And that looked like this.

112
00:04:29,160 --> 00:04:31,400
 You know, it turns out I looked at this afterwards

113
00:04:31,400 --> 00:04:35,080
 and actually that's the Spock duck is right there.

114
00:04:35,080 --> 00:04:36,640
 That's the one right there.

115
00:04:36,640 --> 00:04:39,280
 You'll see it's gonna get picked up in a second here.

116
00:04:39,280 --> 00:04:40,120
 There it is, see?

117
00:04:40,120 --> 00:04:43,040
 But sometimes it goes, gets thrown.

118
00:04:43,040 --> 00:04:44,520
 And actually I wanna watch this

119
00:04:44,520 --> 00:04:45,960
 for just a second longer this time

120
00:04:45,960 --> 00:04:50,600
 because this video shows actually some of the subtleties.

121
00:04:50,600 --> 00:04:51,840
 To get the ones out of the bin,

122
00:04:51,840 --> 00:04:53,920
 it has to, you see that out of the corners,

123
00:04:53,920 --> 00:04:57,160
 it had to go in and sort of nudge things out of the side

124
00:04:57,160 --> 00:05:00,480
 because it wasn't able to find a stable grasp.

125
00:05:00,480 --> 00:05:03,120
 And then at some point it tried a few times,

126
00:05:03,120 --> 00:05:05,360
 gave up and started switching to the other side.

127
00:05:05,360 --> 00:05:06,720
 We actually got to the point

128
00:05:06,720 --> 00:05:09,920
 where we'd almost always clear all the bins.

129
00:05:09,920 --> 00:05:13,280
 And we'll do a little bit of that with you guys too,

130
00:05:13,280 --> 00:05:16,040
 talking about the sort of task level reasoning

131
00:05:16,040 --> 00:05:17,360
 and how you'd program that.

132
00:05:17,360 --> 00:05:22,360
 But we're gonna be today thinking about the easy picks,

133
00:05:22,360 --> 00:05:25,520
 the ones where we can just go in and grab

134
00:05:25,520 --> 00:05:27,840
 and don't have to do anything more sophisticated.

135
00:05:27,840 --> 00:05:34,720
 So I started this section talking a little bit

136
00:05:34,720 --> 00:05:38,760
 about contact mechanics and even contact simulation.

137
00:05:38,760 --> 00:05:43,400
 And partly because our tools are very optimized for it,

138
00:05:43,400 --> 00:05:46,840
 we're gonna start off by just dumping a bunch of things

139
00:05:46,840 --> 00:05:49,320
 in the bin, we'll dump a bunch of red bricks

140
00:05:49,320 --> 00:05:54,320
 or cheese boxes or mustard bottles into the bin.

141
00:05:54,320 --> 00:06:00,520
 And my preference would be to actually design an algorithm

142
00:06:00,520 --> 00:06:02,480
 that would solve a small optimization problem

143
00:06:02,480 --> 00:06:03,840
 to find a static equilibrium.

144
00:06:03,840 --> 00:06:06,880
 And I have a little bit of comments about that in the notes.

145
00:06:06,880 --> 00:06:09,040
 But that actually is a very hard problem to solve.

146
00:06:09,040 --> 00:06:10,240
 And it's a much easier problem

147
00:06:10,240 --> 00:06:13,520
 to just let the contact simulation engine do its work

148
00:06:13,520 --> 00:06:15,880
 and initialize things out of penetration

149
00:06:15,880 --> 00:06:19,800
 and just let physics bring you into a nice static equilibrium.

150
00:06:19,800 --> 00:06:22,000
 So we talked a little bit about that.

151
00:06:22,000 --> 00:06:24,560
 But I use that also as a chance to introduce a few

152
00:06:24,560 --> 00:06:27,980
 of the concepts from contact mechanics.

153
00:06:27,980 --> 00:06:31,720
 Most notably, normal forces,

154
00:06:31,720 --> 00:06:35,320
 the contact frame and the friction cone.

155
00:06:35,320 --> 00:06:37,920
 And we're gonna build on that today.

156
00:06:37,920 --> 00:06:40,720
 We're gonna use the friction cone idea a lot

157
00:06:40,720 --> 00:06:44,040
 'cause we wanna think about what makes a good grasp.

158
00:06:44,040 --> 00:06:46,140
 Where should I go in and grasp in the bin?

159
00:06:46,140 --> 00:06:50,240
 And there's a few different views of this.

160
00:06:50,240 --> 00:06:52,880
 It's changed dramatically over the last 10 years.

161
00:06:52,880 --> 00:06:54,920
 But for many, many years, there was a sort

162
00:06:54,920 --> 00:06:56,060
 of the classic view.

163
00:06:56,060 --> 00:06:58,920
 In fact, I would say a lot of manipulation research

164
00:06:58,920 --> 00:07:02,560
 in robotics fell under the umbrella

165
00:07:02,560 --> 00:07:06,280
 of sort of grasp analysis or grasp optimization.

166
00:07:06,280 --> 00:07:09,220
 If you look in the handbook of robotics under grasping,

167
00:07:09,220 --> 00:07:13,160
 you find a couple nice chapters that go through.

168
00:07:13,160 --> 00:07:16,880
 I'll give you a sense of what they talk about.

169
00:07:16,880 --> 00:07:21,600
 But actually, this isn't as big of a topic anymore

170
00:07:21,600 --> 00:07:24,560
 because most of these analyses assumed a lot

171
00:07:24,560 --> 00:07:25,400
 about the object.

172
00:07:25,400 --> 00:07:27,780
 You assumed a lot of knowledge about the object.

173
00:07:27,780 --> 00:07:31,160
 And in practice, when you're getting your information

174
00:07:31,160 --> 00:07:33,120
 from a camera, you don't have enough information

175
00:07:33,120 --> 00:07:35,400
 maybe to do some of these analyses

176
00:07:35,400 --> 00:07:37,280
 that are so clean and so nice,

177
00:07:37,280 --> 00:07:41,160
 but maybe not as well-suited to the wild west

178
00:07:41,160 --> 00:07:43,040
 of a robot in the home.

179
00:07:43,040 --> 00:07:48,360
 And when the deep learning revolution started,

180
00:07:48,360 --> 00:07:51,240
 oops, I put that in the wrong place,

181
00:07:51,240 --> 00:07:53,480
 but we'll come back to that.

182
00:07:53,480 --> 00:07:55,320
 When the deep learning revolution started,

183
00:07:55,320 --> 00:07:57,660
 a different approach showed up,

184
00:07:57,660 --> 00:07:58,920
 which was we're basically going

185
00:07:58,920 --> 00:08:02,280
 to just train a deep net to basically tell me

186
00:08:02,280 --> 00:08:03,600
 where's a good place to grasp.

187
00:08:03,600 --> 00:08:05,920
 Given a point cloud coming in,

188
00:08:05,920 --> 00:08:08,800
 or an image coming in even, tell me where I should grasp.

189
00:08:08,800 --> 00:08:14,120
 And there were a handful of approaches

190
00:08:14,120 --> 00:08:16,040
 that came out around the same time that did that.

191
00:08:16,040 --> 00:08:19,680
 One was by Rob Platt and his students.

192
00:08:19,680 --> 00:08:20,880
 There was DexNet.

193
00:08:20,880 --> 00:08:23,600
 There's DexNet 4 or 5 by now,

194
00:08:23,600 --> 00:08:26,480
 but that was 2.0 was the one that was doing

195
00:08:26,480 --> 00:08:30,160
 a lot of these grasp analysis and training grasp methods.

196
00:08:30,160 --> 00:08:32,960
 There were a handful of approaches like this.

197
00:08:32,960 --> 00:08:36,000
 But they changed the picture,

198
00:08:36,000 --> 00:08:37,160
 they changed the landscape

199
00:08:37,160 --> 00:08:39,160
 of what we were seeing our robots do

200
00:08:39,160 --> 00:08:43,140
 into this sort of, instead of one known object

201
00:08:43,140 --> 00:08:46,180
 that you're trying to reason about very carefully,

202
00:08:46,180 --> 00:08:48,200
 this was the first time we started seeing videos

203
00:08:48,200 --> 00:08:49,320
 that looked more like this,

204
00:08:49,320 --> 00:08:52,000
 where the manipulation research was dump a pile of stuff,

205
00:08:52,000 --> 00:08:55,260
 random stuff, and start operating on it.

206
00:08:55,260 --> 00:08:58,000
 And that was, I think, a really important shift

207
00:08:58,000 --> 00:08:58,840
 for the field to make,

208
00:08:58,840 --> 00:09:03,840
 was to just go to the sloppy manipulation side of the world.

209
00:09:03,840 --> 00:09:11,780
 So this is roughly what I've already shown you,

210
00:09:11,780 --> 00:09:14,520
 but this was maybe the first version of that.

211
00:09:14,520 --> 00:09:20,240
 These methods took a completely deep learning approach.

212
00:09:20,240 --> 00:09:22,700
 They just trained often in simulation

213
00:09:22,700 --> 00:09:24,480
 to try to find what was a good grasp

214
00:09:24,480 --> 00:09:28,840
 and just, or use some simple heuristics to do it.

215
00:09:28,840 --> 00:09:34,180
 You'll also see it in picking sort of versions of this.

216
00:09:34,180 --> 00:09:36,440
 This is from Alberto's group

217
00:09:36,440 --> 00:09:39,680
 and part of their Amazon picking challenge.

218
00:09:39,680 --> 00:09:41,120
 They had very much the same kind of thing.

219
00:09:41,120 --> 00:09:44,340
 They had a deep network that was taking RGB images in,

220
00:09:44,340 --> 00:09:46,080
 saying these are the places on the image

221
00:09:46,080 --> 00:09:47,200
 where these are the hotspots

222
00:09:47,200 --> 00:09:49,360
 where you should probably try to pick.

223
00:09:49,360 --> 00:09:51,000
 And then a relatively simple algorithm

224
00:09:51,000 --> 00:09:52,440
 that would just go down and with suction,

225
00:09:52,440 --> 00:09:55,000
 it was very simple to just go down and suck there.

226
00:09:55,000 --> 00:10:01,440
 Okay, but this is around the same time,

227
00:10:01,440 --> 00:10:04,840
 this is Lucas, who was a student in my group.

228
00:10:04,840 --> 00:10:07,760
 We were kind of, we're saying,

229
00:10:07,760 --> 00:10:09,080
 do people, do we really,

230
00:10:09,080 --> 00:10:10,480
 that's a great problem formulation,

231
00:10:10,480 --> 00:10:12,240
 but do you actually need deep learning for that?

232
00:10:12,240 --> 00:10:15,240
 I mean, there's pretty simple strategies

233
00:10:15,240 --> 00:10:17,620
 that would do pretty much the same thing.

234
00:10:17,620 --> 00:10:19,760
 So as almost a thought experiment,

235
00:10:20,980 --> 00:10:24,940
 Lucas coded up roughly what we're gonna talk about today,

236
00:10:24,940 --> 00:10:27,060
 which is a no deep learning,

237
00:10:27,060 --> 00:10:30,140
 just geometric reasoning version of the problem.

238
00:10:30,140 --> 00:10:33,100
 And it turns out as things have evolved,

239
00:10:33,100 --> 00:10:35,860
 people often combine these two worlds.

240
00:10:35,860 --> 00:10:38,540
 So they'll use, for instance, the geometric reasoning

241
00:10:38,540 --> 00:10:42,260
 with some perfect point clouds or something in simulation

242
00:10:42,260 --> 00:10:45,700
 to give a score for the deep learning system to learn.

243
00:10:45,700 --> 00:10:49,020
 But I think you'd be surprised how far you can go

244
00:10:49,020 --> 00:10:52,280
 with just the pure geometric version of this.

245
00:10:52,280 --> 00:10:58,940
 Okay, so I wanna start digging in

246
00:10:58,940 --> 00:11:01,040
 and talk about what makes a good grasp.

247
00:11:01,040 --> 00:11:05,140
 What do we learn from our older grasp analysis,

248
00:11:05,140 --> 00:11:08,720
 and what can we take into the unknown object case?

249
00:11:08,720 --> 00:11:13,100
 And what can we, ultimately, we'll talk about

250
00:11:13,100 --> 00:11:14,800
 what do we do, how do we do it with deep learning.

251
00:11:14,800 --> 00:11:15,640
 So.

252
00:11:15,640 --> 00:11:17,800
 (tapping)

253
00:11:17,800 --> 00:11:35,920
 Okay, so the, there's of course layers of thinking

254
00:11:35,920 --> 00:11:39,880
 about the complexity of grasping.

255
00:11:39,880 --> 00:11:43,000
 The simplest case would be if you have,

256
00:11:43,000 --> 00:11:45,440
 just from kinematics alone,

257
00:11:45,440 --> 00:11:48,600
 the ability to know that you've got a good grasp.

258
00:11:48,600 --> 00:11:51,220
 So let's say a kinematic only analysis.

259
00:11:51,220 --> 00:11:59,520
 And the extreme form of this is a notion called form closure.

260
00:11:59,520 --> 00:12:10,720
 Okay, so it starts with an object of some interesting shape.

261
00:12:10,720 --> 00:12:12,280
 I guess I'm making a Z.

262
00:12:12,280 --> 00:12:14,440
 I didn't really know where that was going when I started.

263
00:12:14,440 --> 00:12:15,880
 But, okay.

264
00:12:15,880 --> 00:12:23,120
 And then, in the case of a dexterous hand,

265
00:12:23,120 --> 00:12:25,460
 I might summarize the case of my dexterous hand

266
00:12:25,460 --> 00:12:29,000
 holding this Z-like object with the location

267
00:12:29,000 --> 00:12:31,840
 of a handful of points, my fingers, okay.

268
00:12:31,840 --> 00:12:33,480
 And like we talked about last time,

269
00:12:33,480 --> 00:12:37,160
 most of our analysis is actually summarized

270
00:12:37,160 --> 00:12:39,960
 through point models of contact.

271
00:12:39,960 --> 00:12:43,920
 Okay, so I'll assume I have some fingers here.

272
00:12:43,920 --> 00:12:45,480
 In a purely kinematic analysis,

273
00:12:45,480 --> 00:12:48,260
 I'm not actually gonna think about forces at all.

274
00:12:48,260 --> 00:12:50,160
 I can ask a simple question,

275
00:12:50,160 --> 00:12:53,880
 which is have I completely caged the grasp?

276
00:12:53,880 --> 00:12:56,480
 Okay, and I'll make it formal in a second.

277
00:12:56,480 --> 00:12:58,440
 But the kinematic question would be,

278
00:12:58,440 --> 00:13:02,440
 is there any perturbation to the pose of the object

279
00:13:02,440 --> 00:13:07,240
 that I could make such that I could move

280
00:13:07,240 --> 00:13:09,100
 without causing a violation

281
00:13:09,100 --> 00:13:11,760
 of my non-penetration constraints?

282
00:13:11,760 --> 00:13:14,760
 If it is the case that no matter what I moved,

283
00:13:14,760 --> 00:13:16,920
 what I tried to do to move,

284
00:13:16,920 --> 00:13:19,080
 I would always be going into penetration

285
00:13:19,080 --> 00:13:21,880
 on one of the fingers, then I've completely caged,

286
00:13:21,880 --> 00:13:24,040
 I mean, imagine if I had fingers everywhere,

287
00:13:24,040 --> 00:13:27,440
 then it's trivial, but there's like nowhere I could move.

288
00:13:27,440 --> 00:13:29,200
 I've completely pegged this thing down.

289
00:13:29,200 --> 00:13:31,880
 There's no direction that it can move.

290
00:13:31,880 --> 00:13:34,680
 Okay, that would be called a form closure.

291
00:13:34,680 --> 00:13:36,200
 Form closure.

292
00:13:36,200 --> 00:13:38,380
 So, let me make it more precise.

293
00:13:38,380 --> 00:13:41,220
 (fingers tapping)

294
00:13:41,220 --> 00:13:48,420
 Yeah, so let me say it this way.

295
00:13:48,420 --> 00:13:52,740
 If the fingers are held fixed,

296
00:13:52,740 --> 00:13:59,720
 this is all in the object coordinate, right?

297
00:13:59,720 --> 00:14:03,740
 Or relative to the object, my fingers are fixed,

298
00:14:03,740 --> 00:14:06,980
 then the object cannot move in any direction.

299
00:14:06,980 --> 00:14:09,820
 (fingers tapping)

300
00:14:09,820 --> 00:14:25,140
 This is a very conservative notion of a successful grasp.

301
00:14:25,140 --> 00:14:29,140
 It requires me to have completely enveloped the object,

302
00:14:29,140 --> 00:14:32,680
 but this is maybe the simplest to understand.

303
00:14:34,940 --> 00:14:37,180
 And the way that you can write those conditions down,

304
00:14:37,180 --> 00:14:39,080
 we already have the language for, right?

305
00:14:39,080 --> 00:14:41,340
 So if we were to use, for instance,

306
00:14:41,340 --> 00:14:46,180
 our sine distance function, which is a function of Q, right?

307
00:14:46,180 --> 00:14:48,480
 So this would be, let's say, the sine distance

308
00:14:48,480 --> 00:14:55,340
 of the i-th contact.

309
00:15:01,340 --> 00:15:05,260
 Then you can actually check the conditions for form closure

310
00:15:05,260 --> 00:15:10,260
 by just analyzing the variations of that sine distance,

311
00:15:10,260 --> 00:15:12,180
 basically.

312
00:15:12,180 --> 00:15:14,380
 So the way it's typically written

313
00:15:14,380 --> 00:15:16,180
 in the form closure world would be,

314
00:15:16,180 --> 00:15:20,620
 let's distinguish, separate Q into Q object

315
00:15:20,620 --> 00:15:24,140
 and Q robot.

316
00:15:24,140 --> 00:15:25,640
 We'll split those two in half.

317
00:15:28,580 --> 00:15:31,380
 And I'll assume that when Q robot is fixed,

318
00:15:31,380 --> 00:15:33,040
 what I'd like to ask is,

319
00:15:33,040 --> 00:15:39,820
 if I were to make a change to Q,

320
00:15:39,820 --> 00:15:44,820
 so let me write this as Q object and Q robot now.

321
00:15:44,820 --> 00:15:49,100
 It's just a more verbose way to write that same thing,

322
00:15:49,100 --> 00:15:50,620
 just to make that distinction.

323
00:15:50,620 --> 00:15:57,140
 The question is, can I find a Q, a delta Q object

324
00:15:57,140 --> 00:16:02,140
 such that for all i, Q object plus delta Q object,

325
00:16:02,140 --> 00:16:16,460
 Q robot greater than 0

326
00:16:16,460 --> 00:16:25,960
 implies that delta Q 0 must be 0?

327
00:16:26,900 --> 00:16:28,900
 That's kind of a funny way to write it.

328
00:16:28,900 --> 00:16:31,400
 But the standard thing would be to say,

329
00:16:31,400 --> 00:16:37,220
 if my goal is to have non-penetration,

330
00:16:37,220 --> 00:16:46,140
 if my sine distances have to be greater than or equal to 0

331
00:16:46,140 --> 00:16:49,020
 at all the fingers, and my robot doesn't move,

332
00:16:49,020 --> 00:16:55,060
 if I say I'm going to consider all possible delta Qs,

333
00:16:56,060 --> 00:16:59,220
 which satisfy this non-penetration constraint,

334
00:16:59,220 --> 00:17:04,460
 if basically the only delta Q that satisfies that is 0,

335
00:17:04,460 --> 00:17:05,900
 then I've got a form closure.

336
00:17:05,900 --> 00:17:07,340
 That's the formal definition.

337
00:17:07,340 --> 00:17:11,600
 It's an enveloping bracing contact.

338
00:17:11,600 --> 00:17:14,620
 It's actually fun to think about it.

339
00:17:14,620 --> 00:17:17,340
 And if you go to the handbook of robotics kind of text,

340
00:17:17,340 --> 00:17:19,900
 you'll see all kinds of interesting cases.

341
00:17:19,900 --> 00:17:22,780
 So it's written like this.

342
00:17:22,780 --> 00:17:25,020
 This suggests that taking the gradients,

343
00:17:25,020 --> 00:17:26,140
 would be the right way to look at it,

344
00:17:26,140 --> 00:17:30,860
 to look at the gradient of these functions.

345
00:17:30,860 --> 00:17:33,620
 And if the gradient is full rank,

346
00:17:33,620 --> 00:17:36,020
 you would expect that sort of a condition would hold.

347
00:17:36,020 --> 00:17:38,660
 And that's true, but it's actually richer than that,

348
00:17:38,660 --> 00:17:41,380
 because you can find some interesting situations.

349
00:17:41,380 --> 00:17:43,900
 The classic one is the hourglass here,

350
00:17:43,900 --> 00:17:48,540
 where if I have an object that looks like this,

351
00:17:48,540 --> 00:17:53,400
 and I have fingers that are here, for instance,

352
00:17:54,400 --> 00:17:58,280
 it's possible to have a form closure,

353
00:17:58,280 --> 00:18:01,720
 but you only can see that it's a form closure

354
00:18:01,720 --> 00:18:04,140
 if you consider the curvature of the surface.

355
00:18:04,140 --> 00:18:06,920
 So this is a case where you actually have to take

356
00:18:06,920 --> 00:18:08,520
 second derivatives of those constraints

357
00:18:08,520 --> 00:18:09,440
 in order to see it.

358
00:18:09,440 --> 00:18:12,360
 Okay, so that's the sort of definition.

359
00:18:12,360 --> 00:18:14,420
 The definition is less important to me

360
00:18:14,420 --> 00:18:15,840
 that you understand than the basic concept

361
00:18:15,840 --> 00:18:18,840
 of a completely caged, this thing can't go anywhere

362
00:18:18,840 --> 00:18:21,840
 because I put my fingers rock solid, the object can't move.

363
00:18:22,480 --> 00:18:25,880
 Okay, but that's not gonna get us

364
00:18:25,880 --> 00:18:26,920
 where we wanna be here, right?

365
00:18:26,920 --> 00:18:28,200
 'Cause that would require you to somehow

366
00:18:28,200 --> 00:18:31,160
 get under the object completely.

367
00:18:31,160 --> 00:18:32,160
 That's not what's happening here.

368
00:18:32,160 --> 00:18:34,080
 We're coming in from above, we're making a grasp,

369
00:18:34,080 --> 00:18:38,360
 and we wanna instead think about a less conservative version

370
00:18:38,360 --> 00:18:40,120
 of stable grasping.

371
00:18:40,120 --> 00:18:44,520
 So let's loosen up a little bit

372
00:18:44,520 --> 00:18:47,680
 and think about static analysis next.

373
00:18:47,680 --> 00:18:50,600
 So we're gonna, you could think about this

374
00:18:50,600 --> 00:18:53,520
 as basically the limit where I've said

375
00:18:53,520 --> 00:18:59,960
 the fingers have to do the work without friction helping.

376
00:18:59,960 --> 00:19:02,520
 If the frictionless case,

377
00:19:02,520 --> 00:19:04,960
 this thing is still guaranteed to be stable.

378
00:19:04,960 --> 00:19:06,680
 But if I go to full statics analysis

379
00:19:06,680 --> 00:19:08,600
 and I think about friction cones,

380
00:19:08,600 --> 00:19:11,460
 then I can loosen my requirements and just say,

381
00:19:11,460 --> 00:19:15,220
 as long as the friction cone is getting the job done,

382
00:19:15,220 --> 00:19:17,480
 the contacts with the help of friction,

383
00:19:17,480 --> 00:19:20,380
 then I can still call myself a stable grasp, okay?

384
00:19:21,380 --> 00:19:24,500
 So we're gonna go from form closure to force closure,

385
00:19:24,500 --> 00:19:25,340
 if you guys have heard that,

386
00:19:25,340 --> 00:19:30,280
 but let me do it through the path of contact wrenches.

387
00:19:30,280 --> 00:19:37,640
 So this is gonna be a statics analysis.

388
00:19:37,640 --> 00:19:49,660
 Do you understand when I say that, right?

389
00:19:49,660 --> 00:19:53,060
 So there's kinematics, there's dynamics,

390
00:19:53,060 --> 00:19:54,500
 which is F equals MA,

391
00:19:54,500 --> 00:19:57,940
 and you have large accelerations or whatever.

392
00:19:57,940 --> 00:20:00,300
 And there's statics, which is somehow in between,

393
00:20:00,300 --> 00:20:02,420
 which you do think about forces,

394
00:20:02,420 --> 00:20:04,060
 but you assume your accelerations are zero.

395
00:20:04,060 --> 00:20:08,040
 You're looking for static equilibrium kind of conditions.

396
00:20:08,040 --> 00:20:10,620
 So we could go to full dynamics.

397
00:20:10,620 --> 00:20:12,180
 In fact, we should go to full dynamics,

398
00:20:12,180 --> 00:20:16,200
 but we have a nice stepping stone here to go through statics.

399
00:20:19,480 --> 00:20:21,140
 Okay, so we're gonna think about,

400
00:20:21,140 --> 00:20:25,660
 if I now have point contacts with friction cones,

401
00:20:25,660 --> 00:20:29,300
 what can I say about the total stability,

402
00:20:29,300 --> 00:20:32,800
 robustness of the grasp I've got myself?

403
00:20:32,800 --> 00:20:34,220
 To do that, I wanna go through

404
00:20:34,220 --> 00:20:36,860
 the slightly more general form of the friction cone,

405
00:20:36,860 --> 00:20:38,860
 which is the contact wrench, okay?

406
00:20:38,860 --> 00:20:45,060
 You remember your spatial velocity.

407
00:20:45,060 --> 00:20:47,780
 We already talked about one important spatial quantity,

408
00:20:47,780 --> 00:20:49,060
 the spatial velocity.

409
00:20:49,060 --> 00:20:55,600
 These things in general have components for rotational,

410
00:20:55,600 --> 00:20:59,340
 you know, angular momentum, angular velocity in this case,

411
00:20:59,340 --> 00:21:04,340
 as well as the translational,

412
00:21:04,340 --> 00:21:09,760
 and an algebra that goes with it, right?

413
00:21:09,760 --> 00:21:15,680
 Well, today we're gonna use the spatial forces, okay?

414
00:21:15,680 --> 00:21:16,520
 So now we have,

415
00:21:16,520 --> 00:21:26,660
 and it's notation heavy again,

416
00:21:26,660 --> 00:21:32,020
 but this one, I'm tempted to just do this

417
00:21:32,020 --> 00:21:34,300
 and say that you're good,

418
00:21:34,300 --> 00:21:36,140
 but you don't have forces relative,

419
00:21:36,140 --> 00:21:38,340
 you know, in a relative coordinate system.

420
00:21:38,340 --> 00:21:41,580
 You do have forces that are applied at a certain point.

421
00:21:41,580 --> 00:21:43,420
 So in order to distinguish it from that,

422
00:21:43,420 --> 00:21:47,080
 the monogram notation uses this notation,

423
00:21:47,080 --> 00:21:48,320
 which I'll spell out here,

424
00:21:48,320 --> 00:21:52,520
 which is force on body A

425
00:21:52,520 --> 00:21:55,560
 applied at,

426
00:21:55,560 --> 00:22:02,040
 applied at P,

427
00:22:02,040 --> 00:22:06,000
 and then expressed in C.

428
00:22:06,580 --> 00:22:09,320
 (marker tapping)

429
00:22:09,320 --> 00:22:14,700
 Okay.

430
00:22:14,700 --> 00:22:19,140
 What's important is that it has an algebra,

431
00:22:19,140 --> 00:22:22,700
 and it has six components, once again.

432
00:22:22,700 --> 00:22:27,140
 It has a torsion, you know, a torque, a moment,

433
00:22:27,140 --> 00:22:30,640
 all in the same world,

434
00:22:30,640 --> 00:22:33,360
 and it has the translational force.

435
00:22:33,860 --> 00:22:36,600
 (marker tapping)

436
00:22:36,600 --> 00:22:39,960
 Right, so in 3D, it's a six by one vector.

437
00:22:39,960 --> 00:22:52,380
 All of these spatial vectors have similar algebras, right?

438
00:22:52,380 --> 00:22:55,460
 So for instance, if I wanna change the expressed in frame,

439
00:22:55,460 --> 00:22:57,140
 I can do that with a rotation matrix.

440
00:22:57,140 --> 00:22:59,380
 That's the common operator on that.

441
00:23:01,040 --> 00:23:05,480
 The way I change the point that it's applied to

442
00:23:05,480 --> 00:23:09,440
 is a pretty simple thing,

443
00:23:09,440 --> 00:23:12,480
 which I hope is kind of familiar.

444
00:23:12,480 --> 00:23:20,840
 So if I had a force being applied to a body here,

445
00:23:20,840 --> 00:23:22,700
 and I wanted to instead summarize it

446
00:23:22,700 --> 00:23:25,780
 as a force being applied here,

447
00:23:28,040 --> 00:23:31,500
 so I wanted to change, if this was P, and this was Q,

448
00:23:31,500 --> 00:23:37,360
 and I wanted to change and write F applied to body A at Q,

449
00:23:37,360 --> 00:23:42,980
 how can I write that as a function

450
00:23:42,980 --> 00:23:44,880
 of the force applied at P?

451
00:23:44,880 --> 00:23:50,940
 I don't expect you to answer,

452
00:23:50,940 --> 00:23:53,300
 but I give you a minute to think for a second.

453
00:23:53,300 --> 00:23:56,040
 (marker tapping)

454
00:23:56,040 --> 00:24:04,560
 Probably gonna involve a vector, the vector P to Q, right?

455
00:24:04,560 --> 00:24:13,760
 This is P, Q, like that.

456
00:24:22,720 --> 00:24:25,360
 The forces, if I apply a force here,

457
00:24:25,360 --> 00:24:28,480
 the forces, I could have applied them anywhere,

458
00:24:28,480 --> 00:24:30,920
 the X, Y, Z positions, right?

459
00:24:30,920 --> 00:24:33,800
 Those are just the same.

460
00:24:33,800 --> 00:24:36,800
 So if I break this down in my coordinates here,

461
00:24:36,800 --> 00:24:41,800
 the forces that are here are just little f, A, P, yeah.

462
00:24:41,800 --> 00:24:45,400
 This is the same.

463
00:24:45,400 --> 00:24:51,200
 But if I apply a force here that had zero torque,

464
00:24:51,200 --> 00:24:54,360
 for instance, then up here, it looks like a force,

465
00:24:54,360 --> 00:24:56,520
 but it also provides a torque.

466
00:24:56,520 --> 00:25:00,280
 And that torque is gonna be just the cross product, right?

467
00:25:00,280 --> 00:25:02,400
 So the cross product of this with this

468
00:25:02,400 --> 00:25:05,200
 is gonna be the torque.

469
00:25:05,200 --> 00:25:09,000
 I could summarize the same force as a force plus torque here

470
00:25:09,000 --> 00:25:11,360
 as I could summarize it with just a force here.

471
00:25:11,360 --> 00:25:17,320
 And that's just our basic cross product force computation.

472
00:25:19,460 --> 00:25:23,980
 So just to get it right, I get tau A, P,

473
00:25:23,980 --> 00:25:31,000
 plus from Q to P, cross f, A, P, looks like that.

474
00:25:31,000 --> 00:25:38,980
 Okay, I think I got my signs right.

475
00:25:38,980 --> 00:25:45,800
 That's an important point.

476
00:25:45,800 --> 00:25:49,780
 If you don't love statics, that's okay.

477
00:25:49,780 --> 00:25:52,760
 But just to say, any force that I'm applying

478
00:25:52,760 --> 00:25:56,840
 anywhere on the body, a spatial force,

479
00:25:56,840 --> 00:25:58,400
 I can summarize that as if I was,

480
00:25:58,400 --> 00:26:02,560
 I can apply exactly the equivalent force on the body

481
00:26:02,560 --> 00:26:03,760
 at a different point.

482
00:26:03,760 --> 00:26:07,080
 You know, I could have applied it here

483
00:26:07,080 --> 00:26:10,280
 with a different torque and force as I applied here,

484
00:26:10,280 --> 00:26:12,840
 and it would have exactly the same effect on the body.

485
00:26:12,840 --> 00:26:13,880
 Right?

486
00:26:13,880 --> 00:26:17,340
 And in particular, when I sum all of them up,

487
00:26:17,340 --> 00:26:19,280
 their total contribution, I could summarize

488
00:26:19,280 --> 00:26:21,640
 their total contribution of many forces

489
00:26:21,640 --> 00:26:25,140
 as a single force and moment at a particular point.

490
00:26:25,140 --> 00:26:32,640
 I could just put them into the same coordinate system

491
00:26:32,640 --> 00:26:33,660
 and then just add them together.

492
00:26:33,660 --> 00:26:35,320
 You can add these forces together.

493
00:26:35,320 --> 00:26:36,660
 That's part of the algebra.

494
00:26:42,440 --> 00:26:47,720
 Okay, so let's think about how to think

495
00:26:47,720 --> 00:26:49,280
 about our friction cone.

496
00:26:49,280 --> 00:26:50,480
 Any questions about that?

497
00:26:50,480 --> 00:27:00,360
 Let's think about how to reason about different friction

498
00:27:00,360 --> 00:27:02,800
 cones and different robustness, now

499
00:27:02,800 --> 00:27:07,440
 that we have that basic language of spatial forces,

500
00:27:07,440 --> 00:27:09,600
 and we're reminded there's probably a cross product

501
00:27:09,600 --> 00:27:10,100
 involved.

502
00:27:11,040 --> 00:27:14,680
 By the way, this cross product shows up

503
00:27:14,680 --> 00:27:18,040
 in the transformations of spatial velocity, too.

504
00:27:18,040 --> 00:27:22,240
 I heard that maybe we didn't get that through on the problem

505
00:27:22,240 --> 00:27:25,000
 set, that a lot of people got that one wrong on the problem

506
00:27:25,000 --> 00:27:29,200
 set, that people didn't use the cross product thing.

507
00:27:29,200 --> 00:27:31,760
 So we'll probably post a little-- that one

508
00:27:31,760 --> 00:27:33,280
 was-- we'll post a little summary

509
00:27:33,280 --> 00:27:35,560
 of what's the right answer to make sure people get it.

510
00:27:35,560 --> 00:27:38,400
 But yeah, these cross products are

511
00:27:38,400 --> 00:27:43,640
 standard fare in spatial notations,

512
00:27:43,640 --> 00:27:48,200
 whenever you're mixing rotations with translations.

513
00:27:48,200 --> 00:27:58,000
 OK, so well, let's even start with a familiar case.

514
00:27:58,000 --> 00:28:00,800
 We talked about-- remember that example

515
00:28:00,800 --> 00:28:04,480
 where we said the box was on the ramp,

516
00:28:04,480 --> 00:28:07,120
 and I had a box with a couple little feet in it,

517
00:28:07,120 --> 00:28:10,560
 so that I knew exactly where the contact forces were.

518
00:28:10,560 --> 00:28:15,160
 Box with mass m, and we said we had friction cones

519
00:28:15,160 --> 00:28:16,160
 that looked like this.

520
00:28:16,160 --> 00:28:24,640
 And then we had a mass-- a force of gravity

521
00:28:24,640 --> 00:28:26,400
 applied at the center of mass like this.

522
00:28:26,400 --> 00:28:33,000
 You guys remember that notation, right?

523
00:28:33,000 --> 00:28:36,240
 The normal force was here.

524
00:28:36,240 --> 00:28:39,840
 The friction force was being applied possibly

525
00:28:39,840 --> 00:28:42,800
 in these directions, and the constraint

526
00:28:42,800 --> 00:28:46,560
 from Coulomb friction was that the magnitude of the friction

527
00:28:46,560 --> 00:28:48,880
 force is scaled by the magnitude of the normal force.

528
00:28:48,880 --> 00:28:56,200
 So the question about whether this thing

529
00:28:56,200 --> 00:28:58,640
 can be in static equilibrium could

530
00:28:58,640 --> 00:29:04,240
 be written as, can I find such that mg, which I've

531
00:29:04,240 --> 00:29:11,880
 written in a spatial force would actually be 0 torque and mg.

532
00:29:11,880 --> 00:29:17,440
 This would be applied at the center of mass, for instance.

533
00:29:17,440 --> 00:29:20,840
 So I said force applied to A at the center of mass.

534
00:29:20,840 --> 00:29:22,400
 We'll call it this.

535
00:29:22,400 --> 00:29:25,760
 Can I find an equal and opposite set

536
00:29:25,760 --> 00:29:30,440
 of forces at the contacts that would sum up and equal this?

537
00:29:30,440 --> 00:29:33,000
 So maybe as an optimization problem, say,

538
00:29:33,000 --> 00:29:38,440
 can I find the forces at the contact points

539
00:29:38,440 --> 00:29:49,360
 i such that the sum of the contacts i equals mg,

540
00:29:49,360 --> 00:29:51,080
 and the torques in general, too?

541
00:29:51,080 --> 00:29:54,520
 [WRITING ON BOARD]

542
00:29:54,520 --> 00:30:10,000
 I'm trying to find a balance between these things.

543
00:30:10,000 --> 00:30:12,080
 And it turns out that the geometry of making

544
00:30:12,080 --> 00:30:18,080
 these sums match, that the summing forces is easy.

545
00:30:18,080 --> 00:30:22,000
 Summing friction cones also turns out to be easy.

546
00:30:22,000 --> 00:30:26,280
 It turns out that if I wanted to find these forces subject

547
00:30:26,280 --> 00:30:35,560
 to the F of Ci inside the friction cone-- I

548
00:30:35,560 --> 00:30:37,920
 don't know if I said that well enough.

549
00:30:37,920 --> 00:30:39,360
 This thing becomes non-zero because

550
00:30:39,360 --> 00:30:41,480
 of the coordinate transform.

551
00:30:41,480 --> 00:30:44,000
 But if you want to say, is there a force that's

552
00:30:44,000 --> 00:30:46,680
 inside the friction cone that will resist this,

553
00:30:46,680 --> 00:30:50,040
 you could write that as a very simple optimization problem.

554
00:30:50,040 --> 00:30:53,600
 Find me some forces subject to their constraints

555
00:30:53,600 --> 00:30:54,640
 so that the sums match.

556
00:30:54,640 --> 00:30:59,000
 But I also was trying to say last time,

557
00:30:59,000 --> 00:31:02,440
 there's a beautiful geometric picture of this.

558
00:31:02,440 --> 00:31:08,360
 We said if that vector lands inside the friction cone,

559
00:31:08,360 --> 00:31:10,320
 then there's a static equilibrium.

560
00:31:10,320 --> 00:31:12,320
 And if it doesn't land inside the friction cone,

561
00:31:12,320 --> 00:31:13,000
 then there's not.

562
00:31:15,560 --> 00:31:17,520
 So I want to talk you through the slightly more

563
00:31:17,520 --> 00:31:19,400
 general version of that now.

564
00:31:19,400 --> 00:31:21,080
 Do people remember that statement?

565
00:31:21,080 --> 00:31:24,360
 And do you grok that statement?

566
00:31:24,360 --> 00:31:34,040
 Or should we-- if your task is to find a force that

567
00:31:34,040 --> 00:31:38,440
 has to live inside this cone, that the sum of these forces

568
00:31:38,440 --> 00:31:43,080
 has to be equal and opposite to this,

569
00:31:43,080 --> 00:31:46,840
 there's a geometry to that.

570
00:31:46,840 --> 00:31:52,560
 So you can add the sum of forces is sort

571
00:31:52,560 --> 00:31:54,640
 of the element-wise version of it.

572
00:31:54,640 --> 00:31:58,520
 But I can also say the sum of some sets

573
00:31:58,520 --> 00:32:00,440
 and ask if the sum of those sets,

574
00:32:00,440 --> 00:32:04,680
 if this vector is in the element of the sum of those sets.

575
00:32:04,680 --> 00:32:08,160
 OK, that's called the Minkowski sum in this case.

576
00:32:08,160 --> 00:32:09,960
 There's something called the Minkowski sum.

577
00:32:09,960 --> 00:32:13,400
 [TAPPING]

578
00:32:13,400 --> 00:32:23,600
 If you don't know Minkowski sum, it's fine.

579
00:32:23,600 --> 00:32:24,840
 I just want you to get the intuition.

580
00:32:24,840 --> 00:32:26,460
 But if you knew the Minkowski sum,

581
00:32:26,460 --> 00:32:31,480
 it's super useful to know how general this idea is.

582
00:32:31,480 --> 00:32:35,360
 There is a notion of, given this friction cone and this friction

583
00:32:35,360 --> 00:32:39,400
 cone, their locations in space and the basic operations

584
00:32:39,400 --> 00:32:43,320
 of the spatial operators, I can tell you

585
00:32:43,320 --> 00:32:50,440
 exactly which forces and moments I can resist at this point.

586
00:32:50,440 --> 00:32:52,920
 And the Minkowski sum of these two, if they're in line,

587
00:32:52,920 --> 00:32:57,880
 is actually just going to look like a vector like this.

588
00:32:57,880 --> 00:33:02,120
 And if the negative of this is not inside that,

589
00:33:02,120 --> 00:33:04,640
 then I'm not going to be able to resist it.

590
00:33:05,600 --> 00:33:08,520
 [TAPPING]

591
00:33:08,520 --> 00:33:16,400
 The Minkowski sum says a vector is in the Minkowski sum.

592
00:33:16,400 --> 00:33:20,000
 If I can take one element out of this vector

593
00:33:20,000 --> 00:33:22,600
 and add it with any element out of this vector

594
00:33:22,600 --> 00:33:24,720
 and get the vector I want.

595
00:33:24,720 --> 00:33:29,540
 OK, it's just a notion of set sum.

596
00:33:29,540 --> 00:33:33,560
 And the Minkowski sum allows us to summarize the entire friction

597
00:33:33,560 --> 00:33:37,720
 cone into a contact wrench set.

598
00:33:37,720 --> 00:33:44,600
 So this thing here is a contact wrench cone or set.

599
00:33:44,600 --> 00:33:53,400
 And it's a beautiful object.

600
00:33:53,400 --> 00:33:57,200
 In particular, because even for very complicated bodies

601
00:33:57,200 --> 00:33:59,120
 and very complicated friction interactions,

602
00:33:59,120 --> 00:34:03,240
 if you know the points and you know mu friction,

603
00:34:03,240 --> 00:34:07,640
 then actually this thing is still a convex set.

604
00:34:07,640 --> 00:34:11,520
 Given convex cones for your friction in known positions,

605
00:34:11,520 --> 00:34:16,360
 this is still actually a really nice object to work with.

606
00:34:16,360 --> 00:34:19,740
 So we've lifted the question of will this block slide

607
00:34:19,740 --> 00:34:24,040
 into a bigger question saying, does the force of gravity

608
00:34:24,040 --> 00:34:27,000
 live inside the contact wrench set?

609
00:34:27,000 --> 00:34:27,500
 OK.

610
00:34:27,500 --> 00:34:30,940
 [WRITING ON BOARD]

611
00:34:30,940 --> 00:34:46,460
 I feel I didn't say that super well, so please ask questions.

612
00:34:46,460 --> 00:34:46,960
 Yeah?

613
00:34:46,960 --> 00:34:50,260
 Would it be possible to step through an example of what

614
00:34:50,260 --> 00:34:52,580
 it would look like to add those two cones together?

615
00:34:52,580 --> 00:34:53,980
 Yeah, yeah, yeah.

616
00:34:53,980 --> 00:34:54,460
 OK.

617
00:34:54,460 --> 00:34:57,100
 So the question is, can I step through an example

618
00:34:57,100 --> 00:34:58,540
 of adding those two cones together?

619
00:34:58,540 --> 00:35:07,100
 The problem is in 2D on the board,

620
00:35:07,100 --> 00:35:10,020
 it's almost always trivial when you have unbounded sets.

621
00:35:10,020 --> 00:35:11,860
 But let me try.

622
00:35:11,860 --> 00:35:13,820
 Let me try to convince you that it's trivial,

623
00:35:13,820 --> 00:35:18,180
 and then maybe I can find a bounded set version of it.

624
00:35:18,180 --> 00:35:21,020
 But let's try.

625
00:35:21,020 --> 00:35:31,740
 So let's say I had a box, and I had a friction cone here,

626
00:35:31,740 --> 00:35:34,180
 and a friction cone-- I'll do the red one over here.

627
00:35:34,180 --> 00:35:39,460
 OK.

628
00:35:39,460 --> 00:35:41,660
 And let's just ignore rotations for now.

629
00:35:41,660 --> 00:35:43,580
 Let's just say ignore rotations.

630
00:35:43,580 --> 00:35:49,220
 This is because I'm making an example on the spot,

631
00:35:49,220 --> 00:35:52,060
 and I don't know how to draw torques out of the board.

632
00:35:52,060 --> 00:35:56,060
 Although the picture is actually really good.

633
00:35:56,060 --> 00:36:00,620
 All right, so we're 2D, and we're going to ignore rotations.

634
00:36:00,620 --> 00:36:05,940
 Then the question of what is the Minkowski sum--

635
00:36:05,940 --> 00:36:08,780
 if I wanted to take in, say, what forces can I resist

636
00:36:08,780 --> 00:36:11,380
 with those two frictional contacts?

637
00:36:11,380 --> 00:36:17,020
 Then the Minkowski sum of these two sets-- well, first of all,

638
00:36:17,020 --> 00:36:19,860
 because the forces just translate,

639
00:36:19,860 --> 00:36:23,780
 I could move them to the same coordinate frame

640
00:36:23,780 --> 00:36:25,020
 with no extra operations.

641
00:36:25,020 --> 00:36:26,520
 I'm just going to move this over,

642
00:36:26,520 --> 00:36:30,240
 because the forces didn't depend on the position.

643
00:36:30,240 --> 00:36:33,220
 Only the moments depended on the position.

644
00:36:33,220 --> 00:36:40,340
 And now if I ask if these two sets-- if I add those two sets

645
00:36:40,340 --> 00:36:45,060
 together in the Minkowski sense, meaning for any vector,

646
00:36:45,060 --> 00:36:48,300
 can I find a vector that's in-- one vector in this set

647
00:36:48,300 --> 00:36:50,820
 and one vector in this set that describes,

648
00:36:50,820 --> 00:36:55,100
 let's say, this vector, then the way

649
00:36:55,100 --> 00:36:56,660
 to think about the Minkowski sums

650
00:36:56,660 --> 00:37:04,220
 is to take any one set and drag the other set along with it.

651
00:37:04,220 --> 00:37:06,540
 So you're going to convolve the other sets.

652
00:37:06,540 --> 00:37:09,620
 You're going to draw, like, OK, I've got a point here,

653
00:37:09,620 --> 00:37:11,900
 but I also have a point here.

654
00:37:11,900 --> 00:37:14,260
 Like if I chose this point in the blue set,

655
00:37:14,260 --> 00:37:17,460
 I can still choose any of these points in the next set.

656
00:37:17,460 --> 00:37:21,260
 OK, so it's the shadow that gets pulled out

657
00:37:21,260 --> 00:37:25,460
 when you drag the second set across all points

658
00:37:25,460 --> 00:37:27,140
 of the first set.

659
00:37:27,140 --> 00:37:29,940
 Those are the forces that are admissible,

660
00:37:29,940 --> 00:37:32,620
 given those two friction cones.

661
00:37:32,620 --> 00:37:37,180
 And I think it's always trivial in 2D,

662
00:37:37,180 --> 00:37:39,380
 because I can get any force.

663
00:37:39,380 --> 00:37:41,900
 As long as I have a non-zero friction cone,

664
00:37:41,900 --> 00:37:43,520
 even if they're not lined up, I think

665
00:37:43,520 --> 00:37:45,140
 I could resist any force.

666
00:37:45,140 --> 00:37:48,460
 Because this is because they're infinite.

667
00:37:48,460 --> 00:37:50,220
 So basically, you could take your brick

668
00:37:50,220 --> 00:37:52,340
 and you could just squeeze the heck out of it

669
00:37:52,340 --> 00:37:53,500
 and resist any force.

670
00:37:53,500 --> 00:37:57,180
 There's no force you couldn't in this simple analysis.

671
00:37:57,180 --> 00:38:00,180
 If you allowed orientation changes,

672
00:38:00,180 --> 00:38:03,060
 if then, for instance, this, the way I've drawn it, actually,

673
00:38:03,060 --> 00:38:06,540
 if I allowed orientations, this would be susceptible to torques

674
00:38:06,540 --> 00:38:11,820
 like this, because both these forces are trying to resist

675
00:38:11,820 --> 00:38:14,060
 motion in this direction.

676
00:38:14,060 --> 00:38:15,840
 And these forces are trying to resist

677
00:38:15,840 --> 00:38:17,920
 motion in the same direction.

678
00:38:17,920 --> 00:38:19,780
 If you apply the torque like this,

679
00:38:19,780 --> 00:38:25,300
 my fingers wouldn't be able to stop you without moving.

680
00:38:25,300 --> 00:38:28,260
 So you'd actually be able to break free of me like this.

681
00:38:28,260 --> 00:38:31,180
 And what shape would that be?

682
00:38:31,180 --> 00:38:32,420
 What shape would that be?

683
00:38:32,420 --> 00:38:34,260
 The result in--

684
00:38:34,260 --> 00:38:37,220
 So it turns out-- so because the relationship

685
00:38:37,220 --> 00:38:39,300
 with forces in the Cartesian frame,

686
00:38:39,300 --> 00:38:42,900
 if I wanted to put them into the frame of the origin,

687
00:38:42,900 --> 00:38:46,580
 then I would get-- see?

688
00:38:46,580 --> 00:38:49,100
 My forces here for the cross product here

689
00:38:49,100 --> 00:38:50,740
 would be resisting things like this.

690
00:38:50,740 --> 00:38:53,820
 So that would be the vector either coming out of the board

691
00:38:53,820 --> 00:38:55,460
 or into the board.

692
00:38:55,460 --> 00:38:56,860
 There's a sign that matters here.

693
00:38:56,860 --> 00:38:59,100
 So I have a cross product like that.

694
00:38:59,100 --> 00:39:02,380
 But basically, both of these are going to put a vector--

695
00:39:02,380 --> 00:39:03,660
 let's call it out of the board.

696
00:39:03,660 --> 00:39:07,100
 And if I'm off by a sign, I apologize.

697
00:39:07,100 --> 00:39:08,480
 Both of these are going to give me

698
00:39:08,480 --> 00:39:11,380
 a cross product that's pointing out of the board.

699
00:39:11,380 --> 00:39:13,380
 So the torque that's pointing into the board--

700
00:39:13,380 --> 00:39:13,980
 I got it right.

701
00:39:13,980 --> 00:39:14,700
 I got it right.

702
00:39:14,700 --> 00:39:15,200
 Yeah.

703
00:39:15,200 --> 00:39:16,380
 Thank you.

704
00:39:16,380 --> 00:39:18,100
 The torque that's pointing into the board,

705
00:39:18,100 --> 00:39:19,660
 I would not be able to resist.

706
00:39:19,660 --> 00:39:23,000
 Because the Cartesian-- or the Minkowski sum of the two

707
00:39:23,000 --> 00:39:25,220
 vectors that are coming out of the board

708
00:39:25,220 --> 00:39:27,740
 cannot resist the vector going into the board.

709
00:39:27,740 --> 00:39:31,620
 I knew 2D is easier.

710
00:39:31,620 --> 00:39:32,120
 Yeah?

711
00:39:32,120 --> 00:39:35,860
 But that's a good question.

712
00:39:35,860 --> 00:39:37,700
 And I hope I said that OK.

713
00:39:37,700 --> 00:39:38,200
 Yes?

714
00:39:38,200 --> 00:39:41,180
 Yes?

715
00:39:41,180 --> 00:39:42,640
 This is totally directional.

716
00:39:42,640 --> 00:39:44,120
 We're talking about infinite force.

717
00:39:44,120 --> 00:39:45,360
 [INAUDIBLE]

718
00:39:45,360 --> 00:39:46,000
 Yes, great.

719
00:39:46,000 --> 00:39:49,760
 So these analysis, when I'm thinking about it as a cone,

720
00:39:49,760 --> 00:39:53,160
 so far, we're thinking about unlimited amounts of force

721
00:39:53,160 --> 00:39:54,560
 being applied.

722
00:39:54,560 --> 00:39:55,160
 Yeah.

723
00:39:55,160 --> 00:39:56,960
 There's a more sophisticated version of it,

724
00:39:56,960 --> 00:39:59,160
 where you could even have torque limits in your hand.

725
00:39:59,160 --> 00:40:01,360
 So that would imply a force limit here.

726
00:40:01,360 --> 00:40:04,040
 It would be a bounded cone.

727
00:40:04,040 --> 00:40:04,840
 OK.

728
00:40:04,840 --> 00:40:07,240
 We can do that with Jacobians and the like.

729
00:40:07,240 --> 00:40:09,980
 That's OK.

730
00:40:09,980 --> 00:40:11,980
 But there's really this beautiful geometry

731
00:40:11,980 --> 00:40:14,340
 of reasoning about all possible forces

732
00:40:14,340 --> 00:40:17,300
 that I could get out of a set of frictional contacts.

733
00:40:17,300 --> 00:40:21,580
 Now, what makes a good grasp?

734
00:40:21,580 --> 00:40:24,220
 Sorry to have taken that a little longer than I meant.

735
00:40:24,220 --> 00:40:26,820
 But what makes a good grasp?

736
00:40:26,820 --> 00:40:31,220
 What makes a good grasp is that you have a large contact wrench

737
00:40:31,220 --> 00:40:36,140
 cone, that when I put all of my frictional contacts together,

738
00:40:36,140 --> 00:40:40,900
 you're able to resist all of the possible disturbances

739
00:40:40,900 --> 00:40:43,640
 that I might have.

740
00:40:43,640 --> 00:40:47,820
 So in general, maybe I don't even know the mass of this.

741
00:40:47,820 --> 00:40:49,620
 So no matter what the mass is, I want

742
00:40:49,620 --> 00:40:52,300
 to be able to resist the force of gravity.

743
00:40:52,300 --> 00:40:55,540
 So that would mean that I'd need to have a contact wrench

744
00:40:55,540 --> 00:40:59,340
 cone that could resist arbitrary forces

745
00:40:59,340 --> 00:41:01,780
 in the vertical direction.

746
00:41:01,780 --> 00:41:04,540
 Maybe I think there's some guy that

747
00:41:04,540 --> 00:41:08,780
 comes by every once in a while and applies--

748
00:41:08,780 --> 00:41:12,780
 or forces torques in the y-axis.

749
00:41:12,780 --> 00:41:16,460
 I've got an adversary that walks into lab every Tuesday at 3

750
00:41:16,460 --> 00:41:19,620
 and applies torques around the y-axis.

751
00:41:19,620 --> 00:41:21,820
 In which case, I'd want my contact wrench cone

752
00:41:21,820 --> 00:41:25,220
 to be robust in that direction.

753
00:41:25,220 --> 00:41:28,340
 If your contact wrench cone contains

754
00:41:28,340 --> 00:41:31,400
 all possible forces and moments, then you've

755
00:41:31,400 --> 00:41:33,300
 achieved force closure.

756
00:41:33,300 --> 00:41:34,960
 That's the definition of force closure.

757
00:41:34,960 --> 00:41:45,060
 And as you can see from this simple example,

758
00:41:45,060 --> 00:41:46,820
 that it is possible.

759
00:41:46,820 --> 00:41:48,140
 It's not even that hard.

760
00:41:48,140 --> 00:41:50,780
 If you have enough fingers, in six degrees of freedom,

761
00:41:50,780 --> 00:41:55,620
 you need a handful of fingers and a lot of friction, maybe.

762
00:41:55,620 --> 00:42:11,860
 But force closure, if I can resist arbitrary spatial

763
00:42:11,860 --> 00:42:14,580
 forces.

764
00:42:14,580 --> 00:42:16,740
 Spatial forces are also called wrenches.

765
00:42:16,740 --> 00:42:22,500
 This object that is the staffed torque and force

766
00:42:22,500 --> 00:42:27,340
 is a spatial force or a wrench.

767
00:42:27,340 --> 00:42:29,220
 OK, so that's a beautiful idea.

768
00:42:29,220 --> 00:42:30,460
 Yes, please.

769
00:42:30,460 --> 00:42:32,940
 Do you need to go to any possible force

770
00:42:32,940 --> 00:42:35,060
 or forces that are behind?

771
00:42:35,060 --> 00:42:38,220
 So force closure is conservative.

772
00:42:38,220 --> 00:42:41,700
 It says you must be able to resist all possible forces.

773
00:42:41,700 --> 00:42:44,740
 If you are not able to achieve such a force closure grasp,

774
00:42:44,740 --> 00:42:47,560
 or if you have torque limits or other things on your robot,

775
00:42:47,560 --> 00:42:49,940
 then you might not be able to ask for pure force closure.

776
00:42:49,940 --> 00:42:52,460
 You might say, let me restrict my attention

777
00:42:52,460 --> 00:42:53,660
 to the forces that I think are actually

778
00:42:53,660 --> 00:42:55,260
 going to happen in this scenario.

779
00:42:55,260 --> 00:43:01,820
 Good.

780
00:43:01,820 --> 00:43:05,020
 So I hope that the high level message at least comes through

781
00:43:05,020 --> 00:43:08,060
 is that there's this contact wrench object.

782
00:43:08,060 --> 00:43:10,060
 And there's actually a beautiful geometry of it.

783
00:43:10,060 --> 00:43:12,940
 If you want to get into the optimization of contact forces,

784
00:43:12,940 --> 00:43:17,140
 there's a beautiful geometry through the Minkowski sum.

785
00:43:17,140 --> 00:43:19,300
 But there's actually also a very important lesson.

786
00:43:19,300 --> 00:43:22,340
 Actually, this picture is not so bad for telling that lesson.

787
00:43:22,340 --> 00:43:25,660
 One of the strongest lessons from this

788
00:43:25,660 --> 00:43:30,660
 is that if you want to be robust, it's pretty effective--

789
00:43:30,660 --> 00:43:32,620
 let me make it not a box.

790
00:43:32,620 --> 00:43:39,620
 Let me make it a slightly more interesting object--

791
00:43:39,620 --> 00:43:44,220
 that if I were to pick places where I could possibly

792
00:43:44,220 --> 00:43:55,300
 make contact, all things equal, if you

793
00:43:55,300 --> 00:43:58,580
 want to have a big contact wrench,

794
00:43:58,580 --> 00:44:09,460
 it's really good to choose points that are collinear

795
00:44:09,460 --> 00:44:13,340
 and pointing at each other.

796
00:44:13,340 --> 00:44:18,180
 So if I were to pick this set instead of this set,

797
00:44:18,180 --> 00:44:27,500
 these are called collinear antipodal points.

798
00:44:27,500 --> 00:44:30,900
 Antipodal because the normals associated with those points

799
00:44:30,900 --> 00:44:38,100
 are pointing the normal here and the normal here

800
00:44:38,100 --> 00:44:42,540
 are pointing like opposite poles.

801
00:44:42,540 --> 00:44:43,040
 OK?

802
00:44:43,040 --> 00:44:43,960
 And they're lined up.

803
00:44:43,960 --> 00:44:50,780
 You can write this analysis in general,

804
00:44:50,780 --> 00:44:54,980
 but this analysis tells us that all other things equal,

805
00:44:54,980 --> 00:44:57,860
 try to pick your points directly across from each other.

806
00:44:57,860 --> 00:45:00,780
 And not in arbitrary-- this is a directly across from each other,

807
00:45:00,780 --> 00:45:06,260
 but its normals might be pointing not at each other.

808
00:45:06,260 --> 00:45:08,180
 Ideally, you get your friction cones

809
00:45:08,180 --> 00:45:09,700
 pointing right at each other.

810
00:45:09,700 --> 00:45:12,060
 And that's a very robust grasp if you

811
00:45:12,060 --> 00:45:15,580
 get two points of contact, try to pick them like that.

812
00:45:15,580 --> 00:45:16,580
 Yes?

813
00:45:16,580 --> 00:45:18,060
 What point is that?

814
00:45:18,060 --> 00:45:20,060
 Because I thought just now you said

815
00:45:20,060 --> 00:45:24,060
 that it would drag across the whole shape,

816
00:45:24,060 --> 00:45:27,060
 and so wouldn't it go into the 2D space

817
00:45:27,060 --> 00:45:30,060
 or just come into the plane no matter what orientation

818
00:45:30,060 --> 00:45:32,060
 they are?

819
00:45:32,060 --> 00:45:32,560
 Yes.

820
00:45:32,560 --> 00:45:36,500
 So I think it's 2D proved to be too simple.

821
00:45:36,500 --> 00:45:40,460
 I mean, because I think even if there's no rotations,

822
00:45:40,460 --> 00:45:45,580
 then you're going to resist any translational force.

823
00:45:45,580 --> 00:45:48,140
 If you lined up, then you would be

824
00:45:48,140 --> 00:45:51,700
 able to also resist any torques.

825
00:45:51,700 --> 00:45:53,780
 But in this situation, you were not able to.

826
00:45:53,780 --> 00:45:55,320
 So I guess with orientation, it is OK.

827
00:45:55,320 --> 00:45:57,580
 This example is enough to see why it's better

828
00:45:57,580 --> 00:45:59,560
 to be like this than like this.

829
00:45:59,560 --> 00:46:02,820
 And the reason is because when they're like this,

830
00:46:02,820 --> 00:46:06,460
 those two are contributing opposite signs in the torque,

831
00:46:06,460 --> 00:46:08,080
 whereas this one, they're contributing

832
00:46:08,080 --> 00:46:09,500
 the same sign in the torque.

833
00:46:09,500 --> 00:46:11,840
 They're both torquing in the same direction around that.

834
00:46:11,840 --> 00:46:15,340
 There is some point in the body about which they contribute

835
00:46:15,340 --> 00:46:17,060
 the same sign torque.

836
00:46:17,060 --> 00:46:18,740
 It doesn't have to be the center of mass.

837
00:46:18,740 --> 00:46:20,420
 As long as there's some point on the body

838
00:46:20,420 --> 00:46:22,000
 where they contribute the same torque,

839
00:46:22,000 --> 00:46:24,020
 then you're susceptible to somebody

840
00:46:24,020 --> 00:46:25,980
 coming and applying a torque to you.

841
00:46:25,980 --> 00:46:34,620
 OK, so I think a very reasonable thing

842
00:46:34,620 --> 00:46:37,380
 to do if you want to pick up Spock the duck,

843
00:46:37,380 --> 00:46:44,300
 then is to take this important lesson from grasp analysis.

844
00:46:44,300 --> 00:46:47,060
 But that can be applied with very little knowledge

845
00:46:47,060 --> 00:46:49,040
 of the object.

846
00:46:49,040 --> 00:46:54,300
 If I want to prove that the center of mass

847
00:46:54,300 --> 00:46:57,900
 and the gravitational vector is inside a cone,

848
00:46:57,900 --> 00:46:59,820
 that requires knowledge of the center of mass.

849
00:46:59,820 --> 00:47:03,860
 That requires knowledge of the object in some sense.

850
00:47:03,860 --> 00:47:06,960
 But if I don't know that, that as a good heuristic,

851
00:47:06,960 --> 00:47:10,800
 I'm going to look for antipodal collinear points.

852
00:47:10,800 --> 00:47:12,740
 And what we're going to try to do next

853
00:47:12,740 --> 00:47:15,420
 is say if you just look at a point cloud,

854
00:47:15,420 --> 00:47:18,100
 you have no notion of what's an object, what's not an object,

855
00:47:18,100 --> 00:47:19,620
 how much they weigh.

856
00:47:19,620 --> 00:47:22,020
 But you just try to find places on the object

857
00:47:22,020 --> 00:47:24,620
 where you can get good antipodal grasps.

858
00:47:24,620 --> 00:47:26,500
 And that's a pretty darn good heuristic

859
00:47:26,500 --> 00:47:28,260
 for getting a good stable grasp.

860
00:47:28,260 --> 00:47:29,540
 And we'll see how far it goes.

861
00:47:29,540 --> 00:47:30,040
 Yeah?

862
00:47:30,040 --> 00:47:44,700
 [INAUDIBLE]

863
00:47:44,700 --> 00:47:45,900
 Oh, I see your question.

864
00:47:45,900 --> 00:47:53,420
 Well, let me make sure I understand.

865
00:47:53,420 --> 00:47:56,580
 So you're saying I picked some strange points,

866
00:47:56,580 --> 00:48:00,220
 but then I'll kind of turn my hand so that they are lined up?

867
00:48:00,220 --> 00:48:10,820
 [INAUDIBLE]

868
00:48:10,820 --> 00:48:11,500
 Good.

869
00:48:11,500 --> 00:48:14,100
 So this is not about the current force you're exerting.

870
00:48:14,100 --> 00:48:16,820
 This is about the normal of the geometry,

871
00:48:16,820 --> 00:48:21,940
 which sets limits on what forces you could possibly exert.

872
00:48:21,940 --> 00:48:23,400
 So this is the shape of the object.

873
00:48:23,400 --> 00:48:27,140
 This is not my current choice of grasping strategy-- of force.

874
00:48:27,140 --> 00:48:27,640
 Yeah?

875
00:48:27,640 --> 00:48:35,260
 OK, so let's step through-- well,

876
00:48:35,260 --> 00:48:37,760
 the next thing I'm going to do is I'm going to step through.

877
00:48:37,760 --> 00:48:38,740
 We're going to go from our point cloud.

878
00:48:38,740 --> 00:48:40,420
 We're going to figure out how to estimate some normals.

879
00:48:40,420 --> 00:48:43,820
 And we're going to apply that to doing grasp selection.

880
00:48:43,820 --> 00:48:44,320
 Yeah?

881
00:48:44,320 --> 00:48:48,260
 OK.

882
00:48:48,260 --> 00:48:53,260
 I've got some-- I've got a demo for this.

883
00:48:53,760 --> 00:49:03,120
 [SIDE CONVERSATION]

884
00:49:03,120 --> 00:49:03,720
 All right.

885
00:49:03,720 --> 00:49:08,920
 So it turns out you've already seen normal estimation

886
00:49:08,920 --> 00:49:09,560
 a little bit.

887
00:49:09,560 --> 00:49:13,680
 You saw plane fitting in your ransack problem.

888
00:49:13,680 --> 00:49:16,320
 And we're going to have you do the normal estimation details.

889
00:49:16,320 --> 00:49:18,640
 We just gave that as a method in the plane fitting.

890
00:49:18,640 --> 00:49:20,120
 But we're going to give you the problem

891
00:49:20,120 --> 00:49:21,240
 of doing normal estimation.

892
00:49:21,240 --> 00:49:23,200
 I think we picked that as one of the problems.

893
00:49:23,200 --> 00:49:28,240
 But this is the basic operation.

894
00:49:28,240 --> 00:49:35,280
 So I've got my mustard bottle.

895
00:49:35,280 --> 00:49:37,560
 OK?

896
00:49:37,560 --> 00:49:39,680
 I've got the point clouds from my mustard bottle

897
00:49:39,680 --> 00:49:41,560
 straight out of the camera.

898
00:49:41,560 --> 00:49:45,400
 And what I'd like to do is estimate the local geometry

899
00:49:45,400 --> 00:49:48,000
 of that frame.

900
00:49:48,000 --> 00:49:49,440
 And I think I've got this.

901
00:49:49,440 --> 00:49:51,200
 Yeah, OK.

902
00:49:51,200 --> 00:49:52,560
 Here's how it works, right?

903
00:49:52,560 --> 00:49:57,600
 So try to get it centered here.

904
00:49:57,600 --> 00:50:00,840
 Basically, the operation we're going to go through--

905
00:50:00,840 --> 00:50:02,680
 first, we have to process the point cloud

906
00:50:02,680 --> 00:50:04,880
 into a reasonable form to do these operations.

907
00:50:04,880 --> 00:50:10,200
 If it's too noisy, then plane fitting might be not optimal.

908
00:50:10,200 --> 00:50:13,240
 You want to do it on the densest possible point cloud.

909
00:50:13,240 --> 00:50:15,880
 And you want to do it on all the points from all the cameras.

910
00:50:15,880 --> 00:50:17,840
 So we'll step through that sequence.

911
00:50:17,840 --> 00:50:20,880
 But the basic operation is, given a point cloud,

912
00:50:20,880 --> 00:50:24,200
 I'm going to estimate its normals by fitting a plane

913
00:50:24,200 --> 00:50:26,200
 to the n nearest neighbors.

914
00:50:26,200 --> 00:50:32,040
 That plane defines the normal vector.

915
00:50:32,040 --> 00:50:34,160
 And we'll see it actually also defines

916
00:50:34,160 --> 00:50:37,280
 the directions of curvature with the same plane fitting

917
00:50:37,280 --> 00:50:38,520
 algorithm.

918
00:50:38,520 --> 00:50:41,520
 It's a very useful operation for trying

919
00:50:41,520 --> 00:50:45,000
 to decide if you're going to put your finger there or not.

920
00:50:45,000 --> 00:50:47,240
 This one is not going to have any photographs,

921
00:50:47,240 --> 00:50:48,880
 because it's got no backside.

922
00:50:48,880 --> 00:50:53,200
 But we can do it with multiple cameras.

923
00:50:53,200 --> 00:50:55,840
 We'll do better.

924
00:50:55,840 --> 00:50:57,560
 OK, so let's figure out how that works.

925
00:50:57,560 --> 00:51:18,760
 Normal estimation from point clouds.

926
00:51:18,760 --> 00:51:19,260
 So we're here.

927
00:51:19,260 --> 00:51:44,480
 Actually, the first step is just there's just some processing

928
00:51:44,480 --> 00:51:46,200
 that you have to do.

929
00:51:46,200 --> 00:51:48,680
 So the processing that I went through

930
00:51:48,680 --> 00:51:55,200
 in that particular setup was first

931
00:51:55,200 --> 00:51:59,520
 I took the point cloud that was from the cameras

932
00:51:59,520 --> 00:52:00,960
 around the bins.

933
00:52:00,960 --> 00:52:02,500
 I cropped the point cloud.

934
00:52:02,500 --> 00:52:06,280
 That's sort of an easy thing to do based on some xyz location.

935
00:52:06,280 --> 00:52:08,240
 Because the first point cloud comes in,

936
00:52:08,240 --> 00:52:10,960
 and it has the other cameras in the view.

937
00:52:10,960 --> 00:52:12,400
 It has the bins in the view.

938
00:52:12,400 --> 00:52:13,640
 This is all pretty confusing.

939
00:52:13,640 --> 00:52:17,520
 So I'm going to crop to an xyz bounding box.

940
00:52:17,520 --> 00:52:28,080
 Then we do normal estimation.

941
00:52:28,080 --> 00:52:40,360
 And the reason you do normal estimation-- let's see.

942
00:52:40,360 --> 00:52:42,200
 So let me just say what the other steps are.

943
00:52:42,200 --> 00:52:50,240
 Then I'm going to merge the point clouds

944
00:52:50,240 --> 00:52:51,160
 from multiple cameras.

945
00:52:51,160 --> 00:53:02,200
 And then I'm going to down sample the point cloud in order

946
00:53:02,200 --> 00:53:06,600
 to make it more reasonable for my grasp analysis.

947
00:53:06,600 --> 00:53:10,560
 But the order of these things is important.

948
00:53:10,560 --> 00:53:13,040
 The reason that I do normal estimation

949
00:53:13,040 --> 00:53:15,560
 before I merge the point cloud is

950
00:53:15,560 --> 00:53:18,180
 because what we're going to find out is-- I mean, you'll see--

951
00:53:18,180 --> 00:53:21,160
 is that fitting a plane to these points

952
00:53:21,160 --> 00:53:22,900
 will tell me the normal, but won't tell me

953
00:53:22,900 --> 00:53:25,420
 which direction is the normal.

954
00:53:25,420 --> 00:53:28,400
 So before I get rid of the correspondence

955
00:53:28,400 --> 00:53:30,840
 between these points and the camera,

956
00:53:30,840 --> 00:53:34,280
 I have to flip the normals towards the camera.

957
00:53:39,040 --> 00:53:40,920
 There's a simple little step saying,

958
00:53:40,920 --> 00:53:42,040
 you estimated the plane.

959
00:53:42,040 --> 00:53:43,240
 I don't know if the normal is this direction

960
00:53:43,240 --> 00:53:44,080
 or this direction.

961
00:53:44,080 --> 00:53:45,360
 But if the camera was over there,

962
00:53:45,360 --> 00:53:46,860
 then I know that the normal is going

963
00:53:46,860 --> 00:53:50,000
 to be pointing towards the camera.

964
00:53:50,000 --> 00:53:54,240
 So you need to know which points came from which camera

965
00:53:54,240 --> 00:53:55,880
 in order to do that.

966
00:53:55,880 --> 00:53:59,120
 And you prefer to do the normal estimation on the dense point

967
00:53:59,120 --> 00:54:01,400
 cloud.

968
00:54:01,400 --> 00:54:03,920
 Then you merge the point clouds into the one big thing.

969
00:54:03,920 --> 00:54:08,120
 And then you can down sample and use more efficient algorithms

970
00:54:08,120 --> 00:54:09,760
 from then on.

971
00:54:09,760 --> 00:54:16,320
 It's kind of crazy to think that we do this all the time.

972
00:54:16,320 --> 00:54:19,000
 Compute all of the normals for all of the points

973
00:54:19,000 --> 00:54:21,920
 coming in using k nearest neighbor queries

974
00:54:21,920 --> 00:54:23,120
 at all of the points.

975
00:54:23,120 --> 00:54:24,320
 This was one of those examples when

976
00:54:24,320 --> 00:54:25,800
 I started working with point clouds

977
00:54:25,800 --> 00:54:27,280
 I don't know how many years ago now.

978
00:54:27,280 --> 00:54:29,880
 I was like, no, surely you don't do it for all the points

979
00:54:29,880 --> 00:54:32,840
 all the time on every frame.

980
00:54:32,840 --> 00:54:33,600
 Yeah, they do.

981
00:54:33,600 --> 00:54:35,000
 That's just what you do.

982
00:54:35,000 --> 00:54:37,400
 You could do it on a multi-process if you want.

983
00:54:37,400 --> 00:54:39,600
 You could put it on a GPU if you want now.

984
00:54:39,600 --> 00:54:41,760
 But that is actually a surprisingly lightweight

985
00:54:41,760 --> 00:54:42,360
 computation.

986
00:54:42,360 --> 00:54:45,840
 And people just do that all the time.

987
00:54:45,840 --> 00:54:49,240
 It seems inelegant to me, but that's standard fare.

988
00:54:49,240 --> 00:54:57,280
 OK, but once we have our cropped point cloud,

989
00:54:57,280 --> 00:54:59,420
 let's just make sure-- the line fitting algorithm

990
00:54:59,420 --> 00:55:01,680
 is actually super clean and super nice.

991
00:55:01,680 --> 00:55:05,080
 So I want you to think through it with me.

992
00:55:05,080 --> 00:55:06,960
 Actually, I guess this is a good stretch time.

993
00:55:06,960 --> 00:55:09,080
 You guys want to take a quick stretch as I'm

994
00:55:09,080 --> 00:55:12,320
 about to write down the next set of equations?

995
00:55:12,320 --> 00:55:13,560
 Quick stretch.

996
00:55:13,560 --> 00:55:15,720
 People seem to still like it, the three of you that

997
00:55:15,720 --> 00:55:18,440
 are actually commenting on the-- everybody

998
00:55:18,440 --> 00:55:19,360
 should write comments.

999
00:55:19,360 --> 00:55:20,360
 And when you fill out the survey,

1000
00:55:20,360 --> 00:55:22,440
 I know you're tired at the end of the problem set.

1001
00:55:22,440 --> 00:55:24,640
 But I want more comments.

1002
00:55:24,640 --> 00:55:25,880
 I want to hear what you think.

1003
00:55:25,880 --> 00:55:46,360
 [SIDE CONVERSATION]

1004
00:55:46,360 --> 00:55:48,800
 All right, let's estimate our normals.

1005
00:55:48,800 --> 00:55:51,640
 How do we fit a plane to a bunch of points?

1006
00:55:51,640 --> 00:55:52,600
 It's super simple.

1007
00:55:52,600 --> 00:55:56,040
 This is like-- I really like how clean this is.

1008
00:55:56,040 --> 00:55:59,600
 So I'm going to write it as an optimization,

1009
00:55:59,600 --> 00:56:01,160
 because I always do.

1010
00:56:01,160 --> 00:56:04,560
 I'm going to say I want to fit a bunch of points centered

1011
00:56:04,560 --> 00:56:10,120
 around my vector p, and I want to estimate the normal vector.

1012
00:56:10,120 --> 00:56:11,800
 So how am I going to define that?

1013
00:56:11,800 --> 00:56:13,440
 I'm going to search for a normal vector.

1014
00:56:13,440 --> 00:56:16,600
 I'll call my normal vector n.

1015
00:56:16,600 --> 00:56:18,080
 And I want to find the normal-- I'm

1016
00:56:18,080 --> 00:56:19,800
 going to define the normal vector is

1017
00:56:19,800 --> 00:56:24,200
 over all of my nearest neighbor points, i.

1018
00:56:24,200 --> 00:56:27,640
 I would like to find the vector n such

1019
00:56:27,640 --> 00:56:34,800
 that the dot product between point i and my nominal p--

1020
00:56:34,800 --> 00:56:44,360
 this is my point at which I'm evaluating my normal.

1021
00:56:49,720 --> 00:56:50,680
 And this is my normal.

1022
00:56:50,680 --> 00:57:02,440
 I want this dotted with the normal to be 0, ideally.

1023
00:57:02,440 --> 00:57:03,900
 So what I'm going to do is I'm going

1024
00:57:03,900 --> 00:57:08,800
 to try to minimize the squared sum of the dot products.

1025
00:57:08,800 --> 00:57:13,280
 The n, which is this close to 0 dot product with all

1026
00:57:13,280 --> 00:57:17,400
 of my vectors, is the one I want.

1027
00:57:17,400 --> 00:57:23,520
 And I want to constrain it to be a unit vector.

1028
00:57:23,520 --> 00:57:25,840
 So what's the picture you should have in your head here?

1029
00:57:25,840 --> 00:57:29,640
 I've got my point of interest here.

1030
00:57:29,640 --> 00:57:32,760
 I'll make it blue.

1031
00:57:32,760 --> 00:57:35,560
 I have a bunch of other points in the scene

1032
00:57:35,560 --> 00:57:37,800
 that are my nearest neighbors.

1033
00:57:37,800 --> 00:57:42,780
 Each one of those, the vector pi minus p looks like this.

1034
00:57:42,780 --> 00:57:47,080
 These are the pi's minus p's.

1035
00:57:47,080 --> 00:57:49,000
 Again, it's a little rough on the board,

1036
00:57:49,000 --> 00:57:53,480
 but even in 2D I can sort of do it.

1037
00:57:53,480 --> 00:57:55,720
 And I want to estimate the normal vector.

1038
00:57:55,720 --> 00:58:07,800
 These are pi minus p, and this is n.

1039
00:58:07,800 --> 00:58:11,360
 I want the dot product of these to be 0,

1040
00:58:11,360 --> 00:58:13,160
 as close to 0 as possible.

1041
00:58:13,160 --> 00:58:16,000
 And of course, I'm going to get it only up to a symmetry.

1042
00:58:16,000 --> 00:58:18,120
 This one should be the same equally good answer.

1043
00:58:18,120 --> 00:58:29,000
 The optimization is really nice, actually, really simple.

1044
00:58:29,000 --> 00:58:40,600
 The way to see it is to just rewrite this.

1045
00:58:40,600 --> 00:58:42,880
 I'm going to give you the geometric version of it.

1046
00:58:42,880 --> 00:58:45,640
 Of course, the answer is, again, singular value decomposition.

1047
00:58:45,640 --> 00:58:50,080
 But it always is somehow.

1048
00:58:50,080 --> 00:58:51,960
 I'm going to write this slightly differently.

1049
00:58:51,960 --> 00:58:52,760
 I'll break that up.

1050
00:58:52,760 --> 00:58:55,040
 I'll say it's the sum over i.

1051
00:58:55,040 --> 00:58:59,000
 I've got the dot product is a scalar, right?

1052
00:58:59,000 --> 00:59:02,560
 A vector dot with a vector, you know, times a vector.

1053
00:59:02,560 --> 00:59:03,840
 That's a scalar.

1054
00:59:03,840 --> 00:59:06,440
 A scalar squared.

1055
00:59:06,440 --> 00:59:09,840
 I could just as well have written that, though,

1056
00:59:09,840 --> 00:59:10,440
 like this.

1057
00:59:10,440 --> 00:59:11,480
 This is also the scalar.

1058
00:59:14,720 --> 00:59:19,280
 And I'm going to multiply that again by this other scalar

1059
00:59:19,280 --> 00:59:20,240
 here.

1060
00:59:20,240 --> 00:59:23,080
 This is just playing the trace trick here.

1061
00:59:23,080 --> 00:59:25,880
 That's exactly the same quantity.

1062
00:59:25,880 --> 00:59:27,320
 I just unrolled the squared.

1063
00:59:27,320 --> 00:59:39,360
 One more step here.

1064
00:59:39,360 --> 00:59:40,440
 Let me write it like this.

1065
00:59:40,440 --> 00:59:45,120
 N transpose sum over i, P_i.

1066
00:59:45,120 --> 00:59:55,720
 Same thing.

1067
00:59:55,720 --> 01:00:00,080
 I just did a little algebraic manipulation there.

1068
01:00:00,080 --> 01:00:02,880
 And we'll call this-- this is the data matrix of the day

1069
01:00:02,880 --> 01:00:03,360
 here.

1070
01:00:03,360 --> 01:00:04,400
 This is our data matrix.

1071
01:00:09,320 --> 01:00:11,320
 There's no decision variables in there.

1072
01:00:11,320 --> 01:00:13,880
 That's just what we're getting straight from the point cloud.

1073
01:00:13,880 --> 01:00:21,520
 And our decision variables-- so our problem here

1074
01:00:21,520 --> 01:00:29,080
 is just minimize n, n transpose, Wn subject to n equals 1.

1075
01:00:29,080 --> 01:00:33,740
 Remember what we're doing.

1076
01:00:33,740 --> 01:00:36,400
 We're just trying to fit a plane by finding the normal vector.

1077
01:00:36,400 --> 01:00:36,900
 OK.

1078
01:00:36,900 --> 01:00:45,080
 So let me draw that in 2D here.

1079
01:00:45,080 --> 01:00:49,360
 I've got n1, n2.

1080
01:00:49,360 --> 01:00:55,240
 I know that I want my n to be a unit vector.

1081
01:00:55,240 --> 01:00:59,000
 So this is the n equals 1.

1082
01:01:03,600 --> 01:01:08,320
 This thing is just a quadratic form,

1083
01:01:08,320 --> 01:01:10,000
 a positive quadratic form, because it's

1084
01:01:10,000 --> 01:01:12,600
 the sum of these positive things.

1085
01:01:12,600 --> 01:01:14,840
 OK.

1086
01:01:14,840 --> 01:01:17,400
 It's going to have-- so it's going to be a bowl centered

1087
01:01:17,400 --> 01:01:22,960
 at the origin that's going to have some long axes

1088
01:01:22,960 --> 01:01:23,880
 and some short axes.

1089
01:01:23,880 --> 01:01:25,960
 Let me call it the long axis like this.

1090
01:01:25,960 --> 01:01:28,280
 So this is like the bowl.

1091
01:01:28,280 --> 01:01:30,240
 Do you see what I'm trying to draw here?

1092
01:01:30,240 --> 01:01:31,880
 That's supposed to be the origin there.

1093
01:01:32,720 --> 01:01:36,400
 This is n transpose Wn is some constant.

1094
01:01:36,400 --> 01:01:38,020
 These are the level sets of that bowl.

1095
01:01:38,020 --> 01:01:44,520
 Right?

1096
01:01:44,520 --> 01:01:45,020
 Yes.

1097
01:01:45,020 --> 01:01:47,280
 AUDIENCE: Is that 3D?

1098
01:01:47,280 --> 01:01:51,780
 PROFESSOR: I'm trying to do it just as if I was doing it in--

1099
01:01:51,780 --> 01:01:55,080
 I'm plotting two of the axes of a 3D thing, right?

1100
01:01:57,560 --> 01:02:04,640
 This bowl would be coming up out of the plane towards you.

1101
01:02:04,640 --> 01:02:09,760
 Think of that as a bowl where the axis coming out

1102
01:02:09,760 --> 01:02:10,400
 is the cost.

1103
01:02:10,400 --> 01:02:17,480
 So what's the optimal n?

1104
01:02:17,480 --> 01:02:22,320
 The smallest eigenvector.

1105
01:02:22,320 --> 01:02:24,360
 Is the eigenvector corresponding to the smallest

1106
01:02:24,360 --> 01:02:24,800
 eigenvalue?

1107
01:02:24,800 --> 01:02:25,200
 Absolutely.

1108
01:02:25,200 --> 01:02:26,040
 Right?

1109
01:02:26,040 --> 01:02:30,520
 So in this picture, it should be more centered.

1110
01:02:30,520 --> 01:02:32,640
 But it's going to be the place where

1111
01:02:32,640 --> 01:02:35,720
 the bowl is the most elongated.

1112
01:02:35,720 --> 01:02:38,080
 Right?

1113
01:02:38,080 --> 01:02:41,840
 Because the cost is going to go up faster in this direction

1114
01:02:41,840 --> 01:02:46,360
 and up slowly in that direction, the place where it's elongated.

1115
01:02:46,360 --> 01:02:50,560
 So there's two optimal answers, n star.

1116
01:02:50,560 --> 01:02:53,560
 And they're right there as we expected.

1117
01:02:53,560 --> 01:02:58,000
 We didn't expect to be able to pick this one or this one.

1118
01:02:58,000 --> 01:03:01,680
 Both of them are optimal answers.

1119
01:03:01,680 --> 01:03:02,480
 OK?

1120
01:03:02,480 --> 01:03:15,400
 So it's exactly that n star is the eigenvector corresponding

1121
01:03:15,400 --> 01:03:26,040
 to smallest eigenvalue of w.

1122
01:03:26,040 --> 01:03:32,720
 It's the unit eigenvector.

1123
01:03:32,720 --> 01:03:39,720
 Right?

1124
01:03:39,720 --> 01:03:40,200
 OK.

1125
01:03:40,200 --> 01:03:47,640
 So the way to estimate the normal of a point cloud

1126
01:03:47,640 --> 01:03:49,480
 is just to assemble this little data matrix

1127
01:03:49,480 --> 01:03:51,280
 and take some eigenvectors and eigenvalues,

1128
01:03:51,280 --> 01:03:52,400
 and you've got the normal.

1129
01:03:52,400 --> 01:03:55,000
 You've done your normal estimation.

1130
01:03:55,000 --> 01:03:58,920
 And you can do this with a KD tree,

1131
01:03:58,920 --> 01:04:02,120
 doing the data structure for nearest neighbor, for instance.

1132
01:04:02,120 --> 01:04:04,480
 Pick your 30 nearest neighbors, go

1133
01:04:04,480 --> 01:04:07,240
 through all the points in the point cloud,

1134
01:04:07,240 --> 01:04:08,800
 and just compute your normals.

1135
01:04:08,800 --> 01:04:10,800
 And that's what people do.

1136
01:04:10,800 --> 01:04:11,300
 Right?

1137
01:04:11,300 --> 01:04:25,840
 You get these funny looking point clouds

1138
01:04:25,840 --> 01:04:29,320
 with their normal vectors, yeah?

1139
01:04:29,320 --> 01:04:29,840
 All over.

1140
01:04:29,840 --> 01:04:35,040
 Again, the way you pick this one or this one

1141
01:04:35,040 --> 01:04:37,000
 is you have one extra operation afterwards.

1142
01:04:37,000 --> 01:04:39,440
 You say my camera is over here, so I

1143
01:04:39,440 --> 01:04:40,400
 have to pick the normal.

1144
01:04:40,400 --> 01:04:41,720
 If the normal was pointed-- you could just

1145
01:04:41,720 --> 01:04:42,760
 pick one of them arbitrarily.

1146
01:04:42,760 --> 01:04:44,600
 If the normal was pointed on the inside,

1147
01:04:44,600 --> 01:04:46,720
 just flip it around so it's pointing at the camera,

1148
01:04:46,720 --> 01:04:48,800
 because you know you can't see behind the objects.

1149
01:04:48,800 --> 01:04:49,300
 Yeah?

1150
01:04:49,300 --> 01:04:49,800
 [INAUDIBLE]

1151
01:04:49,800 --> 01:04:56,920
 Yeah.

1152
01:04:56,920 --> 01:05:00,760
 So this is just a more robust way to do this.

1153
01:05:00,760 --> 01:05:03,640
 So if I had exactly two points, like you said,

1154
01:05:03,640 --> 01:05:05,360
 I could do that computation.

1155
01:05:05,360 --> 01:05:07,480
 But now imagine that they're noisy point clouds,

1156
01:05:07,480 --> 01:05:09,800
 or it's not a perfect plane.

1157
01:05:09,800 --> 01:05:10,840
 That's a great question.

1158
01:05:10,840 --> 01:05:11,880
 It's not a perfect plane.

1159
01:05:11,880 --> 01:05:13,840
 This is saying find the best one that

1160
01:05:13,840 --> 01:05:16,760
 summarizes in a least square sense over the 30

1161
01:05:16,760 --> 01:05:18,920
 nearest neighbors.

1162
01:05:18,920 --> 01:05:21,920
 So it's going to be more robust to small variations

1163
01:05:21,920 --> 01:05:26,200
 in the pixels, or even maybe there was a little corner

1164
01:05:26,200 --> 01:05:27,600
 in the real point cloud.

1165
01:05:27,600 --> 01:05:29,540
 No noise, but there's just a corner.

1166
01:05:29,540 --> 01:05:31,760
 This is going to be more robust to that.

1167
01:05:31,760 --> 01:05:32,400
 Great question.

1168
01:05:32,400 --> 01:05:32,900
 Yeah?

1169
01:05:32,900 --> 01:05:37,480
 Super interesting thing.

1170
01:05:37,480 --> 01:05:38,880
 Let me just get one more in.

1171
01:05:38,880 --> 01:05:44,000
 So if I were to do almost exactly the same optimization,

1172
01:05:44,000 --> 01:05:47,840
 but I were to say, what if I want to maximize that over n?

1173
01:05:47,840 --> 01:05:57,320
 I want to maximize my dot product.

1174
01:06:00,120 --> 01:06:02,320
 So in the picture here, that's going

1175
01:06:02,320 --> 01:06:06,120
 to look like this, these points over here.

1176
01:06:06,120 --> 01:06:10,120
 And the exact same computation, the one

1177
01:06:10,120 --> 01:06:11,920
 that's the maximal dot product is

1178
01:06:11,920 --> 01:06:14,720
 the one that's the direction of least curvature.

1179
01:06:14,720 --> 01:06:20,520
 So the maximum, this is the direction of least curvature.

1180
01:06:26,920 --> 01:06:30,080
 And it's exactly just the eigenvalue

1181
01:06:30,080 --> 01:06:31,880
 corresponding to the largest eigenvector.

1182
01:06:31,880 --> 01:06:32,680
 Yeah, what's up?

1183
01:06:32,680 --> 01:06:34,060
 Yeah, I was wondering if you know

1184
01:06:34,060 --> 01:06:36,040
 if you'd ransacked this as well, or could you

1185
01:06:36,040 --> 01:06:38,840
 just do it all?

1186
01:06:38,840 --> 01:06:40,040
 Yeah, that's a good question.

1187
01:06:40,040 --> 01:06:42,440
 So we did do the ransack for the plane estimation.

1188
01:06:42,440 --> 01:06:44,840
 So that was an example where you really

1189
01:06:44,840 --> 01:06:47,440
 want to get the normal of the table,

1190
01:06:47,440 --> 01:06:49,600
 the plane estimated of the table.

1191
01:06:49,600 --> 01:06:51,920
 So it was worth the extra cost of doing ransack

1192
01:06:51,920 --> 01:06:54,080
 to try to get that right, for instance.

1193
01:06:54,080 --> 01:06:56,240
 I think in the-- I'm just going to run this

1194
01:06:56,240 --> 01:06:57,160
 over my whole point cloud.

1195
01:06:57,160 --> 01:06:58,400
 We typically don't do ransack.

1196
01:06:58,400 --> 01:07:03,000
 We typically would be-- I think that's just

1197
01:07:03,000 --> 01:07:06,760
 sort of an arbitrary where the computation falls decision.

1198
01:07:06,760 --> 01:07:07,600
 I think you're right.

1199
01:07:07,600 --> 01:07:09,240
 You could do better normal estimation

1200
01:07:09,240 --> 01:07:11,840
 with ransack in this step two.

1201
01:07:11,840 --> 01:07:12,520
 Great question.

1202
01:07:12,520 --> 01:07:13,020
 Yeah?

1203
01:07:13,020 --> 01:07:15,520
 What do you mean by least curvature?

1204
01:07:15,520 --> 01:07:16,360
 Least curvature.

1205
01:07:16,360 --> 01:07:22,400
 So if I were to look at the side of my bunny, my Stanford

1206
01:07:22,400 --> 01:07:26,880
 bunny or whatever, so I've got some point cloud here.

1207
01:07:26,880 --> 01:07:27,920
 Look, view from the side.

1208
01:07:27,920 --> 01:07:30,360
 It has some curvature.

1209
01:07:30,360 --> 01:07:32,400
 And I've got another direction where

1210
01:07:32,400 --> 01:07:36,360
 the bunny is kind of more curvy.

1211
01:07:36,360 --> 01:07:42,600
 So if I were to sum up the-- I had my normal here.

1212
01:07:42,600 --> 01:07:49,200
 And I have my p vectors like this.

1213
01:07:49,200 --> 01:07:52,000
 So the vector of least-- and in the other axis

1214
01:07:52,000 --> 01:07:53,800
 they look like this.

1215
01:07:53,800 --> 01:07:55,760
 And there's more like this.

1216
01:07:55,760 --> 01:07:58,720
 So the axis where it aligns the most,

1217
01:07:58,720 --> 01:08:01,920
 where if I could pick a particular vector that the dot

1218
01:08:01,920 --> 01:08:03,960
 product is the highest, then that's

1219
01:08:03,960 --> 01:08:06,840
 going to be the one where the bunny is more flat.

1220
01:08:06,840 --> 01:08:08,800
 And the one that's left over is going

1221
01:08:08,800 --> 01:08:11,440
 to be the direction where you're more curvy.

1222
01:08:11,440 --> 01:08:14,680
 It happens since we know this is a symmetric matrix.

1223
01:08:14,680 --> 01:08:18,040
 And symmetric matrices have orthonormal, even orthogonal,

1224
01:08:18,040 --> 01:08:20,240
 in this case orthogonal bases.

1225
01:08:20,240 --> 01:08:21,800
 We know that even that third axis,

1226
01:08:21,800 --> 01:08:24,940
 that intermediate eigenvector, has an interpretation

1227
01:08:24,940 --> 01:08:27,740
 as this last axis.

1228
01:08:27,740 --> 01:08:32,260
 But I think the math tells us that the dot product that

1229
01:08:32,260 --> 01:08:36,220
 is maximal is the direction that's the flattest.

1230
01:08:36,220 --> 01:08:38,260
 If it was completely flat, then you'd expect it.

1231
01:08:38,260 --> 01:08:40,160
 You would just pick something.

1232
01:08:40,160 --> 01:08:41,520
 They'd be equivalent eigenvalues.

1233
01:08:46,480 --> 01:08:50,840
 OK, so let's put this all together

1234
01:08:50,840 --> 01:08:54,320
 so you can sort of imagine then how I go through this step.

1235
01:08:54,320 --> 01:08:56,600
 I'm going to look into the bin.

1236
01:08:56,600 --> 01:08:58,020
 I'm going to crop my point cloud.

1237
01:08:58,020 --> 01:09:00,440
 I'm going to run this normal estimation over.

1238
01:09:00,440 --> 01:09:03,840
 I'm going to get my normals, and I'll get my curvature

1239
01:09:03,840 --> 01:09:05,960
 if I wanted to use it.

1240
01:09:05,960 --> 01:09:08,640
 I'll pull them all together into merged point clouds.

1241
01:09:08,640 --> 01:09:10,020
 And then I'm going to downsample.

1242
01:09:10,020 --> 01:09:13,740
 Downsampling is another one that-- it's

1243
01:09:13,740 --> 01:09:16,720
 a relatively efficient algorithm.

1244
01:09:16,720 --> 01:09:18,800
 The way people typically do it, they

1245
01:09:18,800 --> 01:09:23,200
 would just make a voxel grid over your point cloud

1246
01:09:23,200 --> 01:09:24,880
 and summarize all of the points that

1247
01:09:24,880 --> 01:09:27,120
 landed in the same voxel as a single point.

1248
01:09:27,120 --> 01:09:29,600
 That would be the standard voxelized downsampling.

1249
01:09:29,600 --> 01:09:31,140
 And you can keep your normals around.

1250
01:09:31,140 --> 01:09:33,480
 You average your normals, which is kind of weird.

1251
01:09:33,480 --> 01:09:34,860
 But you just average your normals

1252
01:09:34,860 --> 01:09:37,360
 of all the points that landed in the same voxel.

1253
01:09:37,360 --> 01:09:38,920
 But they're standard algorithms.

1254
01:09:38,920 --> 01:09:40,880
 And there's libraries like Open3D

1255
01:09:40,880 --> 01:09:43,340
 that are just these lists of-- they

1256
01:09:43,340 --> 01:09:47,820
 have all mature implementations of all the normal, the best

1257
01:09:47,820 --> 01:09:49,100
 point cloud algorithms.

1258
01:09:49,100 --> 01:09:51,140
 Before that, there was PCL.

1259
01:09:51,140 --> 01:09:53,400
 PCL wasn't maintained for a while.

1260
01:09:53,400 --> 01:09:55,140
 It looks like it's being maintained again,

1261
01:09:55,140 --> 01:09:58,940
 but I don't know by whom.

1262
01:09:58,940 --> 01:10:01,260
 But there are standard point cloud algorithms.

1263
01:10:01,260 --> 01:10:04,780
 I went through-- we've implemented the simple ones

1264
01:10:04,780 --> 01:10:07,460
 in Drake, but Drake isn't trying to cover all of these.

1265
01:10:07,460 --> 01:10:10,340
 Just enough that you guys don't have to install also Open3D.

1266
01:10:11,100 --> 01:10:13,780
 Because it was a big install that broke all the time.

1267
01:10:13,780 --> 01:10:24,500
 So now, this is enough for us to do a basic grasp selection

1268
01:10:24,500 --> 01:10:25,000
 algorithm.

1269
01:10:38,480 --> 01:10:46,280
 Here's my grasp selection algorithm at work.

1270
01:10:46,280 --> 01:10:52,200
 I'm going to load up my gripper, load up my scene.

1271
01:10:52,200 --> 01:10:53,240
 OK.

1272
01:10:53,240 --> 01:10:54,800
 I'm just hallucinating the gripper

1273
01:10:54,800 --> 01:10:58,260
 and assuming I can fly around a little bit.

1274
01:10:58,260 --> 01:11:00,680
 And I'm going to evaluate potential grasps

1275
01:11:00,680 --> 01:11:04,520
 with no knowledge of the object by doing a little bit of point

1276
01:11:04,520 --> 01:11:05,120
 cloud math.

1277
01:11:05,120 --> 01:11:07,500
 So first, I've gone through, I've taken my point cloud,

1278
01:11:07,500 --> 01:11:09,360
 and I've computed its normals and down sampled

1279
01:11:09,360 --> 01:11:10,520
 and everything like that.

1280
01:11:10,520 --> 01:11:14,160
 But now, for any potential nominal grasp,

1281
01:11:14,160 --> 01:11:17,400
 I'm going to do another little small batch of point cloud

1282
01:11:17,400 --> 01:11:18,200
 computations.

1283
01:11:18,200 --> 01:11:23,160
 So first of all, since I want to find antipodal grasps, what

1284
01:11:23,160 --> 01:11:25,760
 I'm going to do is I'm going to take the place where

1285
01:11:25,760 --> 01:11:28,040
 my fingers are likely to touch, and I'm

1286
01:11:28,040 --> 01:11:33,840
 going to crop the point cloud so that the red points are

1287
01:11:33,840 --> 01:11:37,260
 the ones that are the points of interest.

1288
01:11:37,260 --> 01:11:38,180
 OK.

1289
01:11:38,180 --> 01:11:40,140
 And then if I were to have both screens up--

1290
01:11:40,140 --> 01:11:43,620
 but maybe that's hard right now-- but every time I'm

1291
01:11:43,620 --> 01:11:46,340
 doing this, it's actually printing a cost.

1292
01:11:46,340 --> 01:11:48,700
 For every possible candidate like this,

1293
01:11:48,700 --> 01:11:53,540
 it's computing a sum of the normals

1294
01:11:53,540 --> 01:11:54,780
 that are in those red points.

1295
01:11:54,780 --> 01:11:58,140
 Basically, it's saying I'm going to reward normals that

1296
01:11:58,140 --> 01:12:02,660
 are antipodal and pointing to in the axis of my gripper.

1297
01:12:02,660 --> 01:12:04,920
 And I'm going to just sum up.

1298
01:12:04,920 --> 01:12:07,960
 The more normals I have that are pointing right at my gripper

1299
01:12:07,960 --> 01:12:11,040
 inside those red, the better.

1300
01:12:11,040 --> 01:12:15,200
 And then I add a little bit more, a few more costs.

1301
01:12:15,200 --> 01:12:17,280
 These are now just very ad hoc.

1302
01:12:17,280 --> 01:12:18,840
 But I want to come down from above.

1303
01:12:18,840 --> 01:12:22,800
 I don't want to pick it up from inside the table.

1304
01:12:22,800 --> 01:12:24,840
 And I call it infinite cost.

1305
01:12:24,840 --> 01:12:29,840
 If the gripper collides with the point cloud like this,

1306
01:12:29,840 --> 01:12:33,980
 that's infinite cost, or if it collides with the bins.

1307
01:12:33,980 --> 01:12:35,140
 OK.

1308
01:12:35,140 --> 01:12:36,980
 But the algorithm now is just going to be--

1309
01:12:36,980 --> 01:12:38,620
 so I'm doing this manually so you could see.

1310
01:12:38,620 --> 01:12:40,160
 And if you run the GUI yourself, you'll

1311
01:12:40,160 --> 01:12:42,460
 see in the console it's printing out the costs

1312
01:12:42,460 --> 01:12:45,540
 and whether it knows it's in collision or not.

1313
01:12:45,540 --> 01:12:47,780
 And our grasp selection algorithm

1314
01:12:47,780 --> 01:12:50,240
 for the day, which demands almost nothing

1315
01:12:50,240 --> 01:12:52,540
 about the objects, is I'm just going

1316
01:12:52,540 --> 01:12:54,220
 to pick a bunch of-- actually, I'm

1317
01:12:54,220 --> 01:12:56,460
 going to pick a bunch of points in the point cloud,

1318
01:12:56,460 --> 01:12:59,580
 put my hand around them, and then just evaluate

1319
01:12:59,580 --> 01:13:00,460
 the cost.

1320
01:13:00,460 --> 01:13:03,460
 I'll pick 100 of them, and I'll take the best.

1321
01:13:03,460 --> 01:13:08,340
 And in this case, I'm going to just take 100 of them

1322
01:13:08,340 --> 01:13:12,060
 and plot-- I think it runs.

1323
01:13:12,060 --> 01:13:15,300
 I forgot to run it.

1324
01:13:15,300 --> 01:13:16,180
 Yeah.

1325
01:13:16,180 --> 01:13:22,140
 If I generate grasp candidates then, there we go.

1326
01:13:22,140 --> 01:13:24,580
 I've got random objects falling in the bin.

1327
01:13:24,580 --> 01:13:26,800
 And I just drew the five best candidates.

1328
01:13:26,800 --> 01:13:28,420
 And it looks like I didn't simulate it.

1329
01:13:28,420 --> 01:13:30,220
 I think the things are still falling down.

1330
01:13:30,220 --> 01:13:31,540
 That was smart.

1331
01:13:31,540 --> 01:13:33,060
 I let it simulate for a second.

1332
01:13:33,060 --> 01:13:34,600
 It looks like it didn't quite settle.

1333
01:13:34,600 --> 01:13:37,300
 And then I said, find some point clouds.

1334
01:13:37,300 --> 01:13:40,100
 And it does its thing.

1335
01:13:40,100 --> 01:13:42,940
 And then I just pick the best one.

1336
01:13:42,940 --> 01:13:45,340
 I go ahead and grasp, wash, rinse, and repeat.

1337
01:13:45,340 --> 01:13:51,260
 That's a surprisingly effective algorithm.

1338
01:13:51,260 --> 01:13:53,500
 I'm going to show you by the next time

1339
01:13:53,500 --> 01:13:56,860
 sort of the full version of this.

1340
01:13:56,860 --> 01:13:59,940
 I'll maybe give you a preview of it now.

1341
01:13:59,940 --> 01:14:09,140
 I wrote it very recently.

1342
01:14:09,140 --> 01:14:10,380
 I hope it runs on this machine.

1343
01:14:10,380 --> 01:14:15,920
 See how we go.

1344
01:14:15,920 --> 01:14:17,380
 And I'm going to keep working on it.

1345
01:14:17,380 --> 01:14:22,260
 But yeah, OK.

1346
01:14:22,260 --> 01:14:24,660
 So this is basically the end-to-end demo

1347
01:14:24,660 --> 01:14:26,260
 using exactly that.

1348
01:14:26,260 --> 01:14:30,660
 And it will go down just using this strategy.

1349
01:14:30,660 --> 01:14:34,140
 It happened to pick there on the block.

1350
01:14:34,140 --> 01:14:35,900
 It'll go over using exactly the plans

1351
01:14:35,900 --> 01:14:39,100
 we did before with my clearance, height, whatever.

1352
01:14:39,100 --> 01:14:42,420
 It'll go drop it off in the other bin.

1353
01:14:42,420 --> 01:14:43,980
 Wash, rinse, and repeat.

1354
01:14:43,980 --> 01:14:44,620
 Just go back.

1355
01:14:44,620 --> 01:14:49,260
 As soon as it goes down, it takes another new point cloud,

1356
01:14:49,260 --> 01:14:52,100
 chooses the grasp.

1357
01:14:52,100 --> 01:14:53,820
 And we'll add more and more logic to it

1358
01:14:53,820 --> 01:14:56,860
 to know if it fails multiple times,

1359
01:14:56,860 --> 01:14:58,360
 to give up and go to the other one.

1360
01:14:58,360 --> 01:15:04,400
 So that is an antipodal grasp.

1361
01:15:04,400 --> 01:15:05,900
 It's not the one I would have picked

1362
01:15:05,900 --> 01:15:07,860
 if I had written a better algorithm, right?

1363
01:15:07,860 --> 01:15:11,140
 There are limitations to the antipodal metric.

1364
01:15:11,140 --> 01:15:12,500
 Actually, that's a great example.

1365
01:15:12,500 --> 01:15:14,060
 I want to talk about the limitations

1366
01:15:14,060 --> 01:15:17,460
 here in the last few minutes.

1367
01:15:17,460 --> 01:15:19,820
 So why was that a ridiculous grasp?

1368
01:15:19,820 --> 01:15:23,740
 What do you know that it doesn't know?

1369
01:15:23,740 --> 01:15:25,660
 What's that?

1370
01:15:25,660 --> 01:15:27,780
 That the corner is not stable.

1371
01:15:27,780 --> 01:15:32,020
 So it was evaluating the reds, the red points.

1372
01:15:32,020 --> 01:15:33,740
 They were arbitrarily close.

1373
01:15:33,740 --> 01:15:37,500
 It wasn't looking like one step away from the reds, right?

1374
01:15:37,500 --> 01:15:39,420
 So that's one thing you know, is that there's

1375
01:15:39,420 --> 01:15:42,260
 a notion of robustness that isn't captured by that metric.

1376
01:15:42,260 --> 01:15:45,540
 What's another thing?

1377
01:15:45,540 --> 01:15:46,340
 Torque.

1378
01:15:46,340 --> 01:15:47,460
 Center of mass, right?

1379
01:15:47,460 --> 01:15:50,780
 You know you should pick objects around their center of mass

1380
01:15:50,780 --> 01:15:53,340
 because it'll be able to resist more torque.

1381
01:15:53,340 --> 01:15:54,740
 This is-- oops.

1382
01:15:54,740 --> 01:15:56,420
 I ran into the bin.

1383
01:15:56,420 --> 01:15:57,660
 That'll be fixed by Tuesday.

1384
01:15:57,660 --> 01:15:58,160
 Yeah.

1385
01:15:58,160 --> 01:16:03,500
 Yeah, good.

1386
01:16:03,500 --> 01:16:06,620
 But yeah, so it has no notion of mass.

1387
01:16:06,620 --> 01:16:08,540
 It doesn't know what the objects are, right?

1388
01:16:08,540 --> 01:16:13,020
 So it has no concept that can do that.

1389
01:16:13,020 --> 01:16:14,220
 And it ran into the camera.

1390
01:16:14,220 --> 01:16:17,580
 All right, let me just call this a work in progress.

1391
01:16:17,580 --> 01:16:19,580
 Oh, look at that.

1392
01:16:19,580 --> 01:16:22,380
 That'll be better by Tuesday.

1393
01:16:22,380 --> 01:16:27,820
 [INAUDIBLE]

1394
01:16:27,820 --> 01:16:28,300
 Good.

1395
01:16:28,300 --> 01:16:31,620
 So to what extent-- and this is actually great.

1396
01:16:31,620 --> 01:16:35,980
 So there's a couple ways that what I've said

1397
01:16:35,980 --> 01:16:37,900
 was inconsistent with the fact that I just said

1398
01:16:37,900 --> 01:16:39,980
 you should know where the center of mass is, right?

1399
01:16:39,980 --> 01:16:45,340
 So one was that-- yes, I think where you pick the object up

1400
01:16:45,340 --> 01:16:48,140
 is not going to affect the motion of the arm because

1401
01:16:48,140 --> 01:16:50,100
 of the gearbox thing, right?

1402
01:16:50,100 --> 01:16:51,260
 So you're absolutely right.

1403
01:16:51,260 --> 01:16:53,860
 The reflected inertia of the gearboxes

1404
01:16:53,860 --> 01:16:54,820
 can dominate the mass.

1405
01:16:54,820 --> 01:16:56,780
 So that robot's going to move mostly the same,

1406
01:16:56,780 --> 01:16:59,380
 whether it's picked up a red brick, two red bricks,

1407
01:16:59,380 --> 01:17:01,140
 whatever, OK?

1408
01:17:01,140 --> 01:17:04,420
 Whether the red brick stays nicely inside the hand

1409
01:17:04,420 --> 01:17:07,060
 is about whether the gravitational wrench

1410
01:17:07,060 --> 01:17:10,420
 is inside the friction cone that you've achieved.

1411
01:17:10,420 --> 01:17:12,060
 Now, there's one more point, which

1412
01:17:12,060 --> 01:17:14,260
 is that I'm actually commanding that gripper

1413
01:17:14,260 --> 01:17:18,340
 to have a particular amount of force, of gripping force.

1414
01:17:18,340 --> 01:17:20,620
 So it's not actually an infinite friction cone.

1415
01:17:20,620 --> 01:17:23,660
 It has limits on how much force it's going to apply,

1416
01:17:23,660 --> 01:17:28,300
 partly because I don't want to crush Spock, right?

1417
01:17:28,300 --> 01:17:30,660
 That's what I was trying to say.

1418
01:17:30,660 --> 01:17:32,340
 If I don't know anything about an object,

1419
01:17:32,340 --> 01:17:33,860
 then maybe grabbing it with infinite force

1420
01:17:33,860 --> 01:17:35,360
 isn't a good idea, and the hand isn't

1421
01:17:35,360 --> 01:17:37,100
 capable of infinite force.

1422
01:17:37,100 --> 01:17:39,420
 So that is also a way that the mass

1423
01:17:39,420 --> 01:17:41,980
 could matter more than the analysis we've done,

1424
01:17:41,980 --> 01:17:44,580
 the clean analysis would suggest.

1425
01:17:44,580 --> 01:17:45,260
 Great example.

1426
01:17:45,260 --> 01:17:46,820
 Great question.

1427
01:17:46,820 --> 01:17:47,320
 Yeah?

1428
01:17:47,440 --> 01:17:50,400
 So in the computation that you showed,

1429
01:17:50,400 --> 01:17:53,320
 there's no distinguishing between objects, right?

1430
01:17:53,320 --> 01:17:53,820
 Correct.

1431
01:17:53,820 --> 01:17:57,800
 I understand if two separate point clouds are connected

1432
01:17:57,800 --> 01:17:59,680
 at all.

1433
01:17:59,680 --> 01:18:00,880
 Spot on.

1434
01:18:00,880 --> 01:18:05,200
 So there's no sense in which it knows that two separate point

1435
01:18:05,200 --> 01:18:06,520
 clouds are connected.

1436
01:18:06,520 --> 01:18:08,480
 Yeah, and I have an example of that.

1437
01:18:08,480 --> 01:18:09,360
 Was that your point?

1438
01:18:09,360 --> 01:18:09,960
 Or-- yeah.

1439
01:18:09,960 --> 01:18:14,280
 Yes, so what are some limitations

1440
01:18:14,280 --> 01:18:15,240
 of only using geometry?

1441
01:18:15,240 --> 01:18:17,880
 And actually, did you see that one right there?

1442
01:18:17,880 --> 01:18:19,560
 That was exactly your case.

1443
01:18:19,560 --> 01:18:21,800
 Let me start it over again.

1444
01:18:21,800 --> 01:18:24,160
 There's two objects there, and they

1445
01:18:24,160 --> 01:18:27,760
 happen to have their backs kind of close,

1446
01:18:27,760 --> 01:18:29,720
 and they had antipodal grasps like that.

1447
01:18:29,720 --> 01:18:30,960
 But it wasn't the same object.

1448
01:18:30,960 --> 01:18:33,760
 It just got it wrong, and it had no reason to-- it

1449
01:18:33,760 --> 01:18:34,760
 didn't think about that.

1450
01:18:34,760 --> 01:18:36,080
 It found antipodal grasps.

1451
01:18:36,080 --> 01:18:37,840
 They seemed about the right width apart.

1452
01:18:37,840 --> 01:18:40,320
 It went for the squeeze.

1453
01:18:40,320 --> 01:18:44,320
 So people call those double picks, for instance,

1454
01:18:44,320 --> 01:18:46,120
 for exactly that reason.

1455
01:18:46,120 --> 01:18:48,540
 It also will do things-- like, if you run this long enough

1456
01:18:48,540 --> 01:18:51,440
 and you throw things in the bin, you'll

1457
01:18:51,440 --> 01:18:54,000
 see it do what we saw on the red brick,

1458
01:18:54,000 --> 01:18:55,400
 but you see it in more ridiculous.

1459
01:18:55,400 --> 01:18:58,480
 You'll pick up a hammer or something by the edge.

1460
01:18:58,480 --> 01:19:00,840
 It has no concept of center of mass.

1461
01:19:00,840 --> 01:19:03,680
 It has no concept of object.

1462
01:19:03,680 --> 01:19:08,960
 So it's not great, but it's surprisingly good.

1463
01:19:08,960 --> 01:19:12,040
 The other-- I'd say another big limitation of the approach

1464
01:19:12,040 --> 01:19:13,700
 as I've advertised it here, and I

1465
01:19:13,700 --> 01:19:15,900
 think a place where the deep learning versions really

1466
01:19:15,900 --> 01:19:19,880
 do outperform, is on partial views.

1467
01:19:19,880 --> 01:19:22,880
 So my point cloud is only going to see what my cameras can

1468
01:19:22,880 --> 01:19:24,680
 immediately see.

1469
01:19:24,680 --> 01:19:27,040
 If there's a back to the object that was occluded,

1470
01:19:27,040 --> 01:19:29,320
 or I didn't have a camera over here,

1471
01:19:29,320 --> 01:19:31,760
 then I've lost my ability to reason

1472
01:19:31,760 --> 01:19:34,120
 about that antipodal grasp.

1473
01:19:34,120 --> 01:19:37,520
 If I were to run the algorithm a bunch of times

1474
01:19:37,520 --> 01:19:40,720
 and just train a network to predict this,

1475
01:19:40,720 --> 01:19:42,620
 it could in some sense hallucinate

1476
01:19:42,620 --> 01:19:44,640
 the back of the object.

1477
01:19:44,640 --> 01:19:46,260
 And so I think these partial views are

1478
01:19:46,260 --> 01:19:49,740
 one of the big places where the deep learning-based approaches

1479
01:19:49,740 --> 01:19:50,820
 do outperform this.

1480
01:19:50,820 --> 01:19:54,040
 But you get pretty far with just a little bit

1481
01:19:54,040 --> 01:19:56,220
 of geometry processing.

1482
01:19:56,220 --> 01:19:58,300
 Transparent objects, there's a couple other cases

1483
01:19:58,300 --> 01:20:00,260
 where I think this doesn't work well.

1484
01:20:00,260 --> 01:20:01,420
 But it's surprisingly good.

1485
01:20:01,420 --> 01:20:04,920
 Cool.

1486
01:20:04,920 --> 01:20:08,780
 Does that make sense?

1487
01:20:08,780 --> 01:20:10,740
 Any more questions about that?

1488
01:20:10,740 --> 01:20:16,900
 So the weak part, which is the part I didn't code up yet well,

1489
01:20:16,900 --> 01:20:18,860
 is the higher level logic.

1490
01:20:18,860 --> 01:20:22,180
 And that's what we'll talk about on Tuesday.

1491
01:20:22,180 --> 01:20:24,900
 No, not Tuesday, this Thursday, because we have no class

1492
01:20:24,900 --> 01:20:30,640
 next Tuesday, which says lots of time for me to fix the demo.

1493
01:20:30,640 --> 01:20:33,100
 But at some point, when you start writing this higher level

1494
01:20:33,100 --> 01:20:34,980
 logic of, OK, I picked it three times,

1495
01:20:34,980 --> 01:20:36,540
 it's time to go try the other bin,

1496
01:20:36,540 --> 01:20:39,460
 we need more machinery to start dealing with that.

1497
01:20:39,460 --> 01:20:41,860
 And we'll do it next week.

1498
01:20:41,860 --> 01:20:51,860
 [BLANK_AUDIO]

