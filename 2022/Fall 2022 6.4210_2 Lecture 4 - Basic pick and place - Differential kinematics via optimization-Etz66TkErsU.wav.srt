1
00:00:00,000 --> 00:00:09,020
 [ Background noise ]

2
00:00:09,020 --> 00:00:11,460
 >> I actually don't know why it's not projecting.

3
00:00:11,460 --> 00:00:28,640
 [ Background noise ]

4
00:00:29,140 --> 00:00:30,100
 >> It was up a second ago.

5
00:00:30,100 --> 00:00:39,100
 [ Background noise ]

6
00:00:39,100 --> 00:00:40,060
 >> Take the cable.

7
00:00:41,100 --> 00:01:10,100
 [ Background noise ]

8
00:01:10,600 --> 00:01:19,060
 >> The actual camera setup.

9
00:01:19,060 --> 00:01:25,600
 [ Background noise ]

10
00:01:25,600 --> 00:01:26,600
 >> Very.

11
00:01:27,600 --> 00:01:55,600
 [ Background noise ]

12
00:01:55,600 --> 00:01:56,600
 >> One more.

13
00:01:56,600 --> 00:01:58,600
 [ Background noise ]

14
00:01:58,600 --> 00:02:00,600
 >> You can bring the whole laptop up there.

15
00:02:00,600 --> 00:02:29,600
 [ Background noise ]

16
00:02:30,100 --> 00:02:45,100
 [ Background noise ]

17
00:02:45,100 --> 00:02:46,600
 >> Can you still see okay?

18
00:02:46,600 --> 00:02:47,600
 I'm not occluding you with that?

19
00:02:47,600 --> 00:02:54,100
 [ Background noise ]

20
00:02:54,100 --> 00:02:55,100
 >> Put your mic right there.

21
00:02:55,100 --> 00:02:56,100
 >> What's that?

22
00:02:56,100 --> 00:02:56,600
 >> Mic.

23
00:02:56,600 --> 00:02:57,100
 >> Thank you.

24
00:02:57,100 --> 00:02:57,600
 Yeah.

25
00:02:58,100 --> 00:03:27,100
 [ Background noise ]

26
00:03:27,600 --> 00:03:56,600
 [ Background noise ]

27
00:03:57,100 --> 00:04:26,100
 [ Background noise ]

28
00:04:26,600 --> 00:04:55,600
 [ Background noise ]

29
00:04:56,100 --> 00:05:25,100
 [ Background noise ]

30
00:05:25,600 --> 00:05:54,600
 [ Background noise ]

31
00:05:55,100 --> 00:06:11,600
 [ Background noise ]

32
00:06:11,600 --> 00:06:14,100
 >> I don't -- when I see you smiling like that,

33
00:06:14,100 --> 00:06:15,100
 Bojan, I'm worried because --

34
00:06:15,100 --> 00:06:19,600
 [ Background noise ]

35
00:06:19,600 --> 00:06:20,600
 >> Oh, yeah.

36
00:06:21,100 --> 00:06:30,100
 [ Background noise ]

37
00:06:30,100 --> 00:06:34,100
 >> He deep faked me in his final project last term,

38
00:06:34,100 --> 00:06:36,600
 so I'm a little wary.

39
00:06:36,600 --> 00:06:49,600
 [ Background noise ]

40
00:06:50,100 --> 00:06:52,100
 >> Okay. Welcome back, everybody.

41
00:06:52,100 --> 00:06:56,100
 Let's get started.

42
00:06:56,100 --> 00:07:01,100
 We have a double recording technology going here,

43
00:07:01,100 --> 00:07:03,600
 so I'm mic'd like six times, and I've got --

44
00:07:03,600 --> 00:07:06,600
 I'm plugged in over here, and hopefully one of the two

45
00:07:06,600 --> 00:07:08,100
 of them is going to look great.

46
00:07:08,100 --> 00:07:13,100
 Thank you to the TAs who are working hard to make this good.

47
00:07:13,100 --> 00:07:17,100
 Okay. So I want to pick up where we left off.

48
00:07:17,100 --> 00:07:19,100
 We did a lot of stuff last week.

49
00:07:19,100 --> 00:07:24,100
 Yeah. And -- but we didn't complete the story, right?

50
00:07:24,100 --> 00:07:27,100
 We had this basic idea that I'm going to put a red brick

51
00:07:27,100 --> 00:07:30,100
 in front of you, we're going to design a complete stack

52
00:07:30,100 --> 00:07:33,100
 to go pick up the brick, move it to the next --

53
00:07:33,100 --> 00:07:36,100
 you know, from one bin to the next.

54
00:07:36,100 --> 00:07:39,100
 And today I want to complete that story for you, right?

55
00:07:39,100 --> 00:07:43,100
 So this was our task, basically red brick,

56
00:07:43,100 --> 00:07:46,100
 EWA with a WSG gripper.

57
00:07:46,100 --> 00:07:51,100
 We're just going to pick it up, move it to the other side.

58
00:07:51,100 --> 00:07:54,100
 And if you remember, the sketch for how we were going

59
00:07:54,100 --> 00:07:57,100
 to do that had a few steps.

60
00:07:57,100 --> 00:08:00,100
 The first step, we had to learn a bit about kinematic frames,

61
00:08:00,100 --> 00:08:03,100
 how to work with them, the spatial algebra of reasoning

62
00:08:03,100 --> 00:08:08,100
 about frames, rotations, and translations.

63
00:08:08,100 --> 00:08:13,100
 Then we made a sketch in the end effector coordinates.

64
00:08:13,100 --> 00:08:16,100
 So we decided that, okay, if I know the initial pose,

65
00:08:16,100 --> 00:08:19,100
 given a particular -- in the world frame, for instance,

66
00:08:19,100 --> 00:08:23,100
 of the object, then I can figure out what I want my gripper

67
00:08:23,100 --> 00:08:26,100
 frame to be relative to the object frame.

68
00:08:26,100 --> 00:08:28,100
 I can project that into world coordinates.

69
00:08:28,100 --> 00:08:31,100
 And I can go through and make a bunch of key frames

70
00:08:31,100 --> 00:08:34,100
 for where I'd like that gripper to eventually go.

71
00:08:34,100 --> 00:08:38,100
 And then I can connect those key frames with a trajectory.

72
00:08:38,100 --> 00:08:40,100
 We talked a little bit about how to interpolate carefully

73
00:08:40,100 --> 00:08:42,100
 on the trajectory.

74
00:08:42,100 --> 00:08:47,100
 But the last big step is to turn that end effector trajectory

75
00:08:47,100 --> 00:08:51,100
 now into joint trajectories, because that's what we have

76
00:08:51,100 --> 00:08:53,100
 to send to the robot.

77
00:08:53,100 --> 00:08:54,100
 And we started that, too.

78
00:08:54,100 --> 00:08:57,100
 We started talking about the forward kinematics, right?

79
00:08:57,100 --> 00:09:00,100
 If you have the joint angles of the robot,

80
00:09:00,100 --> 00:09:04,100
 how would you figure out what's the pose of the end effector?

81
00:09:04,100 --> 00:09:07,100
 That's the forward kinematics problem.

82
00:09:07,100 --> 00:09:11,100
 And at the very end, I mentioned that we're going

83
00:09:11,100 --> 00:09:15,100
 to try to use differential kinematics to decide

84
00:09:15,100 --> 00:09:16,100
 our joint angles.

85
00:09:16,100 --> 00:09:19,100
 And so today, we're going to try to finish that story.

86
00:09:19,100 --> 00:09:22,100
 And I love the questions I got last time.

87
00:09:22,100 --> 00:09:24,100
 Please keep them coming.

88
00:09:24,100 --> 00:09:26,100
 I'm prepared to speed up or slow down, depending

89
00:09:26,100 --> 00:09:29,100
 on what you guys need and want.

90
00:09:29,100 --> 00:09:31,100
 So let's just make sure, when I write this down,

91
00:09:31,100 --> 00:09:33,100
 that we're super clear.

92
00:09:33,100 --> 00:09:36,100
 Remember, one time in answering one of those questions,

93
00:09:36,100 --> 00:09:37,100
 I said positions.

94
00:09:37,100 --> 00:09:39,100
 And I'm like, well, no, the other positions, right?

95
00:09:39,100 --> 00:09:42,100
 I just want to be super clear that we

96
00:09:42,100 --> 00:09:47,100
 do use the word position to mean a three-element vector

97
00:09:47,100 --> 00:09:49,100
 in space.

98
00:09:49,100 --> 00:09:53,100
 We also use it to mean the notion of generalized positions

99
00:09:53,100 --> 00:09:57,100
 is the Q that we talk about, which is the-- in the IWA case,

100
00:09:57,100 --> 00:09:59,100
 it's just a series of joint angles.

101
00:09:59,100 --> 00:10:02,100
 But more generally, it's whatever coordinate system

102
00:10:02,100 --> 00:10:04,100
 we need as a sufficient description

103
00:10:04,100 --> 00:10:08,100
 of the complete configuration of the robot and the object.

104
00:10:08,100 --> 00:10:10,100
 It's everything in the multi-body plant.

105
00:10:10,100 --> 00:10:15,100
 So generalized positions we call Q.

106
00:10:15,100 --> 00:10:18,100
 So when you say plant.getPositions or setPositions,

107
00:10:18,100 --> 00:10:22,100
 it's talking about this generalized positions.

108
00:10:22,100 --> 00:10:24,100
 And then this is the pose, right?

109
00:10:24,100 --> 00:10:28,100
 We talked about representing that as a transform or a pose.

110
00:10:28,100 --> 00:10:34,100
 And this is of the body or frame B. B typically meaning the body.

111
00:10:34,100 --> 00:10:34,600
 Right?

112
00:10:34,600 --> 00:10:37,100
 And this, without the extra superlatives,

113
00:10:37,100 --> 00:10:41,100
 would mean it's in the world frame, expressed in the world

114
00:10:41,100 --> 00:10:44,100
 frame and relative to the world frame.

115
00:10:44,100 --> 00:10:44,600
 Good.

116
00:10:44,600 --> 00:10:47,100
 So we sort of figured out how to do that,

117
00:10:47,100 --> 00:10:51,600
 that we could go through a series of our spatial algebra

118
00:10:51,600 --> 00:10:55,100
 relations and go from end effector to the second to last

119
00:10:55,100 --> 00:10:57,100
 end effector all the way up to the base

120
00:10:57,100 --> 00:11:00,600
 and figure out the transform from the gripper in the world.

121
00:11:03,100 --> 00:11:08,600
 The thing that you guys asked a bunch about that I tried

122
00:11:08,600 --> 00:11:12,100
 to sweep under the rug was this notion

123
00:11:12,100 --> 00:11:15,100
 of different representations for 3D rotation.

124
00:11:15,100 --> 00:11:18,100
 I still want to mostly sweep it under the rug.

125
00:11:18,100 --> 00:11:21,100
 Posted on Piazza earlier too, but I

126
00:11:21,100 --> 00:11:23,100
 did try to write some more notes about that,

127
00:11:23,100 --> 00:11:24,600
 just so you have references.

128
00:11:24,600 --> 00:11:26,100
 And I'll just say a bit about it now

129
00:11:26,100 --> 00:11:28,100
 because it actually will play out

130
00:11:28,100 --> 00:11:31,100
 in the differential kinematics story too.

131
00:11:31,100 --> 00:11:34,600
 And it's important to think about-- just

132
00:11:34,600 --> 00:11:36,600
 to understand that there are different rotation

133
00:11:36,600 --> 00:11:41,100
 representations and all of the complexity of what

134
00:11:41,100 --> 00:11:43,600
 we're going to talk about today sort of comes down to this,

135
00:11:43,600 --> 00:11:45,600
 I would say.

136
00:11:45,600 --> 00:11:51,100
 So the fundamental problem is-- so in 2D space,

137
00:11:51,100 --> 00:11:55,100
 having an angle is enough to tell me what a rotation is.

138
00:11:55,100 --> 00:11:55,600
 Right?

139
00:11:55,600 --> 00:12:00,600
 If I'm in the plane and I want to just rotate a vector,

140
00:12:00,600 --> 00:12:02,600
 I can do that with just an angle.

141
00:12:02,600 --> 00:12:05,600
 In 3D, you would think that you'd

142
00:12:05,600 --> 00:12:08,100
 use three angles to do that.

143
00:12:08,100 --> 00:12:10,600
 And you can, but there's a problem.

144
00:12:10,600 --> 00:12:15,100
 If you only use three numbers, like the roll, pitch, and yaw

145
00:12:15,100 --> 00:12:19,600
 would be a standard thing, then you can run into singularities

146
00:12:19,600 --> 00:12:22,600
 basically because roll, pitch, and yaw all

147
00:12:22,600 --> 00:12:28,100
 live on the sphere, on a circle.

148
00:12:28,100 --> 00:12:31,600
 And when each of them are pi in the wrong place,

149
00:12:31,600 --> 00:12:33,600
 you can end up with a singularity.

150
00:12:33,600 --> 00:12:37,600
 And it's well understood that you cannot completely,

151
00:12:37,600 --> 00:12:40,100
 without singularities, represent rotations in 3D

152
00:12:40,100 --> 00:12:41,600
 with just three numbers.

153
00:12:41,600 --> 00:12:43,100
 You need one more number.

154
00:12:43,100 --> 00:12:44,600
 And because of that, there's a handful

155
00:12:44,600 --> 00:12:49,100
 of different choices of which numbers you might do.

156
00:12:49,100 --> 00:12:52,100
 So the ones that I called out here,

157
00:12:52,100 --> 00:13:03,600
 you can use three by three rotation matrices, which

158
00:13:03,600 --> 00:13:08,100
 have the property that you can think of this as the x-axis,

159
00:13:08,100 --> 00:13:14,600
 the y-axis, and the z-axis unit vectors stacked up.

160
00:13:14,600 --> 00:13:19,600
 And that's a total of nine numbers, way more than three,

161
00:13:19,600 --> 00:13:20,100
 right?

162
00:13:20,100 --> 00:13:24,100
 But great on a GPU, or great on a processor.

163
00:13:24,100 --> 00:13:26,160
 You can often do a lot of computations

164
00:13:26,160 --> 00:13:27,700
 nicely with the rotation matrix.

165
00:13:27,700 --> 00:13:33,740
 The more minimal representation, you would think,

166
00:13:33,740 --> 00:13:35,240
 would be the Euler angles.

167
00:13:35,240 --> 00:13:47,100
 In particular, the one we use in Drake is roll, pitch, yaw.

168
00:13:48,100 --> 00:13:48,600
 OK.

169
00:13:48,600 --> 00:13:51,600
 So roll is a rotation around x, the x-axis.

170
00:13:51,600 --> 00:13:53,600
 Pitch is a rotation around the y-axis.

171
00:13:53,600 --> 00:13:55,600
 Yaw is a rotation around the z-axis.

172
00:13:55,600 --> 00:13:57,600
 OK.

173
00:13:57,600 --> 00:13:58,600
 This is three numbers.

174
00:13:58,600 --> 00:14:04,600
 It's convenient to think about.

175
00:14:04,600 --> 00:14:08,600
 I can sort of intuit roll, pitch, and yaw.

176
00:14:08,600 --> 00:14:09,600
 But it has singularities.

177
00:14:15,600 --> 00:14:16,100
 OK.

178
00:14:16,100 --> 00:14:22,600
 OK.

179
00:14:22,600 --> 00:14:26,300
 So we use roll, pitch, and yaw a lot when the human's involved.

180
00:14:26,300 --> 00:14:28,900
 Like if you're in a description file

181
00:14:28,900 --> 00:14:31,180
 and you want to just position something,

182
00:14:31,180 --> 00:14:33,960
 it's often easier to type in roll, pitch, and yaw.

183
00:14:33,960 --> 00:14:36,400
 Like the universal robot description format,

184
00:14:36,400 --> 00:14:38,920
 the scene description format, all the standard formats

185
00:14:38,920 --> 00:14:42,160
 will take in a roll, pitch, yaw description of the orientation.

186
00:14:42,160 --> 00:14:45,660
 And that's fine if you are specifying it in one direction,

187
00:14:45,660 --> 00:14:48,980
 but it has singularities.

188
00:14:48,980 --> 00:14:51,560
 There are a few more that you might know or might have heard

189
00:14:51,560 --> 00:14:52,580
 of.

190
00:14:52,580 --> 00:14:56,140
 The axis angle representation, where

191
00:14:56,140 --> 00:14:59,780
 you can specify any rotation in 3D

192
00:14:59,780 --> 00:15:03,700
 by a vector and a scalar rotation around that vector.

193
00:15:03,700 --> 00:15:05,820
 That vector may not be axis aligned,

194
00:15:05,820 --> 00:15:08,820
 almost certainly isn't for interesting rotations.

195
00:15:08,820 --> 00:15:10,580
 But you can always pick a vector and then

196
00:15:10,580 --> 00:15:13,240
 think about a scalar rotation around that vector.

197
00:15:13,240 --> 00:15:20,920
 And that's four numbers again, but a complete description

198
00:15:20,920 --> 00:15:23,200
 that's useful for some things.

199
00:15:23,200 --> 00:15:26,760
 I used it for interpolating between two rotations

200
00:15:26,760 --> 00:15:29,280
 last time.

201
00:15:29,280 --> 00:15:32,600
 And then there's the famous unit quaternions.

202
00:15:38,120 --> 00:15:39,080
 Again, four numbers.

203
00:15:39,080 --> 00:15:44,720
 And you can actually think of unit quaternions

204
00:15:44,720 --> 00:15:46,360
 a lot like the axis angles if you

205
00:15:46,360 --> 00:15:48,080
 want geometric interpretations of it.

206
00:15:48,080 --> 00:15:52,240
 A scalar cleverly scaled to be on the unit

207
00:15:52,240 --> 00:15:55,400
 circle in four dimensions.

208
00:15:55,400 --> 00:15:58,640
 They do have an interpretation like that.

209
00:15:58,640 --> 00:16:03,160
 And there's a lot of things to know about quaternions.

210
00:16:03,160 --> 00:16:06,800
 So I want you to recognize these.

211
00:16:06,800 --> 00:16:09,000
 But the most important thing, like I said last time,

212
00:16:09,000 --> 00:16:13,680
 is knowing that they all exist.

213
00:16:13,680 --> 00:16:16,560
 You can go back and forth between them,

214
00:16:16,560 --> 00:16:19,400
 except for a few cases of singularities,

215
00:16:19,400 --> 00:16:23,400
 you can go perfectly back and forth between them.

216
00:16:23,400 --> 00:16:26,160
 And they're good for different computations.

217
00:16:26,160 --> 00:16:30,280
 So having a unit quaternion, just four numbers,

218
00:16:30,280 --> 00:16:32,440
 is, for instance, the choice we make

219
00:16:32,440 --> 00:16:37,800
 when we're populating our configuration in a vector q.

220
00:16:37,800 --> 00:16:39,840
 So the generalized positions we choose

221
00:16:39,840 --> 00:16:42,280
 when we want to represent an orientation

222
00:16:42,280 --> 00:16:44,720
 is we use the unit quaternion.

223
00:16:44,720 --> 00:16:47,240
 But when we're doing kinematics queries,

224
00:16:47,240 --> 00:16:50,280
 we often use the 3 by 3 rotation matrices, for instance.

225
00:16:50,280 --> 00:16:55,600
 Does that make sense?

226
00:16:55,600 --> 00:16:56,480
 Questions about that?

227
00:16:56,480 --> 00:16:56,980
 Yeah?

228
00:16:56,980 --> 00:16:58,900
 Can you give a quick example of the singularity

229
00:16:58,900 --> 00:17:00,720
 for that one-way?

230
00:17:00,720 --> 00:17:01,320
 Yeah.

231
00:17:01,320 --> 00:17:06,080
 So it's famously known as gimbal lock.

232
00:17:06,080 --> 00:17:12,400
 So basically, if you rotate pi this way and pi this way,

233
00:17:12,400 --> 00:17:14,080
 then you can't come out.

234
00:17:14,080 --> 00:17:16,680
 There's a singularity in trying to understand

235
00:17:16,680 --> 00:17:17,760
 what's going to happen.

236
00:17:17,760 --> 00:17:20,880
 I mean, there's even-- you can't rotate.

237
00:17:20,880 --> 00:17:23,360
 There's directions where it's like you can't rotate.

238
00:17:23,360 --> 00:17:25,720
 There's a singularity in this map.

239
00:17:25,720 --> 00:17:26,800
 It always happens.

240
00:17:26,800 --> 00:17:28,120
 You can try to place it.

241
00:17:28,120 --> 00:17:29,680
 You can choose your coordinate system

242
00:17:29,680 --> 00:17:32,640
 and the singularity is in a reasonable place.

243
00:17:32,640 --> 00:17:37,320
 But it always happens at this pi-pi case.

244
00:17:37,320 --> 00:17:37,820
 Yes?

245
00:17:37,820 --> 00:17:38,320
 [INAUDIBLE]

246
00:17:38,320 --> 00:17:54,480
 Yeah, it's just a limitation of using only three numbers

247
00:17:54,480 --> 00:17:57,680
 to represent this topological space.

248
00:17:57,680 --> 00:18:02,080
 You actually-- this space wants to live in four dimensions.

249
00:18:02,080 --> 00:18:04,520
 So trying to-- we're going to give

250
00:18:04,520 --> 00:18:08,080
 a really good example of the singularities in a few minutes.

251
00:18:08,080 --> 00:18:12,800
 But yeah, it's a well-known sort of-- it's frustrating,

252
00:18:12,800 --> 00:18:14,400
 but well-known that you can't do it.

253
00:18:14,400 --> 00:18:20,760
 So just to make that super clear,

254
00:18:20,760 --> 00:18:24,200
 so if you think of a single free body--

255
00:18:24,200 --> 00:18:26,360
 so I took in pseudocode here.

256
00:18:26,360 --> 00:18:27,480
 I took a plant.

257
00:18:27,480 --> 00:18:29,840
 I just added the brick, only the brick.

258
00:18:29,840 --> 00:18:30,880
 That's it.

259
00:18:30,880 --> 00:18:32,360
 It's not welded.

260
00:18:32,360 --> 00:18:34,360
 It's just floating around.

261
00:18:34,360 --> 00:18:35,280
 So it's a free body.

262
00:18:35,280 --> 00:18:40,200
 And I've got a context for it.

263
00:18:40,200 --> 00:18:42,040
 I didn't mean for that to be there already.

264
00:18:42,040 --> 00:18:43,680
 But what is q?

265
00:18:43,680 --> 00:18:50,920
 If I say plant.getPositions, what is q in this case?

266
00:18:50,920 --> 00:18:54,320
 Positions and orientations, how big is it?

267
00:18:54,320 --> 00:18:59,680
 It's in seven, which is a coincidence that IWA has seven.

268
00:18:59,680 --> 00:19:03,080
 But this is three positions and then four numbers

269
00:19:03,080 --> 00:19:07,520
 in a quaternion stacked in a vector to make up the vector q.

270
00:19:07,520 --> 00:19:11,920
 What is the pose?

271
00:19:11,920 --> 00:19:16,400
 If I were to call plant.evaluateBodyPose in world,

272
00:19:16,400 --> 00:19:17,200
 what is that thing?

273
00:19:22,320 --> 00:19:26,520
 So the output of this is a rigid transform.

274
00:19:26,520 --> 00:19:29,800
 The representation it uses in memory

275
00:19:29,800 --> 00:19:34,440
 is actually the rotation matrix plus the translation matrix,

276
00:19:34,440 --> 00:19:38,560
 plus three numbers plus the 3 by 3 rotation.

277
00:19:38,560 --> 00:19:39,720
 So it's a 3 by 4 matrix.

278
00:19:39,720 --> 00:19:50,040
 So when you go from, in this case, where the q vector

279
00:19:50,040 --> 00:19:54,240
 perfectly represents the position of the object,

280
00:19:54,240 --> 00:19:56,600
 that's its only job in this setting.

281
00:19:56,600 --> 00:19:58,040
 I've got a single free body.

282
00:19:58,040 --> 00:20:01,600
 The only job of q is to tell me where the body is in the world.

283
00:20:01,600 --> 00:20:04,360
 And I'm asking the question of the kinematics engine,

284
00:20:04,360 --> 00:20:07,680
 where is the body in the world?

285
00:20:07,680 --> 00:20:10,960
 It's kind of funny, but this kinematics function,

286
00:20:10,960 --> 00:20:13,960
 which in the robot case does lots of work, what it's doing

287
00:20:13,960 --> 00:20:17,360
 here is really just changing coordinates from quaternions

288
00:20:17,360 --> 00:20:18,400
 to rotation matrices.

289
00:20:19,400 --> 00:20:20,880
 Right?

290
00:20:20,880 --> 00:20:22,560
 It's still doing some work, but it's just

291
00:20:22,560 --> 00:20:27,080
 doing the change of representation.

292
00:20:27,080 --> 00:20:27,720
 Is that clear?

293
00:20:27,720 --> 00:20:34,240
 Because we're going to take derivatives of this in a second.

294
00:20:34,240 --> 00:20:35,840
 So you want to make sure it's clear.

295
00:20:35,840 --> 00:20:36,340
 Yeah?

296
00:20:36,340 --> 00:20:37,180
 AUDIENCE: I'm sorry.

297
00:20:37,180 --> 00:20:40,000
 So you were saying, in the case of an identity transform,

298
00:20:40,000 --> 00:20:40,960
 it's still doing work.

299
00:20:40,960 --> 00:20:43,080
 Is that what you're saying?

300
00:20:43,080 --> 00:20:44,580
 PROFESSOR: Let me say it carefully.

301
00:20:44,580 --> 00:20:46,760
 You might think it's the identity transform.

302
00:20:46,760 --> 00:20:50,520
 The same information is present here and here.

303
00:20:50,520 --> 00:20:53,940
 But it is not just an identity transform,

304
00:20:53,940 --> 00:20:56,800
 because the way that the orientations are represented

305
00:20:56,800 --> 00:21:00,360
 in the q vector are different than the 3 by 3 matrix.

306
00:21:00,360 --> 00:21:02,640
 It has to convert from quaternions

307
00:21:02,640 --> 00:21:05,240
 into rotation matrices in this transformation.

308
00:21:05,240 --> 00:21:07,320
 This function, as I've written it,

309
00:21:07,320 --> 00:21:08,520
 is not the identity matrix.

310
00:21:08,520 --> 00:21:09,440
 Or the identity.

311
00:21:09,440 --> 00:21:09,940
 [INAUDIBLE]

312
00:21:15,000 --> 00:21:18,160
 If you were to put xB on the object?

313
00:21:18,160 --> 00:21:19,160
 Tell me what you mean.

314
00:21:19,160 --> 00:21:19,660
 Yeah?

315
00:21:19,660 --> 00:21:20,160
 [INAUDIBLE]

316
00:21:20,160 --> 00:21:24,920
 This is just-- both of these contain the information,

317
00:21:24,920 --> 00:21:28,080
 which is, where is that object in the world?

318
00:21:28,080 --> 00:21:29,160
 Yeah?

319
00:21:29,160 --> 00:21:29,920
 Yeah?

320
00:21:29,920 --> 00:21:30,600
 No, that's good.

321
00:21:30,600 --> 00:21:33,920
 I appreciate the questions.

322
00:21:33,920 --> 00:21:34,680
 OK.

323
00:21:34,680 --> 00:21:38,840
 So we're going to take different gradients of this thing now.

324
00:21:38,840 --> 00:21:41,000
 And there was good questions about,

325
00:21:41,000 --> 00:21:43,200
 when is the inverse kinematics well-defined?

326
00:21:43,200 --> 00:21:45,880
 When are there many solutions?

327
00:21:45,880 --> 00:21:48,320
 So we're going to get into that in some detail here.

328
00:21:48,320 --> 00:21:50,320
 But we're going to see it through the lens first

329
00:21:50,320 --> 00:21:52,840
 of differential kinematics.

330
00:21:52,840 --> 00:21:56,360
 So if I have this function, which in the case of the EWA,

331
00:21:56,360 --> 00:22:02,080
 q is a bunch of joint angles, not quaternions.

332
00:22:02,080 --> 00:22:05,080
 But if I had the EWA and a red brick,

333
00:22:05,080 --> 00:22:09,160
 I might have the seven joints from EWA and the seven numbers

334
00:22:09,160 --> 00:22:12,400
 for the quaternion plus position of the brick.

335
00:22:12,400 --> 00:22:16,440
 Now, if I ask a question, given those configuration q,

336
00:22:16,440 --> 00:22:18,960
 what is the position of some body?

337
00:22:18,960 --> 00:22:21,000
 That's my function there.

338
00:22:21,000 --> 00:22:23,120
 What I want to think about is, what is the gradient

339
00:22:23,120 --> 00:22:25,080
 of that function?

340
00:22:25,080 --> 00:22:29,120
 So I want to say, if I make a small change in my q,

341
00:22:29,120 --> 00:22:33,360
 what does it look like as a small change in the pose?

342
00:22:33,360 --> 00:22:41,400
 And that's just a partial derivative of that function.

343
00:22:41,400 --> 00:22:44,080
 So the kinematics function, partial derivative.

344
00:22:44,080 --> 00:22:46,920
 And I think partial derivatives are basically

345
00:22:46,920 --> 00:22:48,720
 always called Jacobians.

346
00:22:48,720 --> 00:22:52,280
 But in robotics, we don't even say kinematic Jacobian.

347
00:22:52,280 --> 00:22:55,360
 We just say Jacobian, and everybody

348
00:22:55,360 --> 00:22:58,040
 knows we're talking about this particular Jacobian,

349
00:22:58,040 --> 00:23:01,360
 if there's no other context.

350
00:23:01,360 --> 00:23:04,320
 So we're going to try to study this object today,

351
00:23:04,320 --> 00:23:09,840
 understand when it's full rank, when it loses rank,

352
00:23:09,840 --> 00:23:12,120
 think about how to work with it to make a controller.

353
00:23:12,120 --> 00:23:24,560
 So I just did this as a sort of variation here on q.

354
00:23:24,560 --> 00:23:28,800
 But if I were to take dt, if I were to take a q dot here,

355
00:23:28,800 --> 00:23:32,640
 d dt of q, I get d dt on this side.

356
00:23:32,640 --> 00:23:38,920
 The derivative of this pose, d dt,

357
00:23:38,920 --> 00:23:45,800
 is the spatial velocity, so the change in pose over time.

358
00:23:45,800 --> 00:23:47,960
 And it's interesting to ask, this

359
00:23:47,960 --> 00:23:50,400
 was a-- we decided it was a 3 by 4 matrix.

360
00:23:50,400 --> 00:23:53,880
 That's how we choose to represent it for computations.

361
00:23:53,880 --> 00:23:56,120
 What's the right way to represent

362
00:23:56,120 --> 00:23:59,200
 a spatial velocity, the derivatives?

363
00:23:59,200 --> 00:24:01,120
 It turns out we're going to think of it

364
00:24:01,120 --> 00:24:05,840
 as a three element angular velocity and a three element

365
00:24:05,840 --> 00:24:08,260
 translational velocity.

366
00:24:08,260 --> 00:24:12,040
 So not the full 12 numbers.

367
00:24:12,040 --> 00:24:14,240
 We're back down to six numbers.

368
00:24:14,240 --> 00:24:16,480
 And the first point I want to make sure I land for you

369
00:24:16,480 --> 00:24:20,240
 is why that is, at least to some extent I want to land that.

370
00:24:20,240 --> 00:24:25,600
 But there's a lot of v's flying around here.

371
00:24:25,600 --> 00:24:27,520
 So let me just note the type setting.

372
00:24:27,520 --> 00:24:33,360
 So there was the LaTeX times Roman v,

373
00:24:33,360 --> 00:24:37,960
 which is my generalized velocities.

374
00:24:37,960 --> 00:24:41,120
 This v is translational velocities.

375
00:24:41,120 --> 00:24:43,440
 There's a lot of velocities, and they're all v.

376
00:24:43,440 --> 00:24:45,800
 And this is the spatial velocity, the capital.

377
00:24:45,800 --> 00:24:48,320
 I try to be super careful about that notation.

378
00:24:48,320 --> 00:24:50,760
 It's almost always clear from the context.

379
00:24:50,760 --> 00:24:55,800
 Sorry, not the context, but from when you're reading,

380
00:24:55,800 --> 00:24:57,120
 it should almost always be clear.

381
00:24:57,120 --> 00:24:59,760
 It's very rare that we have them all in one equation.

382
00:24:59,760 --> 00:25:01,920
 But nevertheless, I try to be really clear

383
00:25:01,920 --> 00:25:02,720
 with that notation.

384
00:25:07,000 --> 00:25:10,160
 So now the big question is, 3D rotations

385
00:25:10,160 --> 00:25:12,640
 were this weird thing that we needed

386
00:25:12,640 --> 00:25:16,600
 a bunch of different possible options to represent.

387
00:25:16,600 --> 00:25:18,920
 How do you represent angular velocity?

388
00:25:18,920 --> 00:25:20,920
 It's derivative of rotational orientation.

389
00:25:20,920 --> 00:25:28,280
 It turns out everything's good again.

390
00:25:28,280 --> 00:25:31,400
 Three numbers are sufficient.

391
00:25:31,400 --> 00:25:35,320
 The fundamental reason why that is-- so all the problems

392
00:25:35,320 --> 00:25:38,080
 with the coordinates is because when you wrap around a 2 pi,

393
00:25:38,080 --> 00:25:39,840
 you want to get the same number again.

394
00:25:39,840 --> 00:25:43,200
 The topology of that space wraps around

395
00:25:43,200 --> 00:25:47,080
 on 2 pi in each of the different coordinates.

396
00:25:47,080 --> 00:25:49,240
 Angular velocities don't have to wrap.

397
00:25:49,240 --> 00:25:51,560
 You can have an angular velocity greater than 2 pi.

398
00:25:51,560 --> 00:25:53,920
 There's nothing-- you can have an angular velocity

399
00:25:53,920 --> 00:25:56,880
 of a million in some direction.

400
00:25:56,880 --> 00:26:00,480
 There's no getting bigger, getting bigger,

401
00:26:00,480 --> 00:26:02,200
 and then I came back around.

402
00:26:02,200 --> 00:26:05,880
 The space is easier when you're in angular velocities.

403
00:26:05,880 --> 00:26:09,040
 And so it turns out that three numbers are sufficient.

404
00:26:09,040 --> 00:26:13,180
 You could pick various versions of three numbers.

405
00:26:13,180 --> 00:26:15,320
 You could pick the derivatives of roll pitch yaw

406
00:26:15,320 --> 00:26:16,840
 if you wanted to.

407
00:26:16,840 --> 00:26:19,840
 But the canonical one that has really nice properties

408
00:26:19,840 --> 00:26:23,960
 for our spatial algebra is this angular velocity vector,

409
00:26:23,960 --> 00:26:26,000
 which means something in particular.

410
00:26:26,000 --> 00:26:33,000
 It's basically the-- it's a three element vector.

411
00:26:33,000 --> 00:26:35,340
 It's three numbers.

412
00:26:35,340 --> 00:26:40,040
 We call them wx, wy, wz.

413
00:26:40,040 --> 00:26:42,560
 And if you think about the direction of those three

414
00:26:42,560 --> 00:26:48,840
 numbers, it's kind of the instantaneous axis of rotation.

415
00:26:48,840 --> 00:26:51,160
 And the magnitude of those three numbers

416
00:26:51,160 --> 00:26:54,760
 is the rate of rotation.

417
00:26:54,760 --> 00:26:56,320
 You may never need to know that.

418
00:26:56,320 --> 00:26:59,640
 But what's important to know is that three numbers are all

419
00:26:59,640 --> 00:27:02,360
 you need and you don't-- and we're going to-- they are

420
00:27:02,360 --> 00:27:05,800
 sufficient and efficient in all of our computations.

421
00:27:05,800 --> 00:27:07,800
 So we don't have a bunch of them flying around.

422
00:27:07,800 --> 00:27:10,080
 We just always use this one.

423
00:27:10,080 --> 00:27:11,080
 OK?

424
00:27:11,080 --> 00:27:14,040
 [INAUDIBLE]

425
00:27:14,040 --> 00:27:15,000
 Yes, it is.

426
00:27:15,000 --> 00:27:16,240
 Thank you.

427
00:27:16,240 --> 00:27:19,680
 That would be a lot more reasonable.

428
00:27:19,680 --> 00:27:20,640
 x, y, z.

429
00:27:20,640 --> 00:27:21,280
 Yes, thank you.

430
00:27:24,520 --> 00:27:25,020
 OK.

431
00:27:25,020 --> 00:27:32,240
 They have the same sort of rules of algebra

432
00:27:32,240 --> 00:27:33,800
 apply to spatial velocities.

433
00:27:33,800 --> 00:27:36,520
 And I won't write them up slowly on the board.

434
00:27:36,520 --> 00:27:38,640
 But basically, they add.

435
00:27:38,640 --> 00:27:41,480
 And you can use rotation matrices to change coordinates.

436
00:27:41,480 --> 00:27:43,200
 All the same rules apply.

437
00:27:43,200 --> 00:27:44,600
 OK?

438
00:27:44,600 --> 00:27:46,440
 It's less common that you will have

439
00:27:46,440 --> 00:27:48,080
 to manipulate the velocities.

440
00:27:48,080 --> 00:27:49,460
 The dynamics engine is going to do

441
00:27:49,460 --> 00:27:51,920
 a lot of manipulating of those velocities for you.

442
00:27:51,920 --> 00:27:55,320
 It's less common for you to have to know these rules.

443
00:27:55,320 --> 00:28:00,160
 But I find myself going back and just saying, OK, if I need them,

444
00:28:00,160 --> 00:28:02,080
 then I can look here.

445
00:28:02,080 --> 00:28:02,720
 OK?

446
00:28:02,720 --> 00:28:04,920
 And that's kind of the level I want you to have, too.

447
00:28:04,920 --> 00:28:10,200
 OK.

448
00:28:10,200 --> 00:28:12,160
 So let's just think this one through again.

449
00:28:12,160 --> 00:28:15,720
 Again, the simple case of a free body.

450
00:28:15,720 --> 00:28:16,240
 Right?

451
00:28:16,240 --> 00:28:16,840
 What is q?

452
00:28:16,840 --> 00:28:17,560
 What is v?

453
00:28:20,920 --> 00:28:22,720
 Well, let's do it carefully here.

454
00:28:22,720 --> 00:28:25,720
 So q, in the case of the single free body, we agreed,

455
00:28:25,720 --> 00:28:28,400
 was a seven element vector.

456
00:28:28,400 --> 00:28:32,480
 Three positions and four quaternions.

457
00:28:32,480 --> 00:28:36,080
 If I say plant.getVelocities, this

458
00:28:36,080 --> 00:28:38,000
 is the generalized velocities.

459
00:28:38,000 --> 00:28:40,640
 For the EWA, it would be joint velocities,

460
00:28:40,640 --> 00:28:42,280
 the rotations of each of those joints.

461
00:28:42,280 --> 00:28:48,260
 But for the free body, it's this v. OK?

462
00:28:48,260 --> 00:28:49,600
 What is v?

463
00:28:49,600 --> 00:28:52,720
 How big is it?

464
00:28:52,720 --> 00:28:54,680
 This time it's six elements.

465
00:28:54,680 --> 00:28:56,600
 OK?

466
00:28:56,600 --> 00:28:58,360
 So this is a six element vector.

467
00:28:58,360 --> 00:29:01,000
 Which is a little funny, because that

468
00:29:01,000 --> 00:29:05,640
 means the derivative of q is not necessarily v. Right?

469
00:29:05,640 --> 00:29:10,640
 In some cases it is, but in general,

470
00:29:10,640 --> 00:29:12,880
 there's some transformation that you

471
00:29:12,880 --> 00:29:16,920
 have to use to go back and forth between v and q dot.

472
00:29:16,920 --> 00:29:17,420
 OK.

473
00:29:17,420 --> 00:29:18,000
 Ask questions.

474
00:29:18,000 --> 00:29:18,760
 Is that clear?

475
00:29:18,760 --> 00:29:19,260
 Yes?

476
00:29:19,260 --> 00:29:24,720
 [INAUDIBLE]

477
00:29:24,720 --> 00:29:25,220
 Yeah.

478
00:29:25,220 --> 00:29:26,720
 This is the generalized velocities.

479
00:29:26,720 --> 00:29:31,160
 [INAUDIBLE]

480
00:29:31,160 --> 00:29:33,240
 That's translational velocity.

481
00:29:33,240 --> 00:29:36,320
 And then the capital is spatial velocity.

482
00:29:36,320 --> 00:29:36,820
 Yeah.

483
00:29:36,820 --> 00:29:37,320
 That's great.

484
00:29:37,320 --> 00:29:42,360
 OK.

485
00:29:42,360 --> 00:29:46,240
 This n is useful to know.

486
00:29:46,240 --> 00:29:50,840
 There's map q dot to velocity, map velocity to q dot.

487
00:29:50,840 --> 00:29:53,200
 You can go back and forth between them.

488
00:29:53,200 --> 00:29:56,860
 The transformation is a function of q.

489
00:29:56,860 --> 00:30:00,820
 So you pass in the context to get it.

490
00:30:00,820 --> 00:30:06,020
 This is like saying q times q dot and vice versa.

491
00:30:06,020 --> 00:30:06,820
 n is invertible.

492
00:30:06,820 --> 00:30:09,280
 Sorry.

493
00:30:09,280 --> 00:30:11,600
 OK.

494
00:30:11,600 --> 00:30:14,760
 So now the question is, so we sort of understand,

495
00:30:14,760 --> 00:30:17,440
 I think, a little bit more maybe some of the subtleties

496
00:30:17,440 --> 00:30:19,680
 of the representation.

497
00:30:19,680 --> 00:30:23,740
 But when I write now the derivative

498
00:30:23,740 --> 00:30:27,280
 of the forward kinematics, the output I get

499
00:30:27,280 --> 00:30:28,620
 is always going to be represented

500
00:30:28,620 --> 00:30:31,560
 as a spatial velocity of a body.

501
00:30:31,560 --> 00:30:34,600
 Six numbers.

502
00:30:34,600 --> 00:30:37,960
 I could take the derivative with respect to q dot

503
00:30:37,960 --> 00:30:42,280
 or with respect to v. Both of these are valid,

504
00:30:42,280 --> 00:30:44,840
 and both of those are available in the code.

505
00:30:44,840 --> 00:30:47,840
 But the Jacobian is going to always output spatial velocity.

506
00:30:47,840 --> 00:30:52,440
 All right.

507
00:30:52,440 --> 00:30:54,720
 So now let's step back and think about how

508
00:30:54,720 --> 00:30:56,180
 am I going to use that in the code?

509
00:30:56,180 --> 00:30:59,560
 Why is that the thing I want in order to move my robot?

510
00:30:59,560 --> 00:31:06,280
 So we said this on the board last time.

511
00:31:06,280 --> 00:31:09,120
 That's why the stuff I'm putting on the slides

512
00:31:09,120 --> 00:31:11,240
 is partly because people can see the slides better,

513
00:31:11,240 --> 00:31:15,280
 but also some of this is fleshing out

514
00:31:15,280 --> 00:31:18,280
 what we did last time.

515
00:31:18,280 --> 00:31:18,800
 OK.

516
00:31:18,800 --> 00:31:20,680
 So there's the different kinematics problems

517
00:31:20,680 --> 00:31:21,960
 we talked about.

518
00:31:21,960 --> 00:31:23,520
 We're the forward kinematics, which

519
00:31:23,520 --> 00:31:28,080
 goes from joint positions, generalized positions,

520
00:31:28,080 --> 00:31:28,680
 to pose.

521
00:31:28,680 --> 00:31:34,160
 We talked about inverse kinematics,

522
00:31:34,160 --> 00:31:38,240
 which goes from pose back to joint positions.

523
00:31:38,240 --> 00:31:41,760
 I put an asterisk there because I actually--

524
00:31:41,760 --> 00:31:43,720
 when we really cover inverse kinematics,

525
00:31:43,720 --> 00:31:46,220
 I'm going to try to give you a much richer, I think, picture

526
00:31:46,220 --> 00:31:48,360
 of inverse kinematics than just pose.

527
00:31:48,360 --> 00:31:50,520
 You might want to say, find me the closest pose,

528
00:31:50,520 --> 00:31:52,840
 but try to minimize something else

529
00:31:52,840 --> 00:31:54,840
 and try to stay inside joint limits and whatever.

530
00:31:54,840 --> 00:31:57,480
 There's a much richer way to specify inverse kinematics.

531
00:31:57,480 --> 00:31:59,040
 But the vanilla inverse kinematics

532
00:31:59,040 --> 00:32:00,640
 says, you've got an end effector.

533
00:32:00,640 --> 00:32:02,760
 Tell me what the joint positions are.

534
00:32:02,760 --> 00:32:05,080
 And this is where, when you were asking last time about,

535
00:32:05,080 --> 00:32:08,000
 are there multiple solutions, this problem absolutely

536
00:32:08,000 --> 00:32:09,760
 can have multiple solutions.

537
00:32:09,760 --> 00:32:11,280
 You could say the same end effector,

538
00:32:11,280 --> 00:32:12,520
 and there might be many joint angles that

539
00:32:12,520 --> 00:32:13,560
 would get the same end--

540
00:32:13,560 --> 00:32:15,160
 I'm trying to keep that still--

541
00:32:15,160 --> 00:32:15,840
 same end effector.

542
00:32:15,840 --> 00:32:19,720
 So that makes it a hard problem.

543
00:32:19,720 --> 00:32:22,560
 It's also a very nonlinear problem in general.

544
00:32:22,560 --> 00:32:25,880
 So it might be that some of my solvers--

545
00:32:25,880 --> 00:32:28,160
 OK, if you have exactly six degrees of freedom

546
00:32:28,160 --> 00:32:31,120
 in your robot, a serial chain robot,

547
00:32:31,120 --> 00:32:32,800
 there's closed form solutions for this.

548
00:32:32,800 --> 00:32:35,520
 And we know exactly where the solutions are.

549
00:32:35,520 --> 00:32:37,760
 As soon as you have seven degrees of freedom,

550
00:32:37,760 --> 00:32:39,080
 you have to do something more.

551
00:32:39,080 --> 00:32:40,960
 And when you have a humanoid, you definitely

552
00:32:40,960 --> 00:32:42,240
 have to do something more.

553
00:32:42,240 --> 00:32:45,080
 And there's not-- I mean, this is still

554
00:32:45,080 --> 00:32:46,240
 a hard problem in some ways.

555
00:32:46,240 --> 00:32:51,200
 OK.

556
00:32:51,200 --> 00:32:54,080
 How does differential kinematics fit in?

557
00:32:54,080 --> 00:32:56,840
 Differential kinematics goes from joint positions

558
00:32:56,840 --> 00:33:00,160
 and velocities to spatial velocity.

559
00:33:00,160 --> 00:33:05,960
 Jacobian was a function of q.

560
00:33:05,960 --> 00:33:07,920
 And it multiplied the joint velocities

561
00:33:07,920 --> 00:33:09,040
 to get to spatial velocity.

562
00:33:09,040 --> 00:33:15,200
 Differential inverse kinematics is going the other way.

563
00:33:15,200 --> 00:33:21,120
 It's going to use the Jacobian again,

564
00:33:21,120 --> 00:33:23,440
 something like the inverse of the Jacobian,

565
00:33:23,440 --> 00:33:25,760
 to try to go the other way.

566
00:33:25,760 --> 00:33:29,160
 So it's actually a function of spatial velocity

567
00:33:29,160 --> 00:33:30,000
 and joint positions.

568
00:33:30,000 --> 00:33:31,120
 I'll make this super clear.

569
00:33:31,120 --> 00:33:32,120
 Don't worry.

570
00:33:32,120 --> 00:33:34,000
 But roughly, it's going from spatial velocity

571
00:33:34,000 --> 00:33:36,200
 to joint velocity.

572
00:33:36,200 --> 00:33:38,200
 You know where you currently are.

573
00:33:38,200 --> 00:33:41,320
 So the map from spatial velocity to joint velocity

574
00:33:41,320 --> 00:33:45,240
 is a function of joint angles.

575
00:33:45,240 --> 00:33:47,800
 In our notation, it looks like this.

576
00:33:47,800 --> 00:33:49,880
 Basically, I'm going from q.

577
00:33:49,880 --> 00:33:54,280
 Inverse kinematics goes from q to pose.

578
00:33:54,280 --> 00:33:57,240
 Inverse kinematics, roughly, from pose back to q.

579
00:33:57,240 --> 00:34:03,880
 Differential kinematics is a configuration-dependent map

580
00:34:03,880 --> 00:34:10,240
 from generalized velocities to spatial velocities.

581
00:34:10,240 --> 00:34:13,160
 And inverse kinematics is trying to go from-- it's, again,

582
00:34:13,160 --> 00:34:15,840
 configuration-dependent map from spatial velocities

583
00:34:15,840 --> 00:34:16,600
 back to velocity.

584
00:34:16,600 --> 00:34:24,760
 My claim is inverse kinematics is hard.

585
00:34:24,760 --> 00:34:26,800
 Differential inverse kinematics, it

586
00:34:26,800 --> 00:34:29,320
 can still have multiple solutions and the like.

587
00:34:29,320 --> 00:34:31,600
 But it's all easy, because it's a linearization

588
00:34:31,600 --> 00:34:33,280
 of the hard problem.

589
00:34:33,280 --> 00:34:34,880
 And we're going to have good solutions for it

590
00:34:34,880 --> 00:34:36,160
 and be able to understand it completely.

591
00:34:36,160 --> 00:34:38,200
 And people use it on the robots all the time.

592
00:34:38,200 --> 00:34:42,780
 Yes?

593
00:34:42,780 --> 00:34:45,760
 When we talk about spatial velocity,

594
00:34:45,760 --> 00:34:48,720
 that's the velocity of the end effector, right?

595
00:34:48,720 --> 00:34:49,400
 Like the gripper.

596
00:34:49,400 --> 00:34:49,920
 Yep.

597
00:34:49,920 --> 00:34:52,360
 Exactly.

598
00:34:52,360 --> 00:34:55,360
 So the most common one we'll use is the spatial velocity

599
00:34:55,360 --> 00:34:56,760
 of the gripper frame.

600
00:34:56,760 --> 00:34:59,200
 So like what we're saying, like on the previous slide,

601
00:34:59,200 --> 00:35:03,320
 we're saying velocity to q dot.

602
00:35:03,320 --> 00:35:03,820
 Yep.

603
00:35:03,820 --> 00:35:06,080
 That would be the spatial velocity

604
00:35:06,080 --> 00:35:09,200
 to the joint angle velocity.

605
00:35:09,200 --> 00:35:10,480
 I'm glad you asked.

606
00:35:10,480 --> 00:35:11,920
 It's not that.

607
00:35:11,920 --> 00:35:17,680
 It's the little v. This is going from the generalized

608
00:35:17,680 --> 00:35:19,920
 velocities.

609
00:35:19,920 --> 00:35:21,560
 The generalized velocities may not

610
00:35:21,560 --> 00:35:24,880
 be the time derivative of the generalized positions,

611
00:35:24,880 --> 00:35:26,200
 but they're related.

612
00:35:26,200 --> 00:35:30,040
 So this is not necessarily a square matrix

613
00:35:30,040 --> 00:35:34,640
 that transforms little v, not spatial v,

614
00:35:34,640 --> 00:35:37,000
 to the time derivatives of the joint angles.

615
00:35:37,000 --> 00:35:45,720
 I don't know how to say that better.

616
00:35:45,720 --> 00:35:50,200
 But so this is a map.

617
00:35:50,200 --> 00:35:55,880
 I mean, this is really-- in the case of joint angles,

618
00:35:55,880 --> 00:35:57,280
 this is the identity map.

619
00:35:57,280 --> 00:35:58,960
 It does no work.

620
00:35:58,960 --> 00:36:01,080
 The only time it does work is when

621
00:36:01,080 --> 00:36:03,480
 you have a different representation

622
00:36:03,480 --> 00:36:06,520
 for the velocities than you do as the derivative

623
00:36:06,520 --> 00:36:08,200
 of the positions.

624
00:36:08,200 --> 00:36:11,480
 And that happens when you're doing these orientation things.

625
00:36:11,480 --> 00:36:14,720
 So if you had a quaternion in q, then you

626
00:36:14,720 --> 00:36:16,720
 don't use the time derivative of the quaternion.

627
00:36:16,720 --> 00:36:18,640
 You use the angular velocity vector.

628
00:36:18,640 --> 00:36:21,120
 So there's a change of variables that has to happen.

629
00:36:25,120 --> 00:36:25,920
 I'll ask later.

630
00:36:25,920 --> 00:36:26,840
 Yeah, yeah, it's good.

631
00:36:26,840 --> 00:36:27,520
 It's good.

632
00:36:27,520 --> 00:36:28,600
 I know when I've failed.

633
00:36:28,600 --> 00:36:34,240
 All right.

634
00:36:34,240 --> 00:36:38,280
 So we're going to now-- let me, before I put that up.

635
00:36:38,280 --> 00:36:44,680
 So here's the straw man proposal for how

636
00:36:44,680 --> 00:36:48,240
 we're going to start moving the end effector.

637
00:36:48,240 --> 00:37:00,200
 If I have-- and in the case, let's

638
00:37:00,200 --> 00:37:02,160
 think of this as a body.

639
00:37:02,160 --> 00:37:03,640
 Let's use the gripper frame.

640
00:37:03,640 --> 00:37:04,560
 I'll go ahead and, like you said,

641
00:37:04,560 --> 00:37:05,760
 that's the most common frame we're

642
00:37:05,760 --> 00:37:07,180
 going to use is the gripper frame.

643
00:37:07,180 --> 00:37:08,480
 So I'll make this gripper.

644
00:37:08,480 --> 00:37:13,520
 Although I wrote everything in-- if I read B later,

645
00:37:13,520 --> 00:37:15,640
 that's my-- this was a bad choice.

646
00:37:15,640 --> 00:37:19,240
 But OK.

647
00:37:19,240 --> 00:37:22,620
 So in this case, if I-- let's forget

648
00:37:22,620 --> 00:37:23,880
 the brick exists for a minute.

649
00:37:23,880 --> 00:37:27,360
 Let's just think about moving the EWA around.

650
00:37:27,360 --> 00:37:36,820
 So in that case, if it's just the EWA,

651
00:37:36,820 --> 00:37:45,000
 then this is seven joint velocities.

652
00:37:45,000 --> 00:37:47,760
 Because there happens to be seven degrees of freedom

653
00:37:47,760 --> 00:37:50,200
 on that robot.

654
00:37:50,200 --> 00:37:54,320
 This is my six element spatial velocity.

655
00:37:54,320 --> 00:38:13,640
 Now, what we had from last time was we had a bunch of grippers.

656
00:38:13,640 --> 00:38:17,080
 We had gripper at time equals 0.

657
00:38:17,080 --> 00:38:20,880
 We had gripper at time equals pre-pick.

658
00:38:20,880 --> 00:38:29,320
 Remember how we had the whole trajectory, right?

659
00:38:29,320 --> 00:38:33,000
 We actually turned that into a function

660
00:38:33,000 --> 00:38:35,160
 that was defined for all t in my interval.

661
00:38:42,520 --> 00:38:44,960
 0 to t final.

662
00:38:44,960 --> 00:38:45,640
 OK?

663
00:38:45,640 --> 00:38:47,120
 I'll try to write bigger, but I'm

664
00:38:47,120 --> 00:38:48,880
 hoping the video is better today.

665
00:38:48,880 --> 00:38:59,320
 And there's software that helps you represent that, right?

666
00:38:59,320 --> 00:39:02,320
 With piecewise polynomials, piecewise linear interpolation

667
00:39:02,320 --> 00:39:03,640
 of the positions.

668
00:39:03,640 --> 00:39:07,680
 You remember that we had to do that slurp for the quaternion.

669
00:39:07,680 --> 00:39:10,040
 But we had a nice representation of this

670
00:39:10,040 --> 00:39:11,160
 that defined it for all t.

671
00:39:11,600 --> 00:39:21,160
 You can take a derivative of that representation,

672
00:39:21,160 --> 00:39:25,880
 and it will give you another trajectory that's

673
00:39:25,880 --> 00:39:29,120
 the time derivative of the spatial velocity

674
00:39:29,120 --> 00:39:30,120
 as a function of time.

675
00:39:30,120 --> 00:39:39,120
 So my proposal is if I had my plan,

676
00:39:39,120 --> 00:39:42,200
 and it basically tells me what my end effect

677
00:39:42,200 --> 00:39:46,040
 or my gripper velocity should be at all times, spatial velocity,

678
00:39:46,040 --> 00:39:50,680
 then can I use this to decide what my joint angles should be?

679
00:39:50,680 --> 00:39:59,240
 And the proposal is something like I

680
00:39:59,240 --> 00:40:06,840
 want v of t to be the inverse of this.

681
00:40:07,600 --> 00:40:08,100
 Right?

682
00:40:08,100 --> 00:40:22,840
 This relationship is a nonlinear function of q,

683
00:40:22,840 --> 00:40:25,000
 but it's a linear function-- a linear relationship

684
00:40:25,000 --> 00:40:28,080
 between the-- it's just that gradients are always

685
00:40:28,080 --> 00:40:29,320
 a linear relationship, right?

686
00:40:29,320 --> 00:40:33,200
 But it's a linear relationship between the joint velocities

687
00:40:33,200 --> 00:40:34,760
 and the spatial velocities.

688
00:40:34,760 --> 00:40:38,540
 Since I know q, this is just a matrix.

689
00:40:38,540 --> 00:40:39,920
 And I can try to take its inverse

690
00:40:39,920 --> 00:40:42,280
 to try to go the other way.

691
00:40:42,280 --> 00:40:45,760
 That tells me, given I want to go in some direction,

692
00:40:45,760 --> 00:40:49,860
 what should my change in my joint angles be?

693
00:40:49,860 --> 00:40:51,800
 Now, if I write this, the natural question

694
00:40:51,800 --> 00:40:54,040
 is, can you take that inverse?

695
00:40:54,040 --> 00:40:54,720
 Does that work?

696
00:40:54,720 --> 00:41:00,000
 OK.

697
00:41:00,000 --> 00:41:01,840
 Can I take that inverse?

698
00:41:01,840 --> 00:41:03,960
 Does it work ever in this case?

699
00:41:03,960 --> 00:41:12,600
 What's the size of the matrix J?

700
00:41:12,600 --> 00:41:20,920
 6 by 7, which is not square.

701
00:41:20,920 --> 00:41:22,760
 So I shouldn't write that.

702
00:41:22,760 --> 00:41:27,040
 I kind of don't want that on the board, but I shouldn't.

703
00:41:27,040 --> 00:41:28,360
 I shouldn't take an inverse.

704
00:41:28,360 --> 00:41:31,920
 I can't take an inverse of a non-square matrix.

705
00:41:31,920 --> 00:41:34,160
 There are generalizations of the inverse

706
00:41:34,160 --> 00:41:35,780
 that can work for non-square matrices,

707
00:41:35,780 --> 00:41:38,960
 and we'll use them now, right?

708
00:41:38,960 --> 00:41:45,160
 So Jg of q is a 6 by 7 matrix.

709
00:41:45,160 --> 00:41:51,200
 Doesn't have an inverse, but the generalization

710
00:41:51,200 --> 00:41:52,120
 is the pseudo-inverse.

711
00:41:52,120 --> 00:42:01,680
 [WRITING ON BOARD]

712
00:42:01,680 --> 00:42:05,320
 How many people know the pseudo-inverse?

713
00:42:05,320 --> 00:42:07,840
 OK.

714
00:42:07,840 --> 00:42:13,200
 So everybody has their own favorite symbol for it, right?

715
00:42:13,200 --> 00:42:18,400
 I wrote this before as a minus 1, as the inverse.

716
00:42:18,400 --> 00:42:21,240
 People use music symbols and whatever.

717
00:42:21,240 --> 00:42:23,320
 I just use plus, OK?

718
00:42:23,320 --> 00:42:24,480
 Plus is my pseudo-inverse.

719
00:42:24,480 --> 00:42:38,400
 OK, and the question is now not does the inverse exist,

720
00:42:38,400 --> 00:42:42,720
 but the pseudo-inverse will always return something.

721
00:42:42,720 --> 00:42:44,760
 The question is, is it any good?

722
00:42:44,760 --> 00:42:46,840
 OK?

723
00:42:46,840 --> 00:42:49,720
 And we'll dig into exactly how you compute

724
00:42:49,720 --> 00:42:51,000
 the pseudo-inverse in a minute.

725
00:42:51,000 --> 00:42:56,480
 But first, just know that you could call P in the MATLAB.

726
00:42:56,480 --> 00:42:58,960
 It's a linear algebra operation, or a numpy,

727
00:42:58,960 --> 00:43:03,240
 and you can ask for the pseudo-inverse of a matrix.

728
00:43:03,240 --> 00:43:09,120
 And the question is, when does it work?

729
00:43:09,120 --> 00:43:13,040
 So in particular, what do I want?

730
00:43:13,040 --> 00:43:22,720
 If I put a desired VB in, and I use the pseudo-inverse here

731
00:43:22,720 --> 00:43:28,600
 to get a joint velocity, if I were to put that back through

732
00:43:28,600 --> 00:43:37,280
 and think about what was the resulting VB actual,

733
00:43:37,280 --> 00:43:40,920
 when does this equal this?

734
00:43:40,920 --> 00:43:42,520
 Did that make sense what I did?

735
00:43:42,520 --> 00:43:47,680
 I went from end-effector velocities

736
00:43:47,680 --> 00:43:53,720
 into joint velocities with a questionable pseudo-inverse.

737
00:43:53,720 --> 00:43:57,040
 And then I went from joint velocities

738
00:43:57,040 --> 00:43:58,320
 back to end-effector.

739
00:43:58,320 --> 00:44:01,040
 This one is always well-defined.

740
00:44:01,040 --> 00:44:02,600
 And the question is, when does that

741
00:44:02,600 --> 00:44:04,120
 become the identity matrix?

742
00:44:04,120 --> 00:44:08,920
 When does this work?

743
00:44:08,920 --> 00:44:12,160
 It can work even when it's a non-square matrix.

744
00:44:12,160 --> 00:44:14,080
 In fact, this is the good case in some sense,

745
00:44:14,080 --> 00:44:17,960
 because being 6 by 7 is the good case.

746
00:44:17,960 --> 00:44:21,760
 We have six things we're trying to do,

747
00:44:21,760 --> 00:44:25,680
 and seven joints with which to try to do them.

748
00:44:25,680 --> 00:44:29,640
 So you'd like to be optimistic about this,

749
00:44:29,640 --> 00:44:32,120
 that that transformation should work.

750
00:44:32,120 --> 00:44:33,480
 People know?

751
00:44:33,480 --> 00:44:35,120
 Do you know the property for that?

752
00:44:35,120 --> 00:44:40,600
 Yeah.

753
00:44:40,600 --> 00:44:46,320
 So full rank, which in this case would be at most the row

754
00:44:46,320 --> 00:44:47,360
 rank.

755
00:44:47,360 --> 00:44:48,880
 The rank of the non-square matrix

756
00:44:48,880 --> 00:44:51,920
 will be determined by the number-- the smaller

757
00:44:51,920 --> 00:44:52,880
 of the rows or columns.

758
00:44:52,880 --> 00:45:01,040
 So works when jq is full row rank.

759
00:45:07,360 --> 00:45:11,760
 Here, rank j equals 6.

760
00:45:11,760 --> 00:45:19,360
 Now that's a math answer, which is the right answer.

761
00:45:19,360 --> 00:45:20,860
 I mean, that's the question I asked.

762
00:45:20,860 --> 00:45:22,840
 But when you go to put it on the robot,

763
00:45:22,840 --> 00:45:25,520
 there's a-- rank is like true or false.

764
00:45:25,520 --> 00:45:26,760
 Is the rank 6?

765
00:45:26,760 --> 00:45:28,720
 It's a true or false question.

766
00:45:28,720 --> 00:45:30,660
 But what really matters is somehow

767
00:45:30,660 --> 00:45:32,440
 the condition of the matrix.

768
00:45:32,440 --> 00:45:37,680
 If you look at the singular values of j,

769
00:45:37,680 --> 00:45:42,060
 and the smallest singular value gets very close to 0,

770
00:45:42,060 --> 00:45:44,520
 then that means the matrix is getting numerically close

771
00:45:44,520 --> 00:45:48,480
 to being non-invertible in this sense.

772
00:45:48,480 --> 00:45:49,680
 And you start having problems.

773
00:45:49,680 --> 00:45:56,040
 Even if it strictly has rank, but the condition is very bad,

774
00:45:56,040 --> 00:45:59,860
 when the smallest singular value is small, close to 0,

775
00:45:59,860 --> 00:46:03,280
 that means that I might-- if I wanted

776
00:46:03,280 --> 00:46:06,640
 to make small movements in velocity here,

777
00:46:06,640 --> 00:46:10,880
 it might take ridiculously large joint velocities

778
00:46:10,880 --> 00:46:12,800
 to accomplish something small here,

779
00:46:12,800 --> 00:46:14,920
 if those eigenvalues, the singular values,

780
00:46:14,920 --> 00:46:17,160
 get very close to 0.

781
00:46:17,160 --> 00:46:20,880
 So what we really want to look at is the smallest

782
00:46:20,880 --> 00:46:21,600
 singular value.

783
00:46:29,080 --> 00:46:32,940
 It should be not-- when it gets close to 0

784
00:46:32,940 --> 00:46:34,260
 is when you have issues.

785
00:46:34,260 --> 00:46:45,340
 So luckily for our IWA, most of the time that's good.

786
00:46:45,340 --> 00:46:47,000
 Most of the time this is full row rank.

787
00:46:47,000 --> 00:46:48,700
 And I did some little animations,

788
00:46:48,700 --> 00:46:53,620
 which are in the notebook, so you can run them.

789
00:46:53,620 --> 00:46:56,500
 Start with this Jacobian one here.

790
00:46:56,500 --> 00:47:12,720
,

791
00:47:12,720 --> 00:47:17,600
 So what I have here is an unfortunate choice of screen

792
00:47:17,600 --> 00:47:18,100
 layout.

793
00:47:24,240 --> 00:47:30,620
 I have here a little notebook that just prints the Jacobian

794
00:47:30,620 --> 00:47:34,140
 when I move this thing around.

795
00:47:34,140 --> 00:47:36,020
 So I can move this around, and it's

796
00:47:36,020 --> 00:47:39,500
 going to print out the Jacobian, JG, the gripper Jacobian,

797
00:47:39,500 --> 00:47:42,340
 in a font that's probably not useful.

798
00:47:42,340 --> 00:47:45,180
 Make it a little bigger here.

799
00:47:45,180 --> 00:47:47,680
 And it also is just printing out the smallest singular value

800
00:47:47,680 --> 00:47:49,980
 of that Jacobian.

801
00:47:49,980 --> 00:47:52,880
 And the game is move this around,

802
00:47:52,880 --> 00:47:58,780
 convince yourself that in most configurations of this robot,

803
00:47:58,780 --> 00:47:59,620
 it's fine.

804
00:47:59,620 --> 00:48:03,060
 It's really pretty good.

805
00:48:03,060 --> 00:48:04,540
 How can I make it not good?

806
00:48:04,540 --> 00:48:08,220
 Yeah, right?

807
00:48:08,220 --> 00:48:12,420
 If I put it at the end of its-- if I put it like straight out,

808
00:48:12,420 --> 00:48:12,920
 right?

809
00:48:12,920 --> 00:48:20,700
 Like if I straight it out, now I've

810
00:48:20,700 --> 00:48:26,620
 got a smallest singular value of negative e to the negative 16.

811
00:48:26,620 --> 00:48:27,420
 Why is that?

812
00:48:27,420 --> 00:48:38,700
 The map saying I want to command an instantaneous velocity

813
00:48:38,700 --> 00:48:42,540
 in the end effector would require ridiculously large joint

814
00:48:42,540 --> 00:48:43,040
 angles.

815
00:48:43,040 --> 00:48:45,260
 I mean, this is just-- that's numerical nonsense.

816
00:48:45,260 --> 00:48:46,900
 That's zero.

817
00:48:46,900 --> 00:48:50,380
 It's saying that I would need infinite velocity

818
00:48:50,380 --> 00:48:53,300
 at the joints to achieve some desired force at the end

819
00:48:53,300 --> 00:48:54,780
 effector.

820
00:48:54,780 --> 00:48:57,940
 If you tried to go straight down, it's not going to work.

821
00:48:57,940 --> 00:48:59,780
 It would require-- if you wanted to move down

822
00:48:59,780 --> 00:49:03,540
 at a certain velocity, it would require infinite joint

823
00:49:03,540 --> 00:49:04,040
 velocities.

824
00:49:04,040 --> 00:49:08,220
 That's a funny thing, right?

825
00:49:08,220 --> 00:49:16,580
 Maybe you should have a problem with that.

826
00:49:16,580 --> 00:49:18,260
 That seems broken.

827
00:49:18,260 --> 00:49:20,660
 It seems like maybe we've just written the problem down

828
00:49:20,660 --> 00:49:21,220
 wrong, right?

829
00:49:21,220 --> 00:49:23,260
 Because clearly the robot can move back down.

830
00:49:23,260 --> 00:49:27,340
 How do I justify that?

831
00:49:27,340 --> 00:49:30,460
 Like, are singularities real, or is it just my math's bad?

832
00:49:30,460 --> 00:49:36,060
 The second derivative is non-zero.

833
00:49:36,060 --> 00:49:40,900
 The second derivative is non-zero.

834
00:49:40,900 --> 00:49:48,740
 So here's a super simple example to make that work out.

835
00:49:48,740 --> 00:49:51,420
 So this is just a two-link robot.

836
00:49:51,420 --> 00:49:53,220
 Each link is the same length.

837
00:49:53,220 --> 00:49:55,380
 So I can write the kinematics very simply.

838
00:49:55,380 --> 00:49:57,180
 And I'm going to just make it move

839
00:49:57,180 --> 00:50:00,540
 through the straight position like this.

840
00:50:00,540 --> 00:50:08,700
 So that's going through the singularity and back.

841
00:50:08,700 --> 00:50:10,020
 I can loop it.

842
00:50:10,020 --> 00:50:15,020
 I think I need to reflect it.

843
00:50:15,020 --> 00:50:15,780
 That'll be cool.

844
00:50:15,780 --> 00:50:22,700
 OK, so do you understand what's happening here?

845
00:50:22,700 --> 00:50:24,100
 Two-link pendulum, they just happen

846
00:50:24,100 --> 00:50:25,600
 to have exactly the same length that

847
00:50:25,600 --> 00:50:27,500
 makes the kinematics trivial.

848
00:50:27,500 --> 00:50:29,780
 It means I can write down the Jacobian.

849
00:50:29,780 --> 00:50:31,060
 It's a two by two matrix.

850
00:50:31,060 --> 00:50:32,500
 It's super simple.

851
00:50:32,500 --> 00:50:34,940
 And that Jacobian loses rank when

852
00:50:34,940 --> 00:50:39,620
 q's are zero like this, when it's straight out.

853
00:50:39,620 --> 00:50:42,700
 And I'm just telling the robot to go through q

854
00:50:42,700 --> 00:50:44,900
 as a sine wave, basically.

855
00:50:44,900 --> 00:50:48,660
 q1 and q2 are sine waves of scaled magnitude

856
00:50:48,660 --> 00:50:52,180
 so that they stay perfectly in that line.

857
00:50:52,180 --> 00:50:53,980
 OK, it's clearly going out and coming back.

858
00:50:53,980 --> 00:50:56,660
 It's not like it can't come back.

859
00:50:56,660 --> 00:50:58,100
 So what happens?

860
00:50:58,100 --> 00:51:02,540
 We already got an answer, right?

861
00:51:02,540 --> 00:51:09,460
 So at that instant of being completely out straight,

862
00:51:09,460 --> 00:51:14,420
 it is true that the Jacobian is singular.

863
00:51:14,420 --> 00:51:16,980
 If I wanted to instantaneously command a velocity back here,

864
00:51:16,980 --> 00:51:18,780
 I would fail.

865
00:51:18,780 --> 00:51:22,620
 But I can accelerate back in that direction.

866
00:51:22,620 --> 00:51:24,740
 The derivative is OK.

867
00:51:24,740 --> 00:51:26,660
 I can accelerate in that direction

868
00:51:26,660 --> 00:51:29,100
 and get myself out of the singularity

869
00:51:29,100 --> 00:51:32,300
 and eventually get back and everything's good again.

870
00:51:32,300 --> 00:51:38,360
 So it is absolutely true that the map that

871
00:51:38,360 --> 00:51:42,340
 goes from joint velocities to end-effector velocities

872
00:51:42,340 --> 00:51:43,620
 has a problem.

873
00:51:43,620 --> 00:51:47,380
 You cannot invert that map at this configuration.

874
00:51:47,380 --> 00:51:49,220
 It does not mean your robot is stuck there

875
00:51:49,220 --> 00:51:51,140
 for the rest of time.

876
00:51:51,140 --> 00:51:52,740
 I mean, with some controllers, it is.

877
00:51:52,740 --> 00:51:58,980
 So we're not going to handle that case beautifully

878
00:51:58,980 --> 00:52:00,740
 with a pseudo-inverse controller.

879
00:52:00,740 --> 00:52:01,860
 We're not going to try to.

880
00:52:01,860 --> 00:52:04,100
 We'll handle it in a different way.

881
00:52:04,100 --> 00:52:07,260
 But in the case where we're close to full rank,

882
00:52:07,260 --> 00:52:11,460
 we'd expect this sort of pseudo-inverse to work well.

883
00:52:11,460 --> 00:52:15,860
 The scary thing is when you get close to singularity

884
00:52:15,860 --> 00:52:18,940
 and then you start commanding very large velocities.

885
00:52:18,940 --> 00:52:20,940
 Those are the kind of things that we definitely

886
00:52:20,940 --> 00:52:21,780
 do want to address.

887
00:52:21,780 --> 00:52:29,720
 Questions?

888
00:52:29,720 --> 00:52:33,580
 You see one?

889
00:52:33,580 --> 00:52:34,080
 OK, there.

890
00:52:34,080 --> 00:52:35,180
 Yes.

891
00:52:35,180 --> 00:52:35,820
 Oh, I'm sorry.

892
00:52:35,820 --> 00:52:36,320
 Down here.

893
00:52:36,320 --> 00:52:37,340
 I'll get you next.

894
00:52:37,340 --> 00:52:37,840
 I'm sorry.

895
00:52:37,840 --> 00:52:42,300
 So this is for not being able to move within our range of motion.

896
00:52:42,300 --> 00:52:45,300
 Can we capture not being able to move outside of our range

897
00:52:45,300 --> 00:52:49,740
 of motion, outside of our range of motion as well?

898
00:52:49,740 --> 00:52:50,220
 I see.

899
00:52:50,220 --> 00:52:53,660
 So I think the question is, what math

900
00:52:53,660 --> 00:52:55,860
 tells me that I can't go out there,

901
00:52:55,860 --> 00:52:58,180
 beyond the reach of the robot?

902
00:52:58,180 --> 00:53:02,300
 I mean, differentially, this is still telling me,

903
00:53:02,300 --> 00:53:05,540
 also if I commanded in this direction, it will fail.

904
00:53:05,540 --> 00:53:07,940
 And similarly, if I'm at the edge of some workspace

905
00:53:07,940 --> 00:53:11,020
 and I'm trying to go-- this is what happens, actually,

906
00:53:11,020 --> 00:53:13,900
 is you command yourself to go farther than you should.

907
00:53:13,900 --> 00:53:18,380
 Your arm goes straight and the robot goes crazy.

908
00:53:18,380 --> 00:53:22,540
 So the math does tell you that in both directions.

909
00:53:22,540 --> 00:53:25,780
 And it's very much a differential quantity.

910
00:53:25,780 --> 00:53:27,700
 So it's only telling you, as a function of this,

911
00:53:27,700 --> 00:53:29,180
 which directions can I move.

912
00:53:29,180 --> 00:53:32,340
 It's not an absolute workspace analysis.

913
00:53:32,340 --> 00:53:35,940
 It's just instantaneously, can I move in that direction?

914
00:53:35,940 --> 00:53:37,420
 Sorry.

915
00:53:37,420 --> 00:53:41,420
 So if we say that in that position

916
00:53:41,420 --> 00:53:44,900
 we can't have [INAUDIBLE] velocity,

917
00:53:44,900 --> 00:53:48,380
 then is it that we tell the robot

918
00:53:48,380 --> 00:53:51,360
 hard to have an acceleration?

919
00:53:51,360 --> 00:53:53,340
 And what would that mean?

920
00:53:53,340 --> 00:53:53,940
 Great question.

921
00:53:53,940 --> 00:53:56,740
 Yeah, so if I was writing a really good controller

922
00:53:56,740 --> 00:53:58,700
 and I found myself in this position,

923
00:53:58,700 --> 00:54:01,340
 I would start commanding an acceleration.

924
00:54:01,340 --> 00:54:04,340
 Or I could forget about trying to command an end effect

925
00:54:04,340 --> 00:54:07,540
 or I could just command-- this controller is just--

926
00:54:07,540 --> 00:54:09,060
 it makes a Q trajectory.

927
00:54:09,060 --> 00:54:11,220
 It says, forget about the end effect for a minute.

928
00:54:11,220 --> 00:54:13,860
 I'm just going to move the joint angles through some simple

929
00:54:13,860 --> 00:54:15,340
 function.

930
00:54:15,340 --> 00:54:17,220
 But somehow, in that situation, you

931
00:54:17,220 --> 00:54:20,060
 have to give up on commanding via the velocity of the end

932
00:54:20,060 --> 00:54:21,500
 effector.

933
00:54:21,500 --> 00:54:21,980
 Great.

934
00:54:21,980 --> 00:54:22,480
 Yes.

935
00:54:22,480 --> 00:54:24,980
 I'm not able to distinguish my intuition

936
00:54:24,980 --> 00:54:28,500
 between this motion, which is the side wave,

937
00:54:28,500 --> 00:54:31,460
 and let's say we had the same end effector motion,

938
00:54:31,460 --> 00:54:33,460
 but just going half the distance.

939
00:54:33,460 --> 00:54:35,460
 So you go out there.

940
00:54:35,460 --> 00:54:37,660
 And somehow that would be within the range of motion

941
00:54:37,660 --> 00:54:38,740
 and would be controllable.

942
00:54:38,740 --> 00:54:41,940
 But the motion is the same.

943
00:54:41,940 --> 00:54:46,460
 I'm not able to picture why at any point

944
00:54:46,460 --> 00:54:49,380
 here you can't have immediately a velocity and only

945
00:54:49,380 --> 00:54:50,180
 an acceleration.

946
00:54:50,180 --> 00:54:50,660
 Great.

947
00:54:50,660 --> 00:54:53,380
 So I mean, I can't flip in that case.

948
00:54:53,380 --> 00:54:56,220
 But let's say I was just going like this and back.

949
00:54:56,220 --> 00:54:57,500
 This is your example.

950
00:54:57,500 --> 00:54:59,780
 But not going to full extension.

951
00:54:59,780 --> 00:55:03,900
 That at any one of those configurations,

952
00:55:03,900 --> 00:55:06,820
 if I wanted to command a particular xy position--

953
00:55:06,820 --> 00:55:09,100
 velocity, sorry-- of the end effector,

954
00:55:09,100 --> 00:55:15,140
 I could do so with a reasonable velocity in the joint angles.

955
00:55:15,140 --> 00:55:16,940
 So that's the big difference.

956
00:55:16,940 --> 00:55:19,220
 In all of those configurations here,

957
00:55:19,220 --> 00:55:21,500
 I still have the ability to command a velocity

958
00:55:21,500 --> 00:55:23,020
 in the end effector.

959
00:55:23,020 --> 00:55:27,400
 It's only when my Jacobian becomes close to singular

960
00:55:27,400 --> 00:55:29,740
 that I-- and when it's close to singular,

961
00:55:29,740 --> 00:55:32,300
 it just requires ridiculously large velocities.

962
00:55:32,300 --> 00:55:36,420
 And then when it's singular, there is no velocity.

963
00:55:36,420 --> 00:55:37,980
 That's the critical difference is

964
00:55:37,980 --> 00:55:42,220
 that it's really because these things line up.

965
00:55:42,220 --> 00:55:47,260
 And so think about the effect that moving this angle has

966
00:55:47,260 --> 00:55:49,220
 on the end effector velocity.

967
00:55:49,220 --> 00:55:53,140
 It moves in both x and y here.

968
00:55:53,140 --> 00:55:55,460
 But when I'm here, it only moves in y.

969
00:55:55,460 --> 00:55:59,300
 If I had a multi-jointed elbow.

970
00:55:59,300 --> 00:56:03,620
 So the ability to command an x with respect to this is gone.

971
00:56:03,620 --> 00:56:06,180
 And similarly, the ability to command

972
00:56:06,180 --> 00:56:10,580
 an x that direction in this joint angle is gone.

973
00:56:10,580 --> 00:56:13,300
 And the rank of that matrix is what tells you that's true.

974
00:56:13,300 --> 00:56:19,260
 It's really just the trigonometry

975
00:56:19,260 --> 00:56:22,220
 of what a small delta in that angle

976
00:56:22,220 --> 00:56:25,220
 is going to produce at the end effector.

977
00:56:25,220 --> 00:56:26,060
 So yeah, sure.

978
00:56:26,060 --> 00:56:26,560
 Yeah.

979
00:56:26,560 --> 00:56:31,020
 Does [INAUDIBLE] always happen at the edge of the world?

980
00:56:31,020 --> 00:56:31,520
 No.

981
00:56:31,520 --> 00:56:34,060
 You could have it similarly if I were to-- you guys,

982
00:56:34,060 --> 00:56:36,500
 I need to do some yoga or something.

983
00:56:36,500 --> 00:56:40,180
 But if I were to go like this, right?

984
00:56:40,180 --> 00:56:42,660
 And if I folded back in on myself, for instance,

985
00:56:42,660 --> 00:56:44,700
 that could be on the inside of-- it's still maybe,

986
00:56:44,700 --> 00:56:47,100
 you could call it the edge of a configuration space,

987
00:56:47,100 --> 00:56:47,600
 workspace.

988
00:56:47,600 --> 00:56:48,100
 [INAUDIBLE]

989
00:56:48,100 --> 00:56:53,820
 That's right.

990
00:56:53,820 --> 00:56:55,900
 That's right.

991
00:56:55,900 --> 00:56:57,700
 Yeah, OK, so is there ever an example?

992
00:56:57,700 --> 00:56:59,900
 I think with more complicated mechanisms,

993
00:56:59,900 --> 00:57:02,780
 you could say if you had a four-bar linkage or something,

994
00:57:02,780 --> 00:57:04,940
 you could probably get yourself in trouble, even

995
00:57:04,940 --> 00:57:09,140
 in the comfort of the middle of your workspace.

996
00:57:09,140 --> 00:57:11,300
 But it's certainly common that you would be--

997
00:57:11,300 --> 00:57:13,060
 it's at the end of the workspace.

998
00:57:13,060 --> 00:57:13,560
 Yes?

999
00:57:13,560 --> 00:57:17,380
 So I guess, say you were sitting in your lab

1000
00:57:17,380 --> 00:57:20,300
 and you're running a robot, what would happen?

1001
00:57:20,300 --> 00:57:22,220
 And what would make this happen in terms

1002
00:57:22,220 --> 00:57:23,780
 of what you get close to singular?

1003
00:57:23,780 --> 00:57:26,420
 In practice, could you break your robot?

1004
00:57:26,420 --> 00:57:28,820
 Robots have broken because some people

1005
00:57:28,820 --> 00:57:30,860
 used simple Jacobian controllers and got

1006
00:57:30,860 --> 00:57:32,620
 too close to singularities, yeah.

1007
00:57:32,620 --> 00:57:34,740
 And in the '80s in particular, there

1008
00:57:34,740 --> 00:57:36,740
 was a series of papers about what's the right way

1009
00:57:36,740 --> 00:57:39,140
 to do this sort of control.

1010
00:57:39,140 --> 00:57:41,260
 And they worried very much about not blowing up

1011
00:57:41,260 --> 00:57:42,780
 during the singularities.

1012
00:57:42,780 --> 00:57:43,700
 Absolutely, yeah.

1013
00:57:43,700 --> 00:57:45,340
 What physically happens?

1014
00:57:45,340 --> 00:57:47,300
 What physically happens?

1015
00:57:47,300 --> 00:57:49,860
 Yeah, so typically nowadays, the controllers,

1016
00:57:49,860 --> 00:57:51,780
 that big box underneath the robot,

1017
00:57:51,780 --> 00:57:55,740
 says you've asked for a big velocity, and it turns off.

1018
00:57:55,740 --> 00:57:58,240
 If you've made your own robot and you didn't put that safety

1019
00:57:58,240 --> 00:58:03,980
 protection in, then I did throw a robot across the room once.

1020
00:58:03,980 --> 00:58:05,660
 Yeah, that can happen.

1021
00:58:05,660 --> 00:58:09,580
 And there's big red buttons next to the big robots

1022
00:58:09,580 --> 00:58:11,340
 in case that starts to happen.

1023
00:58:11,340 --> 00:58:13,580
 But it can really--

1024
00:58:13,580 --> 00:58:14,300
 that math is bad.

1025
00:58:14,300 --> 00:58:17,420
 You shouldn't apply that joint velocity command.

1026
00:58:20,180 --> 00:58:28,060
 OK, so I want to spend the rest of the lecture thinking

1027
00:58:28,060 --> 00:58:32,260
 about maybe a generalized version of that pseudo-inverse,

1028
00:58:32,260 --> 00:58:34,020
 the different view on that pseudo-inverse.

1029
00:58:34,020 --> 00:58:35,740
 And it's going to at least help us

1030
00:58:35,740 --> 00:58:38,140
 think about putting some of the guardrails

1031
00:58:38,140 --> 00:58:40,500
 on so that it doesn't throw the robot across the room

1032
00:58:40,500 --> 00:58:45,580
 or fault the controller that's trying to keep you safe.

1033
00:58:45,580 --> 00:58:49,980
 And I'm going to do that by first just making

1034
00:58:49,980 --> 00:58:54,060
 us think about the optimization view of what

1035
00:58:54,060 --> 00:58:56,420
 the pseudo-inverse is doing.

1036
00:58:56,420 --> 00:58:58,300
 So I like optimization.

1037
00:58:58,300 --> 00:58:59,940
 That's a thing.

1038
00:58:59,940 --> 00:59:02,540
 And there's a lot of the tools from class

1039
00:59:02,540 --> 00:59:05,980
 that will use the language of optimization.

1040
00:59:05,980 --> 00:59:09,420
 And really, the code, the equations

1041
00:59:09,420 --> 00:59:13,780
 that are giving us the pseudo-inverse, I think,

1042
00:59:13,780 --> 00:59:16,340
 are best understood as the solution

1043
00:59:16,340 --> 00:59:19,780
 to an optimization problem.

1044
00:59:19,780 --> 00:59:22,060
 And once we think about it that way,

1045
00:59:22,060 --> 00:59:24,700
 then it becomes natural to put on a few extra protections

1046
00:59:24,700 --> 00:59:27,740
 and write a slightly different optimization problem that

1047
00:59:27,740 --> 00:59:34,140
 can say, try to do that, but don't blow up, for instance.

1048
00:59:34,140 --> 00:59:35,740
 So let's think about pseudo-inverse

1049
00:59:35,740 --> 00:59:36,540
 as an optimization.

1050
00:59:36,540 --> 00:59:53,180
 So what I want to say is it's something--

1051
00:59:53,180 --> 00:59:56,020
 what I'm writing here is really something

1052
00:59:56,020 --> 00:59:57,660
 that looks kind of like this.

1053
00:59:57,660 --> 01:00:11,300
 Find me joint velocities such that the end-effector velocity

1054
01:00:11,300 --> 01:00:14,980
 is approximately equal to the desired spatial velocity.

1055
01:00:14,980 --> 01:00:25,060
 I wrote it by taking that-- the pseudo-inverse

1056
01:00:25,060 --> 01:00:27,740
 is sort of the solution to try to do that.

1057
01:00:27,740 --> 01:00:30,340
 But think about it in its sort of primal form.

1058
01:00:30,340 --> 01:00:34,420
 I'm trying to solve for a v such that this map comes

1059
01:00:34,420 --> 01:00:35,340
 close to my desired.

1060
01:00:35,340 --> 01:00:41,940
 Since q is given in this case, we

1061
01:00:41,940 --> 01:00:43,860
 know where our robot is at any moment in time.

1062
01:00:43,860 --> 01:00:54,700
 So really, this just looks like-- I could write this.

1063
01:00:54,700 --> 01:00:56,700
 If I abstract away from the robot a little bit,

1064
01:00:56,700 --> 01:00:59,300
 this is just like saying, find me an x such that Ax is

1065
01:00:59,300 --> 01:01:00,420
 approximately equal to b.

1066
01:01:00,420 --> 01:01:04,820
 This is just a 6-vector.

1067
01:01:04,820 --> 01:01:05,860
 I'll call it b this time.

1068
01:01:05,860 --> 01:01:07,580
 And this is Jacobian.

1069
01:01:07,580 --> 01:01:09,100
 In the language of linear algebra,

1070
01:01:09,100 --> 01:01:11,620
 this is really just Ax equals b.

1071
01:01:11,620 --> 01:01:13,300
 And you can call it slash and map

1072
01:01:13,300 --> 01:01:14,900
 by-- to solve that, that's one of the ways

1073
01:01:14,900 --> 01:01:16,500
 to call a pseudo-inverse, for instance.

1074
01:01:20,180 --> 01:01:26,380
 Now, a way to write this as an optimization

1075
01:01:26,380 --> 01:01:33,420
 is instead to say, let's try to minimize some error term.

1076
01:01:33,420 --> 01:01:36,300
 So I'm going to minimize the penalty, the difference

1077
01:01:36,300 --> 01:01:38,780
 between Ax and b.

1078
01:01:38,780 --> 01:01:46,820
 So I've got some distance function, some cost function

1079
01:01:46,820 --> 01:01:49,060
 that says, basically, I'm going to penalize.

1080
01:01:49,060 --> 01:01:52,500
 And in this case, I've chosen in what directions--

1081
01:01:52,500 --> 01:01:55,360
 I've chosen the cost function, so it

1082
01:01:55,360 --> 01:01:59,380
 says what my values are in terms of what kind of deviations

1083
01:01:59,380 --> 01:02:02,620
 I like and what I don't like.

1084
01:02:02,620 --> 01:02:04,420
 But this is sort of a standard way

1085
01:02:04,420 --> 01:02:08,100
 to say, try to find me an x such that Ax is approximately

1086
01:02:08,100 --> 01:02:08,620
 equal to b.

1087
01:02:08,620 --> 01:02:14,540
 If the error goes to 0, then I've solved the problem.

1088
01:02:14,540 --> 01:02:16,820
 And I would expect that to be true

1089
01:02:16,820 --> 01:02:19,980
 when j has these properties.

1090
01:02:19,980 --> 01:02:23,860
 But this problem makes sense even when j can't get you to--

1091
01:02:23,860 --> 01:02:26,700
 when a is such that I can't drive this error directly

1092
01:02:26,700 --> 01:02:28,180
 to 0.

1093
01:02:28,180 --> 01:02:30,580
 So you see how that's kind of a more robust specification

1094
01:02:30,580 --> 01:02:31,260
 of the problem.

1095
01:02:31,260 --> 01:02:45,460
 So this is where I give a-- I'm going

1096
01:02:45,460 --> 01:02:47,700
 to start using some of the language of optimization.

1097
01:02:47,700 --> 01:02:49,940
 But it'll be, I think, a gentle introduction to that.

1098
01:02:49,940 --> 01:02:57,380
 Let's even do it in the scalar case.

1099
01:02:57,380 --> 01:03:06,260
 So think about what does the geometry of that problem

1100
01:03:06,260 --> 01:03:07,180
 look like.

1101
01:03:07,180 --> 01:03:20,300
 So if I said-- just like that, right?

1102
01:03:20,300 --> 01:03:23,300
 No vector norms, nothing.

1103
01:03:23,300 --> 01:03:26,420
 This is just a squared of a scalar.

1104
01:03:26,420 --> 01:03:28,140
 a is a scalar, b is a scalar of the data.

1105
01:03:28,140 --> 01:03:30,620
 I'm trying to find the smallest x.

1106
01:03:30,620 --> 01:03:32,500
 I think the geometry of that problem

1107
01:03:32,500 --> 01:03:35,060
 is easy to think about.

1108
01:03:35,340 --> 01:03:37,380
 Right?

1109
01:03:37,380 --> 01:03:39,460
 This looks like a quadratic form.

1110
01:03:39,460 --> 01:03:48,020
 This is my ax minus b squared.

1111
01:03:48,020 --> 01:03:50,900
 This is x.

1112
01:03:50,900 --> 01:03:53,300
 And somewhere, there's a happy place

1113
01:03:53,300 --> 01:03:58,100
 where I'm at the minimum of that.

1114
01:03:58,100 --> 01:04:01,740
 And I'll call this the solution x star.

1115
01:04:02,500 --> 01:04:10,420
 And for this particular problem, we

1116
01:04:10,420 --> 01:04:13,420
 can find x star very easily by just taking

1117
01:04:13,420 --> 01:04:16,540
 the gradient of that function, asking when

1118
01:04:16,540 --> 01:04:18,940
 the gradient is equal to 0.

1119
01:04:18,940 --> 01:04:21,940
 And that's going to tell us, since I know that in the case

1120
01:04:21,940 --> 01:04:25,620
 where this curve is pointed up, it's

1121
01:04:25,620 --> 01:04:29,140
 a positive definite function.

1122
01:04:29,140 --> 01:04:30,260
 It's a convex function.

1123
01:04:30,260 --> 01:04:33,700
 Then the minimum is going to give me the solution.

1124
01:04:33,700 --> 01:04:36,380
 The place where the gradient equals 0.

1125
01:04:36,380 --> 01:04:42,100
 So I take the gradient with respect to x of ax minus b

1126
01:04:42,100 --> 01:04:46,020
 squared, set it equal to 0.

1127
01:04:46,020 --> 01:04:49,180
 And this tells me that the solution to that, just worked

1128
01:04:49,180 --> 01:04:53,340
 out, is just b over a.

1129
01:04:53,340 --> 01:04:53,840
 Right?

1130
01:04:53,840 --> 01:05:02,940
 So does that always have a solution?

1131
01:05:02,940 --> 01:05:07,860
 I'm just sort of asking sort of an almost trivial question,

1132
01:05:07,860 --> 01:05:10,860
 I guess.

1133
01:05:10,860 --> 01:05:12,300
 a better not be 0.

1134
01:05:12,300 --> 01:05:14,300
 Right?

1135
01:05:14,300 --> 01:05:17,200
 So what happens when a is very small?

1136
01:05:17,200 --> 01:05:20,860
 That's kind of what's happening as we get close to our singularity.

1137
01:05:20,860 --> 01:05:24,860
 When a is very small, this thing starts

1138
01:05:24,860 --> 01:05:28,660
 getting more and more elongated.

1139
01:05:28,660 --> 01:05:33,380
 This cost function, as I get small, it goes like this.

1140
01:05:33,380 --> 01:05:36,140
 And then maybe it goes like this.

1141
01:05:36,140 --> 01:05:36,640
 Right?

1142
01:05:36,640 --> 01:05:37,980
 And it's going to move out.

1143
01:05:37,980 --> 01:05:41,580
 And the optimal solution is going to move out this way.

1144
01:05:41,580 --> 01:05:43,940
 That's the geometry of what's happening here,

1145
01:05:43,940 --> 01:05:48,180
 is that my cost function, as I change a and make a very small,

1146
01:05:48,180 --> 01:05:51,740
 it's going to move the solution more and more towards infinity.

1147
01:05:51,740 --> 01:05:55,740
 Right?

1148
01:05:55,740 --> 01:05:58,180
 That's just saying when a gets close to 0,

1149
01:05:58,180 --> 01:06:00,980
 x star is going to go to infinity.

1150
01:06:00,980 --> 01:06:05,660
 And the objective function follows suit, as it should.

1151
01:06:05,660 --> 01:06:06,160
 OK.

1152
01:06:06,160 --> 01:06:09,580
 So that's bad.

1153
01:06:09,580 --> 01:06:10,100
 Right?

1154
01:06:10,100 --> 01:06:11,820
 You don't want x star to go to infinity.

1155
01:06:11,820 --> 01:06:13,500
 And that's exactly what happens.

1156
01:06:13,500 --> 01:06:18,020
 That's what's in danger of happening when the Jacobian loses

1157
01:06:18,020 --> 01:06:18,520
 rank.

1158
01:06:18,520 --> 01:06:24,740
 OK, so the matrix form of that-- are there

1159
01:06:24,740 --> 01:06:25,660
 questions about that?

1160
01:06:25,660 --> 01:06:37,940
 The matrix form requires more linear algebra, of course,

1161
01:06:37,940 --> 01:06:40,540
 but is really exactly the same math.

1162
01:06:40,540 --> 01:06:41,040
 OK?

1163
01:06:42,040 --> 01:07:02,680
 So if I want to say minimize over x, now ax minus b,

1164
01:07:02,680 --> 01:07:06,320
 I can multiply this out if I wanted to.

1165
01:07:06,320 --> 01:07:11,640
 This is going to give me a transpose ax plus--

1166
01:07:11,640 --> 01:07:19,880
 if I multiply it out, I guess it's minus 2b transpose ax

1167
01:07:19,880 --> 01:07:21,760
 plus b squared.

1168
01:07:21,760 --> 01:07:25,520
 It's just another quadratic equation.

1169
01:07:25,520 --> 01:07:26,240
 Right?

1170
01:07:26,240 --> 01:07:32,800
 And in two dimensions, if I had x1 and x2,

1171
01:07:32,800 --> 01:07:37,720
 it's still going to just look like a quadratic function.

1172
01:07:37,720 --> 01:07:39,400
 Right?

1173
01:07:39,400 --> 01:07:41,640
 And it's going to have some optimum at the bottom.

1174
01:07:41,640 --> 01:07:53,020
 Right?

1175
01:07:53,020 --> 01:07:56,280
 Everything holds in the matrix case.

1176
01:07:56,280 --> 01:07:57,280
 I can do the same thing.

1177
01:07:57,280 --> 01:08:00,920
 I can take the gradient of that function with respect to x.

1178
01:08:00,920 --> 01:08:03,360
 Now I do a little bit of gradient math.

1179
01:08:03,360 --> 01:08:21,640
 And I set that equal to 0.

1180
01:08:21,640 --> 01:08:25,600
 And I find out that the slight generalization of what

1181
01:08:25,600 --> 01:08:36,600
 I did there is just b transpose a inverse.

1182
01:08:36,600 --> 01:08:43,680
 And guess what?

1183
01:08:43,680 --> 01:08:47,000
 This thing here is what you get when

1184
01:08:47,000 --> 01:08:48,160
 you call the pseudo-inverse.

1185
01:08:48,160 --> 01:08:48,660
 Right?

1186
01:08:48,660 --> 01:08:52,680
 There's a left and a right pseudo-inverse,

1187
01:08:52,680 --> 01:08:56,600
 and this is the one we're using today.

1188
01:08:56,600 --> 01:09:00,280
 OK, I could write this as b transpose--

1189
01:09:00,280 --> 01:09:04,640
 it's the transpose of the pseudo-inverse.

1190
01:09:04,640 --> 01:09:07,360
 I've got a transpose here somewhere, but--

1191
01:09:07,360 --> 01:09:17,720
 OK.

1192
01:09:17,720 --> 01:09:21,520
 So actually, the pseudo-inverse, which I said

1193
01:09:21,520 --> 01:09:23,640
 was just a generalization of the inverse-- that's

1194
01:09:23,640 --> 01:09:25,480
 how I introduced it before, maybe

1195
01:09:25,480 --> 01:09:27,860
 how you've seen it before-- it actually

1196
01:09:27,860 --> 01:09:29,480
 is doing something very clever.

1197
01:09:29,480 --> 01:09:30,280
 Right?

1198
01:09:30,280 --> 01:09:34,280
 It's taking this slightly richer specification of the problem,

1199
01:09:34,280 --> 01:09:36,360
 and it's not necessarily guaranteeing

1200
01:09:36,360 --> 01:09:39,120
 that it's going to get a cost of 0,

1201
01:09:39,120 --> 01:09:43,160
 but it's going to give you the best cost it can.

1202
01:09:43,160 --> 01:09:44,840
 That's why the pseudo-inverse will always

1203
01:09:44,840 --> 01:09:46,480
 give you something back.

1204
01:09:46,480 --> 01:09:47,240
 OK?

1205
01:09:47,240 --> 01:09:49,960
 And that something is exactly this.

1206
01:09:50,960 --> 01:09:57,640
 So that's the picture I want you to have in your head.

1207
01:09:57,640 --> 01:09:59,760
 The shape of that bowl, by the way,

1208
01:09:59,760 --> 01:10:04,320
 is just governed by A transpose A.

1209
01:10:04,320 --> 01:10:08,160
 The eigenvectors and eigenvalues of that matrix

1210
01:10:08,160 --> 01:10:09,800
 will change the shape of that bowl.

1211
01:10:09,800 --> 01:10:16,440
 I know that's a lot of equations or whatever,

1212
01:10:16,440 --> 01:10:19,520
 but I want you to have the intuition.

1213
01:10:19,520 --> 01:10:20,020
 Right?

1214
01:10:20,020 --> 01:10:22,680
 So what happens when j starts to lose rank?

1215
01:10:22,680 --> 01:10:28,480
 Think about what happened here.

1216
01:10:28,480 --> 01:10:32,720
 The same thing happens in the vector case.

1217
01:10:32,720 --> 01:10:37,560
 This bowl starts getting flatter, maybe in one axis,

1218
01:10:37,560 --> 01:10:38,680
 maybe in multiple axes.

1219
01:10:38,680 --> 01:10:42,200
 But if it's one eigenvalue goes to 0,

1220
01:10:42,200 --> 01:10:44,640
 it will get very elongated to the point

1221
01:10:44,640 --> 01:10:48,960
 where it can be a trough if the eigenvalue is exactly 0.

1222
01:10:48,960 --> 01:10:54,080
 And the worst thing is that the minimum of that trough

1223
01:10:54,080 --> 01:10:55,500
 is going to move off to infinity.

1224
01:10:55,500 --> 01:11:00,400
 OK, so that's what happens.

1225
01:11:00,400 --> 01:11:02,600
 That's what goes wrong when you call a pseudo-inverse.

1226
01:11:02,600 --> 01:11:06,440
 It's not that it's solving a beautiful problem for you.

1227
01:11:06,440 --> 01:11:09,080
 It's just that you're asking it to do the wrong thing.

1228
01:11:09,080 --> 01:11:11,240
 You're not telling it to be reasonable.

1229
01:11:11,240 --> 01:11:13,480
 You're just telling it to get as close as possible.

1230
01:11:13,480 --> 01:11:17,760
 Questions about that?

1231
01:11:17,760 --> 01:11:18,260
 OK.

1232
01:11:18,260 --> 01:11:26,280
 Now here's the win.

1233
01:11:26,280 --> 01:11:27,640
 OK?

1234
01:11:27,640 --> 01:11:33,240
 The language of optimization is way richer

1235
01:11:33,240 --> 01:11:36,280
 than just calling pseudo-inverses.

1236
01:11:36,280 --> 01:11:39,000
 I can-- this is an objective, but I could also

1237
01:11:39,000 --> 01:11:41,480
 add constraints.

1238
01:11:41,480 --> 01:11:45,160
 So what I'm going to do, for instance, is say,

1239
01:11:45,160 --> 01:11:48,640
 get as close as possible, but don't pick a velocity greater

1240
01:11:48,640 --> 01:11:50,000
 than like 10.

1241
01:11:50,000 --> 01:11:51,640
 I don't want my robot moving-- it's

1242
01:11:51,640 --> 01:11:53,300
 got-- because the controller isn't going

1243
01:11:53,300 --> 01:11:55,720
 to set a velocity limit, right?

1244
01:11:55,720 --> 01:12:02,520
 So a perfectly good question, which looks simple in this case,

1245
01:12:02,520 --> 01:12:11,200
 is what if I did minimum of x ax minus b squared,

1246
01:12:11,200 --> 01:12:15,640
 but I'm going to do subject to, OK?

1247
01:12:15,640 --> 01:12:19,960
 Let's say I want x to be less than or equal to 2,

1248
01:12:19,960 --> 01:12:22,360
 something like that.

1249
01:12:22,360 --> 01:12:23,400
 OK?

1250
01:12:23,400 --> 01:12:25,560
 Then the picture is still like what I've got here,

1251
01:12:25,560 --> 01:12:32,960
 but maybe I've got 2 here.

1252
01:12:32,960 --> 01:12:36,520
 So it's going to say, go down as far as possible,

1253
01:12:36,520 --> 01:12:38,080
 but don't cross this line.

1254
01:12:38,080 --> 01:12:41,360
 If you get there, then I want the best solution

1255
01:12:41,360 --> 01:12:42,480
 to be right on the rail.

1256
01:12:42,480 --> 01:12:48,040
 OK?

1257
01:12:48,040 --> 01:12:52,700
 That's another way to write a mathematical program.

1258
01:12:52,700 --> 01:12:54,480
 And since we're going to be doing it a lot,

1259
01:12:54,480 --> 01:12:59,040
 let me just stop and say, in this language,

1260
01:12:59,040 --> 01:13:00,320
 this is the decision variables.

1261
01:13:06,600 --> 01:13:08,000
 This is the cost or objective.

1262
01:13:08,000 --> 01:13:17,120
 And these are constraints.

1263
01:13:17,120 --> 01:13:29,440
 I can do exactly the same thing in this problem.

1264
01:13:29,440 --> 01:13:34,360
 I could say, I'd like the vector 2 to be less than norm 2,

1265
01:13:34,360 --> 01:13:35,320
 or something like this.

1266
01:13:35,320 --> 01:13:37,320
 Or I could say the i-th element of the vector,

1267
01:13:37,320 --> 01:13:41,000
 maybe every joint velocity has a limit.

1268
01:13:41,000 --> 01:13:51,560
 So I could put, let's say, x0 less than 2, maybe x1 less than

1269
01:13:51,560 --> 01:13:52,120
 3.

1270
01:13:52,120 --> 01:13:54,620
 I've got a different load around that second joint,

1271
01:13:54,620 --> 01:13:57,000
 so I could use a different joint velocity limit.

1272
01:13:57,000 --> 01:13:57,500
 OK?

1273
01:13:57,500 --> 01:14:11,040
 The language of optimization is super general,

1274
01:14:11,040 --> 01:14:14,240
 but we're playing in a very nice version of the optimization

1275
01:14:14,240 --> 01:14:18,800
 landscape, where this objective we wrote down.

1276
01:14:19,020 --> 01:14:19,520
 OK?

1277
01:14:19,520 --> 01:14:30,600
 This is a quadratic objective.

1278
01:14:30,600 --> 01:14:37,320
 And it's a positive quadratic objective.

1279
01:14:37,320 --> 01:14:38,400
 It can never be negative.

1280
01:14:38,400 --> 01:14:38,900
 Right?

1281
01:14:38,900 --> 01:14:45,600
 Really, the generalization is that it's positive definite,

1282
01:14:45,600 --> 01:14:46,920
 or at least semi-definite.

1283
01:14:46,920 --> 01:14:49,600
 So let's just say positive definite,

1284
01:14:49,600 --> 01:14:53,240
 meaning the matrix which gets inside here, this A transpose

1285
01:14:53,240 --> 01:14:56,840
 A. And I should say semi-definite,

1286
01:14:56,840 --> 01:14:59,440
 because we're talking about when it can drop rank.

1287
01:14:59,440 --> 01:15:00,720
 So I'll say semi-definite here.

1288
01:15:00,720 --> 01:15:14,720
 Because the matrix A transpose A, the eigenvalues of this

1289
01:15:14,720 --> 01:15:18,320
 are all greater than or equal to 0.

1290
01:15:18,320 --> 01:15:22,560
 So my function is always going up, and it's always quadratic.

1291
01:15:22,560 --> 01:15:25,200
 So it's a convex function, and it has a unique minimum.

1292
01:15:25,200 --> 01:15:34,440
 And if I restrict myself to any constraints that

1293
01:15:34,440 --> 01:15:38,960
 are of the form of linear equations,

1294
01:15:38,960 --> 01:15:43,240
 the absolute value can be written

1295
01:15:43,240 --> 01:15:44,520
 as just two linear equations.

1296
01:15:44,520 --> 01:15:46,960
 I could have written that as x less than 2

1297
01:15:46,960 --> 01:15:48,280
 and x greater than negative 2.

1298
01:15:48,280 --> 01:15:53,080
 So these are linear constraints.

1299
01:15:53,080 --> 01:16:03,320
 This is the domain of quadratic programming.

1300
01:16:03,320 --> 01:16:15,920
 [WRITING ON BOARD]

1301
01:16:15,920 --> 01:16:17,560
 You'll hear people talk about QPs.

1302
01:16:17,560 --> 01:16:24,800
 So now, when I run my controller,

1303
01:16:24,800 --> 01:16:27,160
 instead of calling pseudo-inverse every time

1304
01:16:27,160 --> 01:16:29,560
 I want to-- every time step I want

1305
01:16:29,560 --> 01:16:32,560
 to decide what positions to send to the controller,

1306
01:16:32,560 --> 01:16:34,160
 I'll solve a small quadratic program.

1307
01:16:34,160 --> 01:16:41,640
 The geometry of it, I made it look deceptively simple in 1D.

1308
01:16:41,640 --> 01:16:46,040
 It is simple in 1D, but in higher dimensions,

1309
01:16:46,040 --> 01:16:48,520
 you have a quadr-- it still can only do that, roughly.

1310
01:16:48,520 --> 01:16:53,720
 But the geometry of these constraints can be interesting,

1311
01:16:53,720 --> 01:16:55,680
 and you want to solve it efficiently.

1312
01:16:55,680 --> 01:17:00,800
 So there are strong solvers, strong numerical codes

1313
01:17:00,800 --> 01:17:03,180
 that will take the specification of the problem

1314
01:17:03,180 --> 01:17:04,520
 in this kind of language.

1315
01:17:04,520 --> 01:17:07,400
 They're called QP solvers, for instance.

1316
01:17:07,400 --> 01:17:11,200
 And they'll solve this problem for even very large matrices

1317
01:17:11,200 --> 01:17:12,160
 very fast.

1318
01:17:12,160 --> 01:17:15,440
 And it's entirely practical to run them in a control loop.

1319
01:17:15,440 --> 01:17:26,160
 Now, this-- I tried to visualize the geometry of this.

1320
01:17:26,160 --> 01:17:26,660
 OK?

1321
01:17:26,660 --> 01:17:52,320
 I made a nice little animation here

1322
01:17:52,320 --> 01:17:55,520
 that writes a small mathematical program that just--

1323
01:17:55,520 --> 01:17:58,120
 I'll tell you about that in a minute, maybe more next time.

1324
01:17:58,120 --> 01:18:03,840
 But-- OK.

1325
01:18:03,840 --> 01:18:07,880
 And here's what it looks like.

1326
01:18:07,880 --> 01:18:10,760
 This is my two-link KUKA.

1327
01:18:10,760 --> 01:18:13,100
 OK, so I basically-- I took the KUKA,

1328
01:18:13,100 --> 01:18:15,840
 and I just froze all the two links,

1329
01:18:15,840 --> 01:18:18,720
 because I can only plot 2D stuff.

1330
01:18:18,720 --> 01:18:21,520
 If I have two decisions-- two velocities to move,

1331
01:18:21,520 --> 01:18:23,720
 and I'm just trying to move in the plane or whatever,

1332
01:18:23,720 --> 01:18:24,480
 I can plot that.

1333
01:18:24,480 --> 01:18:27,880
 If you get higher dimensional, I can't plot it.

1334
01:18:27,880 --> 01:18:33,160
 Now, this green is the quadratic form in those two planes.

1335
01:18:33,160 --> 01:18:34,960
 That's just the objective.

1336
01:18:34,960 --> 01:18:37,200
 And the red is the constraints.

1337
01:18:37,200 --> 01:18:38,620
 Don't go outside those constraints.

1338
01:18:38,620 --> 01:18:49,960
 As you move through the singularity--

1339
01:18:49,960 --> 01:18:53,440
 see if I can make that visible enough-- what happens?

1340
01:18:54,160 --> 01:19:00,280
 That quadratic form flattens out.

1341
01:19:00,280 --> 01:19:05,320
 And the solution is trying to move off to infinity.

1342
01:19:05,320 --> 01:19:07,080
 That's the bad case.

1343
01:19:07,080 --> 01:19:09,520
 But the QP says, don't go past the limits.

1344
01:19:09,520 --> 01:19:10,020
 Yeah?

1345
01:19:10,020 --> 01:19:21,480
 So now I can just play with it a little bit.

1346
01:19:21,480 --> 01:19:22,360
 OK?

1347
01:19:22,360 --> 01:19:25,120
 So as I go close to the singularity,

1348
01:19:25,120 --> 01:19:30,680
 you can see that that becomes a trough instead of a bowl.

1349
01:19:30,680 --> 01:19:34,160
 It's actually-- until it's exactly 0,

1350
01:19:34,160 --> 01:19:35,720
 it's still got a minimum.

1351
01:19:35,720 --> 01:19:37,380
 At some point, it's just off at infinity.

1352
01:19:37,380 --> 01:19:38,960
 And when it's exactly 0, it's infinity.

1353
01:19:38,960 --> 01:19:47,900
 But the QP can move right through there pretty well.

1354
01:19:47,900 --> 01:19:52,320
 It'll always come back with a solution for you.

1355
01:19:52,320 --> 01:19:54,880
 OK, so the quadratic program is a nice generalization

1356
01:19:54,880 --> 01:19:57,000
 of the pseudo-inverse controller.

1357
01:19:57,000 --> 01:20:16,560
 OK, I did have another notebook that just showed it actually

1358
01:20:16,560 --> 01:20:17,680
 moving the end effector.

1359
01:20:17,680 --> 01:20:20,240
 But just for the sake of time, trust me,

1360
01:20:20,240 --> 01:20:21,720
 it moves the end effector.

1361
01:20:21,720 --> 01:20:23,920
 If I just command a velocity like this, it goes--

1362
01:20:23,920 --> 01:20:24,960
 [MAKES NOISE]

1363
01:20:24,960 --> 01:20:26,400
 It works.

1364
01:20:26,400 --> 01:20:28,000
 You can run it.

1365
01:20:28,000 --> 01:20:33,720
 So there's a language-- so Drake sort of

1366
01:20:33,720 --> 01:20:35,840
 has three big components.

1367
01:20:35,840 --> 01:20:38,920
 You've seen the plant, multi-body plant.

1368
01:20:38,920 --> 01:20:40,680
 You've seen a bit of the diagrams, right,

1369
01:20:40,680 --> 01:20:43,520
 and context and all the stuff you love.

1370
01:20:43,520 --> 01:20:48,240
 And then there's the third sort of big piece of Drake

1371
01:20:48,240 --> 01:20:50,480
 is the mathematical program interface.

1372
01:20:50,480 --> 01:20:53,160
 Because I believe that the language

1373
01:20:53,160 --> 01:20:55,960
 that you want to talk to your multi-body plant

1374
01:20:55,960 --> 01:20:57,520
 is the language of optimization.

1375
01:20:57,520 --> 01:21:01,760
 And so you could find these pieces in different toolboxes.

1376
01:21:01,760 --> 01:21:03,240
 But having them in the one toolbox,

1377
01:21:03,240 --> 01:21:06,460
 I can easily say, make me a cost or constraint

1378
01:21:06,460 --> 01:21:07,600
 based on that robot.

1379
01:21:07,600 --> 01:21:09,640
 And I can do things that I wouldn't be able to do

1380
01:21:09,640 --> 01:21:11,280
 if they were separate.

1381
01:21:11,280 --> 01:21:15,200
 OK, so the code looks pretty simple.

1382
01:21:15,200 --> 01:21:19,040
 You say, like, make a new mathematical program.

1383
01:21:19,040 --> 01:21:22,200
 I want to have two decision variables.

1384
01:21:22,200 --> 01:21:23,680
 I'm going to add a constraint.

1385
01:21:23,680 --> 01:21:27,960
 Like, this is x0 plus x1 equals 1.

1386
01:21:27,960 --> 01:21:30,560
 That's a linear constraint.

1387
01:21:30,560 --> 01:21:33,640
 x0 less than x1, that's also a linear constraint.

1388
01:21:33,640 --> 01:21:37,200
 I can write them both in the form of that.

1389
01:21:37,200 --> 01:21:42,760
 I can add a cost, like x0 squared plus x1 squared, solve.

1390
01:21:42,760 --> 01:21:43,240
 OK?

1391
01:21:43,240 --> 01:21:45,240
 And behind the scenes, what it does

1392
01:21:45,240 --> 01:21:47,560
 is it examines the costs and constraints

1393
01:21:47,560 --> 01:21:50,560
 that you've given it and tries to call the best solver.

1394
01:21:50,560 --> 01:21:52,160
 It has a bunch of commercial solvers

1395
01:21:52,160 --> 01:21:53,840
 that are back behind it.

1396
01:21:53,840 --> 01:21:56,100
 If you're at MIT, most of those commercial solvers

1397
01:21:56,100 --> 01:21:59,480
 are free with an academic license.

1398
01:21:59,480 --> 01:22:04,280
 If you're not in education, they're really expensive.

1399
01:22:04,280 --> 01:22:06,760
 It's kind of like, you learn how to use them,

1400
01:22:06,760 --> 01:22:08,080
 and then you go off in industry.

1401
01:22:08,080 --> 01:22:12,640
 And it's like, oh my gosh, those are costing a lot of money.

1402
01:22:12,640 --> 01:22:13,240
 OK?

1403
01:22:13,240 --> 01:22:17,120
 But that's the language that we use.

1404
01:22:17,120 --> 01:22:21,200
 And I guess I have just one minute.

1405
01:22:21,200 --> 01:22:23,040
 The code is pretty unintimidating, I think.

1406
01:22:23,040 --> 01:22:30,320
 But our simple pseudo-inverse controller-- I

1407
01:22:30,320 --> 01:22:31,600
 forgot to close the other one.

1408
01:22:32,440 --> 01:22:35,920
 [SIDE CONVERSATION]

1409
01:22:35,920 --> 01:22:51,920
 You can write a little pseudo-inverse controller,

1410
01:22:51,920 --> 01:22:54,800
 and then you can write a QP controller.

1411
01:22:54,800 --> 01:22:57,120
 The one that just uses the pseudo-inverse

1412
01:22:57,120 --> 01:22:58,160
 can still move through.

1413
01:22:58,160 --> 01:22:59,800
 I just said a desired velocity.

1414
01:22:59,800 --> 01:23:02,000
 It just moves through.

1415
01:23:02,000 --> 01:23:05,920
 And then the differential IK, solved as a quadratic program,

1416
01:23:05,920 --> 01:23:06,880
 can do all that.

1417
01:23:06,880 --> 01:23:09,000
 But it can be robust to singularities and the like.

1418
01:23:09,000 --> 01:23:13,840
 OK.

1419
01:23:13,840 --> 01:23:15,560
 There's a bunch of other things that you

1420
01:23:15,560 --> 01:23:22,080
 can do once you have this language of Jacobian control

1421
01:23:22,080 --> 01:23:24,400
 as a mathematical program.

1422
01:23:24,400 --> 01:23:25,880
 I'll list them.

1423
01:23:25,880 --> 01:23:27,820
 And the details are in the notes.

1424
01:23:27,820 --> 01:23:30,000
 But it's sort of nice to think about it.

1425
01:23:30,000 --> 01:23:34,760
 So the linear constraints we talked about here

1426
01:23:34,760 --> 01:23:37,240
 were just velocity constraints.

1427
01:23:37,240 --> 01:23:41,560
 The decision variables in my pseudo-inverse-like controller,

1428
01:23:41,560 --> 01:23:44,600
 my Jacobian controller, were the velocities.

1429
01:23:44,600 --> 01:23:49,160
 And the objective was based on the Jacobian.

1430
01:23:49,160 --> 01:23:53,320
 But you can actually add some amount of position constraints.

1431
01:23:53,320 --> 01:23:58,740
 If you take a linear interpolation of your Jacobian

1432
01:23:58,740 --> 01:24:03,060
 and try to say, what's my next position's going to be,

1433
01:24:03,060 --> 01:24:07,140
 and you want them to not go past some linearization

1434
01:24:07,140 --> 01:24:11,780
 of a collision constraint, you can do that, actually.

1435
01:24:11,780 --> 01:24:14,580
 And similarly, you can take a derivative, a first derivative,

1436
01:24:14,580 --> 01:24:17,380
 and put acceleration constraints.

1437
01:24:17,380 --> 01:24:21,100
 So this becomes a super useful sort of language

1438
01:24:21,100 --> 01:24:24,540
 to start adding richer and richer specifications of what

1439
01:24:24,540 --> 01:24:28,860
 you want the controller to do, always locally.

1440
01:24:28,860 --> 01:24:30,820
 But saying, given I want to follow this,

1441
01:24:30,820 --> 01:24:34,620
 maybe I don't want to run into a wall,

1442
01:24:34,620 --> 01:24:36,540
 and I don't want to exceed some accelerations.

1443
01:24:36,540 --> 01:24:38,660
 That can all fit in the language.

1444
01:24:38,660 --> 01:24:40,740
 And there's sort of right ways to write it,

1445
01:24:40,740 --> 01:24:43,180
 so that it always has a solution.

1446
01:24:43,180 --> 01:24:45,180
 You want to make sure you don't write constraints

1447
01:24:45,180 --> 01:24:49,660
 that can potentially not have a solution.

1448
01:24:49,660 --> 01:24:50,900
 And that's an important thing.

1449
01:24:50,900 --> 01:24:53,860
 But mostly, that's packaged up.

1450
01:24:53,860 --> 01:24:57,500
 And you can just call the differential IK system

1451
01:24:57,500 --> 01:24:59,000
 and use that controller.

1452
01:24:59,000 --> 01:25:01,380
 You actually used it if you played with that first chapter

1453
01:25:01,380 --> 01:25:03,780
 notebook that half of you tried, and the rest of you

1454
01:25:03,780 --> 01:25:06,500
 made me cry.

1455
01:25:06,500 --> 01:25:09,660
 But if you did, you might have gone to the limit.

1456
01:25:09,660 --> 01:25:14,020
 And then the IK solver said, you've got no solution.

1457
01:25:14,020 --> 01:25:16,700
 That's because it was a simple form of the IK.

1458
01:25:16,700 --> 01:25:20,780
 But the full form actually is robust to that.

1459
01:25:20,780 --> 01:25:22,020
 OK, good.

1460
01:25:22,020 --> 01:25:22,740
 See you Thursday.

1461
01:25:22,740 --> 01:25:40,480
 Yeah?

1462
01:25:40,480 --> 01:25:43,900
 Just when you were showing us the green thing,

1463
01:25:43,900 --> 01:25:47,460
 so the green thing is you're saying it's a plus function.

1464
01:25:47,460 --> 01:25:51,100
 and the class/objective is the velocity.

