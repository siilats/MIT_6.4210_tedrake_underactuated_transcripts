1
00:00:00,000 --> 00:00:01,120
 It's around the right time.

2
00:00:01,120 --> 00:00:02,920
 I'm just going to go for it.

3
00:00:02,920 --> 00:00:04,520
 OK.

4
00:00:04,520 --> 00:00:06,880
 So last time, we talked about force control.

5
00:00:06,880 --> 00:00:10,760
 I tried to give a couple examples about how sometimes

6
00:00:10,760 --> 00:00:15,000
 it's more natural to program using the language of forces

7
00:00:15,000 --> 00:00:18,600
 in your controllers instead of using the languages of positions.

8
00:00:18,600 --> 00:00:23,320
 But we mostly assumed that the robot was a point.

9
00:00:23,320 --> 00:00:25,920
 And so I promised that today we'd go through and add

10
00:00:25,920 --> 00:00:27,660
 the rest of the robot back in.

11
00:00:27,660 --> 00:00:31,440
 And that is exactly what we'll do.

12
00:00:31,440 --> 00:00:33,360
 It's a part of a bigger discussion

13
00:00:33,360 --> 00:00:35,880
 about manipulator control.

14
00:00:35,880 --> 00:00:37,640
 I'll mention again at the end, but there

15
00:00:37,640 --> 00:00:40,040
 are aspects of manipulator control

16
00:00:40,040 --> 00:00:42,480
 that might have you focus on executing trajectories

17
00:00:42,480 --> 00:00:47,480
 at high speeds with very high accuracy,

18
00:00:47,480 --> 00:00:49,360
 possibly with uncertain payloads.

19
00:00:49,360 --> 00:00:51,480
 But we're going to talk about the force control

20
00:00:51,480 --> 00:00:55,520
 aspects of manipulator control primarily today.

21
00:00:55,520 --> 00:00:57,860
 So I'll take you through a couple steps.

22
00:00:57,860 --> 00:01:02,260
 But I want to call out that at the end, we'll have--

23
00:01:02,260 --> 00:01:05,360
 Rachel actually does work on this regularly

24
00:01:05,360 --> 00:01:06,820
 with her Franca robots.

25
00:01:06,820 --> 00:01:09,500
 So she's going to show you some of her case studies

26
00:01:09,500 --> 00:01:13,020
 at the end, which will be an extra treat.

27
00:01:13,020 --> 00:01:15,980
 OK, so just to set it up and remember,

28
00:01:15,980 --> 00:01:18,820
 there are tasks like this one, for instance.

29
00:01:18,820 --> 00:01:21,060
 I gave a couple different examples last time,

30
00:01:21,060 --> 00:01:26,280
 where really, the task requires thinking

31
00:01:26,280 --> 00:01:28,360
 about something about forces.

32
00:01:28,360 --> 00:01:31,720
 You're trying to apply the right amount of force

33
00:01:31,720 --> 00:01:35,820
 to maintain frictional contact between the hand and the book.

34
00:01:35,820 --> 00:01:39,840
 And then between the book and the table,

35
00:01:39,840 --> 00:01:41,160
 you need to be in that sweet spot

36
00:01:41,160 --> 00:01:43,520
 where the book's still able to slide on the table,

37
00:01:43,520 --> 00:01:45,840
 but the hand isn't sliding on the book.

38
00:01:45,840 --> 00:01:49,760
 That extra part is-- actually, this is a pretty good example.

39
00:01:49,760 --> 00:01:51,760
 The video wasn't actually meant to show force control.

40
00:01:51,760 --> 00:01:54,400
 It was meant to show this cleverness at the end, which

41
00:01:54,400 --> 00:01:56,120
 even though there was some uncertainty,

42
00:01:56,120 --> 00:01:58,680
 having driven the book to the end,

43
00:01:58,680 --> 00:02:01,120
 if you choose the right kinematic strategies

44
00:02:01,120 --> 00:02:03,080
 at the end, you can reduce all the uncertainty

45
00:02:03,080 --> 00:02:07,600
 by just pushing to the end and then grabbing the book.

46
00:02:07,600 --> 00:02:09,220
 OK, but that's a good example, I think,

47
00:02:09,220 --> 00:02:11,260
 of something you'd like to do with force control,

48
00:02:11,260 --> 00:02:13,840
 writing on the board, erasing the board,

49
00:02:13,840 --> 00:02:16,760
 picking up the really big flat Cheez-It box.

50
00:02:16,760 --> 00:02:18,260
 These are all good examples, I think.

51
00:02:18,260 --> 00:02:25,760
 This was the one we spent time on last time,

52
00:02:25,760 --> 00:02:28,040
 was just actually trying to reason about what forces you

53
00:02:28,040 --> 00:02:29,720
 should apply at the finger in order

54
00:02:29,720 --> 00:02:31,840
 to stay in the friction cone on the end.

55
00:02:31,840 --> 00:02:36,640
 And this was a strong regulator on the forces

56
00:02:36,640 --> 00:02:41,600
 you would apply at your finger in order to not slide.

57
00:02:41,600 --> 00:02:45,320
 OK, so let's add the robot back in.

58
00:02:45,320 --> 00:02:47,120
 And I'm going to do it mostly--

59
00:02:47,120 --> 00:02:49,920
 of course, we want to apply this on the KUKA.

60
00:02:49,920 --> 00:02:53,240
 But I actually think for the board and for all the concepts,

61
00:02:53,240 --> 00:02:55,160
 it's totally fine for me to do everything

62
00:02:55,160 --> 00:02:57,360
 with a double pendulum for today.

63
00:02:57,360 --> 00:02:59,680
 And then we're going to use the general form

64
00:02:59,680 --> 00:03:00,680
 of the double pendulum.

65
00:03:00,680 --> 00:03:02,760
 But any time we want to get into the details,

66
00:03:02,760 --> 00:03:06,740
 I'll just choose two angles instead of seven to work with.

67
00:03:06,740 --> 00:03:08,620
 And I'm going to spend a little bit more time

68
00:03:08,620 --> 00:03:11,200
 on this part of the board today.

69
00:03:11,200 --> 00:03:14,640
 I realized I was always showing my backside to the camera.

70
00:03:14,640 --> 00:03:16,080
 So let's see if this works.

71
00:03:16,080 --> 00:03:18,200
 If you guys don't like that, you should tell me.

72
00:03:18,200 --> 00:03:19,920
 But let me try.

73
00:03:19,920 --> 00:03:30,680
 OK, let's spend our time today mostly thinking

74
00:03:30,680 --> 00:03:33,760
 about a double pendulum.

75
00:03:33,760 --> 00:03:38,800
 I actually will often call this the simple double pendulum

76
00:03:38,800 --> 00:03:41,560
 when I use point masses for the dynamics.

77
00:03:41,560 --> 00:03:46,080
 But we're going to stay mostly in the general form today.

78
00:03:46,080 --> 00:03:48,880
 All right, so a lot of times when I draw the pendulum,

79
00:03:48,880 --> 00:03:52,600
 I'll think of it as coming down from the top

80
00:03:52,600 --> 00:03:53,600
 as a hanging pendulum.

81
00:03:53,600 --> 00:03:55,760
 If you're a KUKA, maybe you're bolted on the bottom.

82
00:03:55,760 --> 00:03:58,240
 No big deal.

83
00:03:58,240 --> 00:04:03,080
 So importantly, I'm going to parameterize the double pendulum

84
00:04:03,080 --> 00:04:05,480
 with just the two angles.

85
00:04:05,480 --> 00:04:07,680
 I'm going to put my end effector here,

86
00:04:07,680 --> 00:04:11,720
 which I'll call the kinematics of this.

87
00:04:11,720 --> 00:04:13,120
 I'll have some point.

88
00:04:13,120 --> 00:04:15,080
 We'll potentially call it the contact point

89
00:04:15,080 --> 00:04:18,080
 if that's the places where we want to make contact.

90
00:04:18,080 --> 00:04:20,320
 We've got gravity coming down, of course.

91
00:04:20,320 --> 00:04:23,440
 I'm going to allow motors in both of these places.

92
00:04:23,440 --> 00:04:28,840
 So I have a torque here, torque here, masses distributed,

93
00:04:28,840 --> 00:04:31,600
 and the like.

94
00:04:31,600 --> 00:04:33,560
 So this fits right into the same equations

95
00:04:33,560 --> 00:04:35,800
 we've been using for the big, complicated EWA.

96
00:04:35,800 --> 00:04:48,160
 It's got the standard manipulator equation form,

97
00:04:48,160 --> 00:04:51,200
 plus potentially any contact forces, which we'll add later.

98
00:04:51,200 --> 00:04:55,640
 And in particular, it's nice because Q here is just

99
00:04:55,640 --> 00:04:58,440
 theta 1 and theta 2, super easy.

100
00:04:58,440 --> 00:05:07,080
 And U here is just tau 1, tau 2.

101
00:05:07,080 --> 00:05:14,040
 And the equations are derived in the notes,

102
00:05:14,040 --> 00:05:15,240
 well, the linked notes.

103
00:05:15,240 --> 00:05:17,880
 But if you care, it just comes up,

104
00:05:17,880 --> 00:05:21,400
 especially if you just do lumped masses,

105
00:05:21,400 --> 00:05:24,640
 then the terms come out particularly easy.

106
00:05:24,640 --> 00:05:26,280
 And we could write them on the board.

107
00:05:26,280 --> 00:05:28,360
 I won't, but they look like that.

108
00:05:28,360 --> 00:05:39,480
 OK, so what we want to do here is figure out

109
00:05:39,480 --> 00:05:43,120
 what torques to apply to achieve some sort of force control

110
00:05:43,120 --> 00:05:48,680
 or program the interaction here at the contact point.

111
00:05:48,680 --> 00:05:53,120
 That's the goal that we're trying to achieve.

112
00:05:53,120 --> 00:05:55,440
 And there's a really core idea that I

113
00:05:55,440 --> 00:05:58,760
 want to start with, which is this idea of feedback

114
00:05:58,760 --> 00:05:59,760
 canceling control.

115
00:05:59,760 --> 00:06:20,240
 So given the system as written, if I have U as an input,

116
00:06:20,240 --> 00:06:23,120
 so I can apply torques at both of those joints,

117
00:06:23,120 --> 00:06:28,200
 and if I know m, c, and tau g, the gravity forces,

118
00:06:28,200 --> 00:06:30,320
 then I can write a controller that

119
00:06:30,320 --> 00:06:33,520
 sort of changes the dynamics, the effective dynamics

120
00:06:33,520 --> 00:06:37,360
 of the robot, almost at will.

121
00:06:37,360 --> 00:06:39,360
 At some point, maybe I'll have torque limits

122
00:06:39,360 --> 00:06:40,400
 or other problems.

123
00:06:40,400 --> 00:06:43,400
 But let's just think about how I can already

124
00:06:43,400 --> 00:06:46,640
 change the dynamics of this to pretty much anything I want.

125
00:06:46,640 --> 00:06:51,280
 So as an example that I actually use typically

126
00:06:51,280 --> 00:06:55,480
 in underactuated to talk about how this approach is limiting

127
00:06:55,480 --> 00:06:59,400
 in the more general sense, but it's actually very useful here,

128
00:06:59,400 --> 00:07:03,240
 what if you had a goal of just replacing

129
00:07:03,240 --> 00:07:06,320
 the dynamics of your two-link pendulum

130
00:07:06,320 --> 00:07:09,560
 and make it act like a one-link pendulum?

131
00:07:09,560 --> 00:07:11,680
 Or, I mean, there's only two degrees of freedom,

132
00:07:11,680 --> 00:07:13,800
 so you can't make it act like a four-link pendulum.

133
00:07:13,800 --> 00:07:17,280
 You can sort of impose whatever two-link dynamics you'd like.

134
00:07:17,280 --> 00:07:39,960
 So what would that look like?

135
00:07:39,960 --> 00:07:43,000
 The equations of the single pendulum

136
00:07:43,000 --> 00:07:44,040
 are even simpler, right?

137
00:07:44,040 --> 00:07:46,840
 Maybe I have-- this would be equivalent to saying

138
00:07:46,840 --> 00:07:53,240
 I'd like the accelerations of my two-link pendulum.

139
00:07:53,240 --> 00:07:58,960
 It's deeper desired, right?

140
00:07:58,960 --> 00:08:03,760
 Let's say I'd like the first link to just swing around

141
00:08:03,760 --> 00:08:07,920
 as if the whole thing was just a one-link pendulum.

142
00:08:07,920 --> 00:08:10,920
 So maybe this gives me something like negative g

143
00:08:10,920 --> 00:08:15,480
 over l sine theta, maybe with some damping.

144
00:08:15,480 --> 00:08:24,000
 That would make this first thing act

145
00:08:24,000 --> 00:08:28,440
 like as if it had the dynamics of a single pendulum.

146
00:08:28,440 --> 00:08:30,640
 So if nothing else, it would be canceling

147
00:08:30,640 --> 00:08:34,000
 any effects that are coming from theta 2 moving around

148
00:08:34,000 --> 00:08:37,440
 so that theta 1 moves like a simple pendulum.

149
00:08:37,440 --> 00:08:40,080
 And there's a handful of things you could write here.

150
00:08:40,080 --> 00:08:41,520
 Let me just sort of cartoon it.

151
00:08:41,520 --> 00:08:43,760
 Let's just say I want the dynamic acceleration of that

152
00:08:43,760 --> 00:08:44,840
 to be 0.

153
00:08:44,840 --> 00:08:47,440
 In practice, if it doesn't start straight,

154
00:08:47,440 --> 00:08:49,680
 maybe I would put a little feedback control

155
00:08:49,680 --> 00:08:51,320
 to make it go straight.

156
00:08:51,320 --> 00:08:53,840
 But in general, I want to basically make this--

157
00:08:53,840 --> 00:08:55,720
 pretend that it's not there and not move.

158
00:08:55,720 --> 00:08:58,040
 And I'll just make the whole thing sort of swing

159
00:08:58,040 --> 00:09:00,600
 like a single pendulum.

160
00:09:00,600 --> 00:09:04,560
 So that's just a different desired acceleration for this.

161
00:09:04,560 --> 00:09:06,800
 It's not the one that naturally happens with the physics

162
00:09:06,800 --> 00:09:08,440
 of the double pendulum.

163
00:09:08,440 --> 00:09:11,440
 But as you can see sort of algebraically,

164
00:09:11,440 --> 00:09:18,240
 if I were to just choose to apply a controller which

165
00:09:18,240 --> 00:09:25,360
 goes in and exactly cancels out the terms in my equations

166
00:09:25,360 --> 00:09:30,600
 of motion, and then for this one I'm a little bit more clever.

167
00:09:30,600 --> 00:09:35,200
 I'll do this.

168
00:09:35,200 --> 00:09:39,600
 [AUDIO OUT]

169
00:09:39,600 --> 00:09:43,280
 Then if I were to run this as a controller--

170
00:09:43,280 --> 00:09:48,360
 this is my control, this one which looks very similar.

171
00:09:48,360 --> 00:09:53,640
 It is my plant, my equations of motion.

172
00:09:53,640 --> 00:09:57,120
 If I put them together into the closed loop dynamics,

173
00:09:57,120 --> 00:10:04,040
 then c cancels, tau cancels, and I get mq double dot

174
00:10:04,040 --> 00:10:07,280
 equals mq double dot desired.

175
00:10:07,280 --> 00:10:12,560
 And because we know--

176
00:10:12,560 --> 00:10:15,320
 I mean, the world knows.

177
00:10:15,320 --> 00:10:17,080
 We haven't spent time on it in this class,

178
00:10:17,080 --> 00:10:21,040
 but the world knows that mass is always positive.

179
00:10:21,040 --> 00:10:23,500
 Even in the mass matrix form, mass matrices

180
00:10:23,500 --> 00:10:26,440
 are always positive definite or semi-definite,

181
00:10:26,440 --> 00:10:28,480
 depending on the system.

182
00:10:28,480 --> 00:10:31,960
 But in general, we're going to say in these cases,

183
00:10:31,960 --> 00:10:34,120
 it's safe to do m inverse.

184
00:10:34,120 --> 00:10:43,000
 That exists, which implies that I get q double dot

185
00:10:43,000 --> 00:10:44,160
 equals q double dot desired.

186
00:10:44,160 --> 00:10:50,720
 So this kind of works, and I have a simple example

187
00:10:50,720 --> 00:10:51,800
 of that in a notebook.

188
00:10:51,800 --> 00:10:59,240
 I can take my original dynamics of the pendulum,

189
00:10:59,240 --> 00:11:05,080
 and if I run that, this is just the-- if u equals 0,

190
00:11:05,080 --> 00:11:06,800
 what happens with the double pendulum?

191
00:11:06,800 --> 00:11:10,560
 It just falls down with respect to gravity.

192
00:11:10,560 --> 00:11:16,200
 And if I write a simple controller that just does

193
00:11:16,200 --> 00:11:20,600
 almost exactly what I just said, and I

194
00:11:20,600 --> 00:11:23,160
 write that in a simple leaf system

195
00:11:23,160 --> 00:11:25,600
 here and put it in feedback with my plant--

196
00:11:25,600 --> 00:11:29,040
 [AUDIO OUT]

197
00:11:29,040 --> 00:11:34,680
 I wait for the first one to finish running.

198
00:11:34,680 --> 00:11:45,840
 I was just saying that somehow all of my computers

199
00:11:45,840 --> 00:11:46,600
 feel slow today.

200
00:11:46,600 --> 00:11:49,480
 I don't know what's happening.

201
00:11:49,480 --> 00:11:54,560
 Here we go.

202
00:11:54,560 --> 00:11:55,400
 All right.

203
00:11:55,400 --> 00:11:58,360
 So the double pendulum with that simple controller

204
00:11:58,360 --> 00:12:02,320
 suddenly just acts exactly like a single pendulum.

205
00:12:02,320 --> 00:12:05,400
 And that doesn't seem too surprising or whatever.

206
00:12:05,400 --> 00:12:06,520
 I can also just--

207
00:12:06,520 --> 00:12:09,440
 I mean, I don't even have to respect gravity.

208
00:12:09,440 --> 00:12:11,560
 I could just do the same thing but make gravity

209
00:12:11,560 --> 00:12:13,400
 be the negative of the true gravity,

210
00:12:13,400 --> 00:12:14,920
 and I could run that controller too.

211
00:12:14,920 --> 00:12:18,320
 And I just have a new system that--

212
00:12:18,320 --> 00:12:20,880
 because I've just overwritten the dynamics completely,

213
00:12:20,880 --> 00:12:22,480
 that new system can be whatever I want.

214
00:12:22,480 --> 00:12:27,040
 I could do it like I'm a pendulum in space

215
00:12:27,040 --> 00:12:29,240
 or a pendulum upside down or whatever.

216
00:12:29,240 --> 00:12:33,680
 So this is a powerful idea, which

217
00:12:33,680 --> 00:12:36,320
 is if you write the right controller

218
00:12:36,320 --> 00:12:38,600
 and you have enough control authority,

219
00:12:38,600 --> 00:12:42,040
 then you can basically overwrite the dynamics of your system.

220
00:12:42,040 --> 00:12:48,640
 Now, what can go wrong with that?

221
00:12:48,640 --> 00:12:49,480
 Yeah, please.

222
00:12:49,480 --> 00:12:56,360
 [INAUDIBLE]

223
00:12:56,360 --> 00:12:59,800
 OK, so he says it seems very dependent on your ability

224
00:12:59,800 --> 00:13:01,560
 to estimate the torques.

225
00:13:01,560 --> 00:13:05,080
 I mean, it also means estimating the masses accurately,

226
00:13:05,080 --> 00:13:07,240
 estimating Coriolis terms accurately,

227
00:13:07,240 --> 00:13:09,040
 the gravitational terms.

228
00:13:09,040 --> 00:13:10,120
 Absolutely.

229
00:13:10,120 --> 00:13:12,520
 So that's great.

230
00:13:12,520 --> 00:13:14,720
 I mean, people do things like this in practice.

231
00:13:14,720 --> 00:13:17,280
 And it's interesting to run the sensitivity analysis.

232
00:13:17,280 --> 00:13:19,600
 There's ways to sort of see how sensitive are you

233
00:13:19,600 --> 00:13:22,920
 to your mass matrix estimate and the like.

234
00:13:22,920 --> 00:13:26,880
 But to an extent, I mean, this works.

235
00:13:26,880 --> 00:13:30,360
 So it works in the case of a known robot arm.

236
00:13:30,360 --> 00:13:32,840
 Let's be super clear, actually, that if I

237
00:13:32,840 --> 00:13:36,200
 were to write the dynamics of a full manipulation problem,

238
00:13:36,200 --> 00:13:38,800
 where the equations of motion included

239
00:13:38,800 --> 00:13:43,040
 both the robot and the world, the manipulator

240
00:13:43,040 --> 00:13:44,680
 and the manipulate--

241
00:13:44,680 --> 00:13:47,180
 and the manipuland-- you guys know

242
00:13:47,180 --> 00:13:49,760
 the word-- I don't know if I've used the word manipuland a lot.

243
00:13:49,760 --> 00:13:55,960
 But that's what people often call

244
00:13:55,960 --> 00:13:57,800
 the thing you're manipulating.

245
00:13:57,800 --> 00:14:01,480
 It's kind of-- actually, props to Steffi if she's out there.

246
00:14:01,480 --> 00:14:03,840
 She made me laugh about how ridiculous this is.

247
00:14:03,840 --> 00:14:05,760
 It sounds like a place where everybody's happy

248
00:14:05,760 --> 00:14:06,760
 and manipulating, right?

249
00:14:06,760 --> 00:14:10,040
 But that's the word people use, right?

250
00:14:10,040 --> 00:14:10,800
 That's the object.

251
00:14:10,800 --> 00:14:13,080
 OK, if you had equations, what would

252
00:14:13,080 --> 00:14:15,760
 happen if you had equations that included

253
00:14:15,760 --> 00:14:22,160
 both the masses of the robot and the masses of the manipuland?

254
00:14:22,160 --> 00:14:24,160
 Well, I can't write this form anymore

255
00:14:24,160 --> 00:14:30,040
 because I don't have torque applied directly to the objects.

256
00:14:30,040 --> 00:14:33,680
 I only have seven actuators on my robot,

257
00:14:33,680 --> 00:14:35,760
 and I don't have actuators directly affecting.

258
00:14:35,760 --> 00:14:38,200
 So I can't directly overwrite the dynamics

259
00:14:38,200 --> 00:14:40,840
 of the objects in the world.

260
00:14:40,840 --> 00:14:45,040
 This B matrix becomes low rank.

261
00:14:45,040 --> 00:14:47,720
 And so that's why this is a lecture in underactuated

262
00:14:47,720 --> 00:14:50,560
 because the whole system is underactuated

263
00:14:50,560 --> 00:14:53,360
 if you consider the robot and the world.

264
00:14:53,360 --> 00:14:55,560
 And that's kind of what the other class I teach

265
00:14:55,560 --> 00:14:57,480
 on robotics is called underactuated robotics.

266
00:14:57,480 --> 00:14:59,480
 It's all about that.

267
00:14:59,480 --> 00:15:02,840
 So that's definitely a limitation.

268
00:15:02,840 --> 00:15:05,440
 But of course, like you said, these are also limitations.

269
00:15:05,440 --> 00:15:07,640
 You have to estimate this.

270
00:15:07,640 --> 00:15:12,480
 And also, if you ask your system to follow

271
00:15:12,480 --> 00:15:15,960
 some dynamics that just requires ridiculous amounts of torque,

272
00:15:15,960 --> 00:15:18,280
 and you have torque limits, there's

273
00:15:18,280 --> 00:15:21,520
 lots of things that could potentially interfere with this.

274
00:15:21,520 --> 00:15:24,080
 But locally, within reason, if you

275
00:15:24,080 --> 00:15:26,160
 want to change your dynamics a bit,

276
00:15:26,160 --> 00:15:28,480
 then it's an incredibly practical, powerful idea.

277
00:15:28,480 --> 00:15:40,920
 And this philosophy is going to underlie what we're going to do.

278
00:15:40,920 --> 00:15:44,680
 Basically, the goal is make my big, complicated robot

279
00:15:44,680 --> 00:15:47,400
 act like it's a point robot at the end.

280
00:15:47,400 --> 00:15:49,360
 And I can apply forces at the end,

281
00:15:49,360 --> 00:15:51,960
 or I can program the interaction at the end.

282
00:15:51,960 --> 00:16:00,680
 OK, so let's generalize that idea

283
00:16:00,680 --> 00:16:03,440
 or implement a version of that idea that

284
00:16:03,440 --> 00:16:09,720
 is going to act like a stiffness controller.

285
00:16:09,720 --> 00:16:12,560
 So if I want to program the interactions,

286
00:16:12,560 --> 00:16:14,200
 but I'll start by just programming them

287
00:16:14,200 --> 00:16:15,440
 at the joint level.

288
00:16:15,440 --> 00:16:17,400
 So instead of having my double pendulum

289
00:16:17,400 --> 00:16:20,280
 act like a simple pendulum, I'll make

290
00:16:20,280 --> 00:16:22,800
 it act like a system that, when I push it,

291
00:16:22,800 --> 00:16:24,840
 has some desired mechanical response.

292
00:16:24,840 --> 00:16:25,340
 OK?

293
00:16:25,340 --> 00:16:49,040
 So there's a bunch of different controllers

294
00:16:49,040 --> 00:16:51,440
 we could have written here.

295
00:16:51,440 --> 00:16:54,320
 We talked, even in lecture two, about the differences

296
00:16:54,320 --> 00:16:57,120
 in torque control and position control.

297
00:16:57,120 --> 00:17:00,960
 If I were to write a position controller for this,

298
00:17:00,960 --> 00:17:21,040
 I might write a PD control, something like this Q.

299
00:17:21,040 --> 00:17:23,640
 That's one controller I could write.

300
00:17:23,640 --> 00:17:26,600
 The philosophy in stiffness control, though,

301
00:17:26,600 --> 00:17:31,560
 is not to have somehow just a rigid position,

302
00:17:31,560 --> 00:17:33,240
 but to actually program the response.

303
00:17:33,240 --> 00:17:36,960
 If I were to-- I want my pendulum to act,

304
00:17:36,960 --> 00:17:39,520
 not like a simple pendulum, but like a different mechanical

305
00:17:39,520 --> 00:17:43,880
 system, which has a particular response to torque

306
00:17:43,880 --> 00:17:46,440
 perturbations.

307
00:17:46,440 --> 00:17:49,280
 So I'd like to act like it's a pendulum that's

308
00:17:49,280 --> 00:17:55,080
 hanging down that has some springs, some rotary springs,

309
00:17:55,080 --> 00:17:58,400
 here, that have a certain stiffness, and maybe

310
00:17:58,400 --> 00:18:00,360
 some damping.

311
00:18:00,360 --> 00:18:04,320
 So I'd like it to act a system like this.

312
00:18:04,320 --> 00:18:26,800
.

313
00:18:26,800 --> 00:18:28,600
 This is the interaction that I would like.

314
00:18:28,600 --> 00:18:31,160
 I would like it to be that if my pendulum is sitting there,

315
00:18:31,160 --> 00:18:33,160
 and I were to go up and push on it--

316
00:18:33,160 --> 00:18:36,960
 now, the push, in this case, is written in the--

317
00:18:36,960 --> 00:18:39,200
 the coordinates of this equation is in torques.

318
00:18:39,200 --> 00:18:40,800
 But you can imagine coming in and just

319
00:18:40,800 --> 00:18:42,200
 giving a torque perturbation.

320
00:18:42,200 --> 00:18:44,040
 Or if I had a force that I pushed on the end,

321
00:18:44,040 --> 00:18:48,200
 I could transform that into the torque coordinates.

322
00:18:48,200 --> 00:18:50,340
 But if there's a perturbation in torque,

323
00:18:50,340 --> 00:18:52,420
 whether it's because someone actually pushed on me

324
00:18:52,420 --> 00:18:54,220
 or the robot's moving and it didn't realize

325
00:18:54,220 --> 00:18:57,400
 it ran into the dishwasher or whatever it is,

326
00:18:57,400 --> 00:19:00,600
 then I'd like it to respond gracefully as if it was

327
00:19:00,600 --> 00:19:02,440
 a mass spring damper system.

328
00:19:02,440 --> 00:19:06,120
 This is almost-- this is just the generalization of the mx

329
00:19:06,120 --> 00:19:15,160
 double dot equals kx plus bx dot equals--

330
00:19:15,160 --> 00:19:23,400
 this would be the simple mass spring damper

331
00:19:23,400 --> 00:19:28,120
 that you get from 18.03.

332
00:19:28,120 --> 00:19:30,680
 And this is just the joint version of that.

333
00:19:30,680 --> 00:19:38,280
 OK, so using the same philosophy from the feedback cancellation,

334
00:19:38,280 --> 00:19:45,680
 whatever is back here, I can write this controller

335
00:19:45,680 --> 00:19:49,040
 by canceling out the dynamics of the plant that I don't like

336
00:19:49,040 --> 00:19:52,480
 and inserting the dynamics I do like,

337
00:19:52,480 --> 00:19:55,080
 just like the pendulum example.

338
00:19:55,080 --> 00:20:01,680
 So the controller I write here, it's very simple.

339
00:20:01,680 --> 00:20:03,800
 It's going to look not so different than before.

340
00:20:03,800 --> 00:20:07,520
 I'll just choose u to cancel out pow g.

341
00:20:07,520 --> 00:20:14,120
 I'm going to leave-- see, I have this term

342
00:20:14,120 --> 00:20:15,200
 I don't have to cancel out.

343
00:20:15,200 --> 00:20:16,760
 I've left that alone for now.

344
00:20:16,760 --> 00:20:18,960
 We'll talk about that.

345
00:20:18,960 --> 00:20:33,080
 And then I'll just add in my-- this

346
00:20:33,080 --> 00:20:38,440
 looks almost identical to the PD controller I did--

347
00:20:38,440 --> 00:20:41,040
 we put as our strong end.

348
00:20:41,040 --> 00:20:42,360
 But it has one extra term.

349
00:20:42,360 --> 00:20:44,080
 It's got the PD control.

350
00:20:44,080 --> 00:20:45,920
 I made this point last time too, right?

351
00:20:46,280 --> 00:20:52,480
 So I'm going to add in my PD plus some gravity compensation.

352
00:20:52,480 --> 00:21:02,000
 Same thing I said for the point finger.

353
00:21:02,000 --> 00:21:05,960
 And in practice, when the EWA is doing this,

354
00:21:05,960 --> 00:21:09,440
 it's actually doing much more than just gravity compensation.

355
00:21:09,440 --> 00:21:11,360
 Did I get something wrong?

356
00:21:11,360 --> 00:21:11,860
 Yeah?

357
00:21:11,860 --> 00:21:17,300
 [INAUDIBLE]

358
00:21:17,300 --> 00:21:17,800
 Yes.

359
00:21:17,800 --> 00:21:18,300
 Good.

360
00:21:18,300 --> 00:21:18,800
 Thank you.

361
00:21:18,800 --> 00:21:23,640
 Yep.

362
00:21:23,640 --> 00:21:24,520
 I have to flip it.

363
00:21:24,520 --> 00:21:26,020
 When I put it on this side and I want

364
00:21:26,020 --> 00:21:28,460
 to think of it as a stiffness, I get it like this.

365
00:21:28,460 --> 00:21:30,500
 And when it's on this side, I have to do this.

366
00:21:30,500 --> 00:21:33,080
 Thank you for catching that.

367
00:21:33,080 --> 00:21:34,500
 There was a high probability I was

368
00:21:34,500 --> 00:21:36,700
 going to get at least one of those signs wrong today.

369
00:21:36,700 --> 00:21:38,660
 There were so many of them that looked similar.

370
00:21:38,660 --> 00:21:40,220
 OK.

371
00:21:40,220 --> 00:21:43,380
 On EWA, they're doing gravity compensation.

372
00:21:43,380 --> 00:21:45,860
 But they're also doing friction compensation

373
00:21:45,860 --> 00:21:48,700
 and some pretty subtle stuff at the actuator level

374
00:21:48,700 --> 00:21:52,060
 to try to basically cancel out the effective dynamics

375
00:21:52,060 --> 00:21:56,540
 of the arm and replace it with this stiffness

376
00:21:56,540 --> 00:22:00,380
 kind of interaction when you run the EWA in joint stiffness

377
00:22:00,380 --> 00:22:01,940
 control or joint impedance control.

378
00:22:01,940 --> 00:22:04,500
 We'll say that in a second.

379
00:22:04,500 --> 00:22:05,300
 OK.

380
00:22:05,300 --> 00:22:10,340
 Now, again, so what's the big difference

381
00:22:10,340 --> 00:22:14,900
 in practice between having this versus having this?

382
00:22:14,900 --> 00:22:17,100
 It can make a huge difference in practice

383
00:22:17,100 --> 00:22:21,980
 because if you think about even the double pendulum,

384
00:22:21,980 --> 00:22:25,780
 if I need to choose a stiffness that allows me to work sort

385
00:22:25,780 --> 00:22:28,340
 of when I'm at a horizontal position where I've

386
00:22:28,340 --> 00:22:31,460
 got gravity pulling down and this term could be large,

387
00:22:31,460 --> 00:22:34,180
 if I want to have a small position error here,

388
00:22:34,180 --> 00:22:39,380
 I need to choose KP very big in the PD controller.

389
00:22:39,380 --> 00:22:40,820
 OK.

390
00:22:40,820 --> 00:22:44,860
 And here, KP could be excessive down here

391
00:22:44,860 --> 00:22:46,700
 to have that kind of KP that I would need here

392
00:22:46,700 --> 00:22:47,700
 just to get a reasonable.

393
00:22:47,700 --> 00:22:50,040
 So if you want reasonable performance all over the state

394
00:22:50,040 --> 00:22:51,620
 space, with the PD controller, you

395
00:22:51,620 --> 00:22:55,300
 have to choose KP very large, KP very large to damp that out.

396
00:22:55,300 --> 00:22:56,140
 OK.

397
00:22:56,140 --> 00:22:57,900
 If I subtract out gravity, then I

398
00:22:57,900 --> 00:23:02,100
 can write a smaller KP that has a similar response

399
00:23:02,100 --> 00:23:04,820
 all over the workspace.

400
00:23:04,820 --> 00:23:07,060
 That makes a big difference in practice.

401
00:23:07,060 --> 00:23:08,940
 It means you can choose these much lower

402
00:23:08,940 --> 00:23:10,820
 and you can be much more responsive.

403
00:23:10,820 --> 00:23:13,580
 So in practice, when people are running these controllers,

404
00:23:13,580 --> 00:23:15,300
 you bump into the robot and it's like,

405
00:23:15,300 --> 00:23:17,860
 and maybe it's a fault and powers down.

406
00:23:17,860 --> 00:23:19,820
 If you do it like this, then the EWA,

407
00:23:19,820 --> 00:23:22,380
 the way we typically operate it, will just kind of

408
00:23:22,380 --> 00:23:23,940
 be soft enough to get out of the way.

409
00:23:23,940 --> 00:23:29,500
 OK.

410
00:23:29,500 --> 00:23:36,820
 We chose our desired dynamics to use the initial mass.

411
00:23:36,820 --> 00:23:39,360
 So you should think of these things as always going together.

412
00:23:39,360 --> 00:23:43,860
 This one is just like the MA in F equals MA.

413
00:23:43,860 --> 00:23:46,460
 Those two really go together.

414
00:23:46,460 --> 00:23:49,100
 And we chose not to change them.

415
00:23:49,100 --> 00:23:52,220
 You can imagine the same kind of trick

416
00:23:52,220 --> 00:23:55,620
 where you go through and you try to cancel out M and C.

417
00:23:55,620 --> 00:24:00,660
 But it typically requires high bandwidth to achieve well,

418
00:24:00,660 --> 00:24:02,820
 good accuracy of your mass.

419
00:24:02,820 --> 00:24:05,980
 That would take you into a joint impedance control mode.

420
00:24:05,980 --> 00:24:09,420
 [WRITING ON BOARD]

421
00:24:09,420 --> 00:24:27,860
 And sometimes this stiffness control,

422
00:24:27,860 --> 00:24:30,740
 you might call it the simple impedance control.

423
00:24:30,740 --> 00:24:33,180
 I think impedance control is the more general term.

424
00:24:33,180 --> 00:24:40,140
 And it often gets used for the whole set of concepts.

425
00:24:40,140 --> 00:24:43,380
 EWA, actually, when you go into their settings,

426
00:24:43,380 --> 00:24:46,820
 it's like you're definitely choosing joint impedance mode.

427
00:24:46,820 --> 00:24:49,660
 And they are doing some amount of mass cancellation.

428
00:24:49,660 --> 00:24:51,300
 But actually, they're only compensating

429
00:24:51,300 --> 00:24:54,260
 for the masses of the rotors and not for the whole robot.

430
00:24:54,260 --> 00:24:57,140
 And it's actually a very subtle, I think,

431
00:24:57,140 --> 00:24:59,060
 well thought out, carefully designed control

432
00:24:59,060 --> 00:25:00,780
 that does exactly this kind of thing.

433
00:25:00,780 --> 00:25:03,780
 So they are technically changing this a little bit,

434
00:25:03,780 --> 00:25:08,100
 but not in the way of making a different effective mass.

435
00:25:08,100 --> 00:25:14,020
 Does that make sense?

436
00:25:14,020 --> 00:25:20,220
 It's really a lot like the feedback cancellation story.

437
00:25:20,220 --> 00:25:21,980
 But it's trying to do a little bit less.

438
00:25:21,980 --> 00:25:23,780
 And it's even more robust because of it.

439
00:25:23,780 --> 00:25:26,740
 [SIDE CONVERSATION]

440
00:25:26,740 --> 00:25:37,580
 I had thought about possibly spending some time talking

441
00:25:37,580 --> 00:25:41,580
 in more detail about the EWA implementation.

442
00:25:41,580 --> 00:25:46,820
 I decided if most of you are not using EWA all your life

443
00:25:46,820 --> 00:25:52,780
 or care more about RL agents in simulation or whatever it is,

444
00:25:52,780 --> 00:25:55,820
 maybe that I shouldn't dig in too much to those details.

445
00:25:55,820 --> 00:26:01,100
 But I will recommend that the papers are totally fantastic.

446
00:26:01,100 --> 00:26:02,820
 Strongly recommend the papers, which

447
00:26:02,820 --> 00:26:06,500
 are linked from the notes by Albus Schaefer and Christian

448
00:26:06,500 --> 00:26:16,500
 Ott about the elastic control of elastic joint robots.

449
00:26:17,500 --> 00:26:18,900
 I would say impedance control.

450
00:26:18,900 --> 00:26:25,260
 Alessandro De Luca has some great notes, too,

451
00:26:25,260 --> 00:26:26,100
 if you're interested.

452
00:26:26,100 --> 00:26:35,860
 Mark Spong had some of the early work of it.

453
00:26:35,860 --> 00:26:36,420
 There's a lot.

454
00:26:36,420 --> 00:26:38,100
 There's a really good literature there

455
00:26:38,100 --> 00:26:40,340
 that I was tempted to talk about, but decided not to.

456
00:26:40,940 --> 00:26:43,980
 So let me remind you a point I made earlier when I was just

457
00:26:43,980 --> 00:26:48,420
 telling you the virtues of EWA is the fact that we do have

458
00:26:48,420 --> 00:26:52,820
 that kind of capability, and we exploit it often.

459
00:26:52,820 --> 00:26:56,060
 So in the pieces of the dish task, for instance,

460
00:26:56,060 --> 00:26:58,020
 opening that door.

461
00:26:58,020 --> 00:27:03,620
 So the joint trajectory that is programmed is a big part of it.

462
00:27:03,620 --> 00:27:05,500
 And it's a big part of the job.

463
00:27:05,500 --> 00:27:07,860
 So it's a really big part of the job.

464
00:27:07,860 --> 00:27:10,740
 The joint trajectory that is programmed

465
00:27:10,740 --> 00:27:12,900
 to follow during that opening motion

466
00:27:12,900 --> 00:27:16,860
 is actually deviating probably significantly,

467
00:27:16,860 --> 00:27:21,460
 depending on how accurately we modeled and actually

468
00:27:21,460 --> 00:27:24,180
 captured the location of the dishwasher,

469
00:27:24,180 --> 00:27:25,860
 and even the hinge of the dishwasher.

470
00:27:25,860 --> 00:27:28,260
 You can imagine that if you're trying to move down exactly

471
00:27:28,260 --> 00:27:31,340
 some kinematic constraint given by the door of the dishwasher,

472
00:27:31,340 --> 00:27:33,340
 if you're a little bit off, then it pays a lot

473
00:27:33,340 --> 00:27:36,180
 to be flexible enough to just follow whatever contour is

474
00:27:36,180 --> 00:27:38,500
 given by the actual position of the dishwasher

475
00:27:38,500 --> 00:27:41,580
 and not by your course approximation.

476
00:27:41,580 --> 00:27:44,700
 You can see that over and over again.

477
00:27:44,700 --> 00:27:47,300
 For the EWAs upstairs, we have a little IKEA cabinet

478
00:27:47,300 --> 00:27:49,500
 that you can open, and you'll see the same thing.

479
00:27:49,500 --> 00:27:52,980
 If you spend any time trying to open those IKEA cabinet doors,

480
00:27:52,980 --> 00:27:54,740
 your fingers will typically slip right off

481
00:27:54,740 --> 00:27:58,380
 if you're in too stiff of a mode and you have to get soft.

482
00:27:58,380 --> 00:28:01,020
 Similarly, when you push down here,

483
00:28:01,020 --> 00:28:04,940
 so it's still in a joint impedance mode there,

484
00:28:04,940 --> 00:28:07,620
 and it's not tracking the position trajectory

485
00:28:07,620 --> 00:28:10,100
 super accurately, but it's accomplishing the task.

486
00:28:10,100 --> 00:28:16,500
 Cool.

487
00:28:16,500 --> 00:28:17,980
 Does that make sense?

488
00:28:17,980 --> 00:28:18,460
 All right.

489
00:28:18,460 --> 00:28:21,900
 Now, the interesting part here is how we go from this basic--

490
00:28:21,900 --> 00:28:23,400
 I guess that's distracting.

491
00:28:23,400 --> 00:28:29,340
 So how do we take this idea now and implement it

492
00:28:29,340 --> 00:28:31,100
 at the end effector?

493
00:28:31,100 --> 00:28:34,020
 So instead of affecting the dynamics in Q,

494
00:28:34,020 --> 00:28:36,780
 we want to write the dynamics at the end effector.

495
00:28:36,780 --> 00:28:38,400
 So I want to go up, and I want to push

496
00:28:38,400 --> 00:28:41,260
 on the fingertip of the EWA and have

497
00:28:41,260 --> 00:28:46,100
 it act like a mass spring damper system in 3D or whatever.

498
00:28:46,100 --> 00:29:02,100
 So--

499
00:29:02,100 --> 00:29:23,060
 [WRITING ON BOARD]

500
00:29:23,060 --> 00:29:27,700
 So this is sometimes called Cartesian stiffness control,

501
00:29:27,700 --> 00:29:37,500
 end effector stiffness control.

502
00:29:37,500 --> 00:29:40,180
 OK, so how do you take those basic equations

503
00:29:40,180 --> 00:29:43,900
 and impose a dynamics in the end effector?

504
00:29:43,900 --> 00:29:52,980
 Now, we have the end position of the arm

505
00:29:52,980 --> 00:29:57,220
 given by some kinematic function of Q.

506
00:29:57,220 --> 00:30:00,780
 So this is the relationship we get to work with.

507
00:30:00,780 --> 00:30:02,460
 And I would like to impose something

508
00:30:02,460 --> 00:30:09,900
 like mp c double dot plus bc dot--

509
00:30:09,900 --> 00:30:19,380
 tell me if I get the sign wrong--

510
00:30:19,380 --> 00:30:27,180
 equals some-- this is my goal.

511
00:30:27,180 --> 00:30:28,720
 It's to achieve something like this.

512
00:30:28,720 --> 00:30:37,820
 The interesting thing is that the way that--

513
00:30:37,820 --> 00:30:40,100
 if I were to try to rewrite the original Q

514
00:30:40,100 --> 00:30:44,580
 coordinates in this form, I have to somehow change between Q

515
00:30:44,580 --> 00:30:47,460
 and P. OK?

516
00:30:47,460 --> 00:30:50,140
 It turns out you can take those initial equations.

517
00:30:50,140 --> 00:30:52,380
 I think it's very easy in the derivation

518
00:30:52,380 --> 00:30:56,700
 to end up at a dead end.

519
00:30:56,700 --> 00:31:00,500
 But I promise you that the proper change of coordinates

520
00:31:00,500 --> 00:31:02,740
 that gets you through is you have

521
00:31:02,740 --> 00:31:05,460
 to write your end effector mass.

522
00:31:05,460 --> 00:31:14,380
 This is the Jacobian here.

523
00:31:14,380 --> 00:31:26,540
 I use the Jacobian times mass inverse of the original system

524
00:31:26,540 --> 00:31:29,540
 Jacobian transpose.

525
00:31:29,540 --> 00:31:31,740
 Take the inverse of this whole thing.

526
00:31:31,740 --> 00:31:34,340
 And that's my new effective mass.

527
00:31:34,340 --> 00:31:39,300
 It's not surprising that you're going to use the Jacobian

528
00:31:39,300 --> 00:31:40,700
 to change coordinates.

529
00:31:40,700 --> 00:31:42,200
 What's maybe a little surprising is

530
00:31:42,200 --> 00:31:45,660
 that you can write the equations of motion in the end effector

531
00:31:45,660 --> 00:31:49,100
 frame as a function of the original coordinates

532
00:31:49,100 --> 00:31:51,060
 and the Jacobian.

533
00:31:51,060 --> 00:31:53,340
 So I can get a new set of equations

534
00:31:53,340 --> 00:32:01,900
 with an altered mass matrix, an altered Coriolis

535
00:32:01,900 --> 00:32:07,060
 matrix, which still depends on Q and Q dot,

536
00:32:07,060 --> 00:32:17,020
 an altered torque matrix-- I called it this in the notes--

537
00:32:17,020 --> 00:32:23,420
 plus my u in the new coordinates plus my external forces.

538
00:32:23,420 --> 00:32:40,620
 This transformation is often called operation space form

539
00:32:40,620 --> 00:32:41,220
 of the dynamics.

540
00:32:41,220 --> 00:32:48,460
 It's super useful.

541
00:32:48,460 --> 00:32:50,500
 OK?

542
00:32:50,500 --> 00:32:53,180
 Yes?

543
00:32:53,180 --> 00:32:56,380
 I was just about to ask you that.

544
00:32:56,380 --> 00:32:57,380
 It's not really fair.

545
00:32:57,380 --> 00:32:59,700
 If you ask me before I ask you, then do I still

546
00:32:59,700 --> 00:33:02,020
 get to ask you, right?

547
00:33:02,020 --> 00:33:03,220
 I'm going to ask you.

548
00:33:03,220 --> 00:33:05,740
 Is it obvious that this matrix is invertible?

549
00:33:05,740 --> 00:33:07,480
 What are the conditions that would require

550
00:33:07,480 --> 00:33:08,980
 that that matrix be invertible?

551
00:33:08,980 --> 00:33:19,780
 In general, you'd expect this to exist.

552
00:33:19,780 --> 00:33:22,500
 This would be like the right inverse of A

553
00:33:22,500 --> 00:33:24,380
 if A has full row rank.

554
00:33:24,380 --> 00:33:36,660
 OK?

555
00:33:36,660 --> 00:33:41,340
 So let's first ask, does the Jacobian have full row rank?

556
00:33:41,340 --> 00:33:43,700
 You can certainly find singular configurations

557
00:33:43,700 --> 00:33:45,020
 where it doesn't.

558
00:33:45,020 --> 00:33:48,580
 But in reasonable parts of the workspace,

559
00:33:48,580 --> 00:33:55,020
 J tends to be, for instance, could be like 3 by nQ,

560
00:33:55,020 --> 00:33:57,300
 for instance, if I'm trying to do n-defector.

561
00:33:57,300 --> 00:34:01,780
 It tends to be full row rank and low column rank

562
00:34:01,780 --> 00:34:07,380
 because it's a long, short matrix.

563
00:34:07,380 --> 00:34:09,060
 OK?

564
00:34:09,060 --> 00:34:11,860
 So this has every reason to work.

565
00:34:11,860 --> 00:34:14,140
 And then M is actually also positive definite.

566
00:34:14,140 --> 00:34:16,220
 So this thing is going to be well-conditioned, too.

567
00:34:16,220 --> 00:34:18,060
 So this thing, yes, will have an inverse,

568
00:34:18,060 --> 00:34:24,540
 as long as J doesn't go singular, which

569
00:34:24,540 --> 00:34:27,060
 is as it should be.

570
00:34:27,060 --> 00:34:29,620
 If you just try to start jamming J transpose

571
00:34:29,620 --> 00:34:31,740
 into your original equations of motion, like I said,

572
00:34:31,740 --> 00:34:33,100
 you'll find yourself stuck.

573
00:34:33,100 --> 00:34:37,260
 But I think it must be the case that if I

574
00:34:37,260 --> 00:34:41,180
 were to push on the n-defector of a physical contraption,

575
00:34:41,180 --> 00:34:46,420
 it will push back on me with some physical force.

576
00:34:46,420 --> 00:34:51,340
 That force that it pushes back on is configuration dependent.

577
00:34:51,340 --> 00:34:53,820
 There's some big, complicated set of mass.

578
00:34:53,820 --> 00:34:55,820
 I'll have more or less of it working against me

579
00:34:55,820 --> 00:34:59,820
 at each axis, depending on the configuration of that mass.

580
00:34:59,820 --> 00:35:02,340
 OK?

581
00:35:02,340 --> 00:35:05,180
 OK, but this was the magic step we need.

582
00:35:05,180 --> 00:35:07,540
 Now we can do, if we start working

583
00:35:07,540 --> 00:35:11,340
 in this, the dynamics in the operation space,

584
00:35:11,340 --> 00:35:14,620
 or the n-defector space, then we can just

585
00:35:14,620 --> 00:35:16,500
 do feedback cancellation in this lower space.

586
00:35:16,500 --> 00:35:21,100
 OK, yes?

587
00:35:21,100 --> 00:35:33,020
 [INAUDIBLE]

588
00:35:33,020 --> 00:35:35,260
 So we had a good question about this,

589
00:35:35,260 --> 00:35:37,060
 even when I was talking about singularities.

590
00:35:37,060 --> 00:35:40,660
 Like, what is your ability to produce force at this end point?

591
00:35:40,660 --> 00:35:43,460
 The controller can't produce force in that direction

592
00:35:43,460 --> 00:35:44,340
 instantaneously.

593
00:35:44,340 --> 00:35:47,460
 But it can produce a force dot.

594
00:35:47,460 --> 00:35:48,820
 So you have to be careful, if you

595
00:35:48,820 --> 00:35:50,940
 start writing these controllers in those singular

596
00:35:50,940 --> 00:35:53,660
 configurations, and you tend to either do

597
00:35:53,660 --> 00:35:56,340
 the kind of things we talked about with writing it

598
00:35:56,340 --> 00:35:59,060
 in a constrained least squares and put some boundaries on it,

599
00:35:59,060 --> 00:36:00,060
 or something like that.

600
00:36:00,060 --> 00:36:04,140
 Yeah, but I think, try not to do that, or be careful about it.

601
00:36:04,140 --> 00:36:06,500
 There's something else that's happening here, too, right?

602
00:36:06,500 --> 00:36:08,740
 So if I write a controller that tells

603
00:36:08,740 --> 00:36:12,220
 me to act like a certain dynamics in the xyz

604
00:36:12,220 --> 00:36:14,540
 configuration, but let's say I have

605
00:36:14,540 --> 00:36:17,700
 seven degrees of freedom of my robot,

606
00:36:17,700 --> 00:36:19,700
 then you've still got to do something else.

607
00:36:19,700 --> 00:36:23,500
 The same way in our Jacobian-based controller,

608
00:36:23,500 --> 00:36:26,100
 we talked about putting a secondary objective

609
00:36:26,100 --> 00:36:28,700
 in the null space, something, for instance,

610
00:36:28,700 --> 00:36:30,980
 just stay in a comfortable joint configuration.

611
00:36:30,980 --> 00:36:32,400
 You need to do something like this

612
00:36:32,400 --> 00:36:35,700
 to stabilize the null space of this controller, too.

613
00:36:40,500 --> 00:36:53,100
 So such that this basically almost equals this.

614
00:36:53,100 --> 00:36:53,600
 OK?

615
00:37:21,580 --> 00:37:24,660
 Plus null space stabilization.

616
00:37:24,660 --> 00:37:34,300
 OK.

617
00:37:34,300 --> 00:37:35,620
 So that has some implications.

618
00:37:35,620 --> 00:37:41,700
 The fact that we tend to not try to change m and c,

619
00:37:41,700 --> 00:37:44,020
 and the fact that it is configuration-dependent

620
00:37:44,020 --> 00:37:47,940
 means that instantaneously, you can make your robot act

621
00:37:47,940 --> 00:37:50,300
 like a mass-spring-damper system.

622
00:37:50,300 --> 00:37:52,500
 The mass that it acts like, though,

623
00:37:52,500 --> 00:37:56,860
 will be configuration-dependent, almost always.

624
00:37:56,860 --> 00:37:59,700
 So in the quasi-static analysis case,

625
00:37:59,700 --> 00:38:02,700
 if the accelerations are small, and you're just

626
00:38:02,700 --> 00:38:05,500
 trying to push and see how far does it deflect before it

627
00:38:05,500 --> 00:38:08,980
 stops, before you hit a new steady state,

628
00:38:08,980 --> 00:38:11,020
 the mass doesn't matter there.

629
00:38:11,020 --> 00:38:15,580
 The inertial terms don't matter in the static analysis.

630
00:38:15,580 --> 00:38:17,020
 But in the dynamic analysis, if you

631
00:38:17,020 --> 00:38:19,780
 start trying to understand the dynamics of your robot,

632
00:38:19,780 --> 00:38:24,660
 then it is going to be notable, maybe not hugely important.

633
00:38:24,660 --> 00:38:27,060
 Like I said, it would be beautiful and clean

634
00:38:27,060 --> 00:38:29,460
 to make them somehow constant a function of q,

635
00:38:29,460 --> 00:38:31,700
 but we tend to not do that.

636
00:38:31,700 --> 00:38:34,260
 There's theoretical limits on how much

637
00:38:34,260 --> 00:38:36,220
 you can change the mass to before you write

638
00:38:36,220 --> 00:38:37,940
 a controller that is unstable.

639
00:38:37,940 --> 00:38:40,540
 And Neville has some great surveys on that.

640
00:38:40,540 --> 00:38:44,140
 Neville Hogan has some great surveys on that kind of thing.

641
00:38:44,140 --> 00:38:49,420
 OK, so if you remember--

642
00:38:49,420 --> 00:38:51,100
 maybe I didn't show all of them before,

643
00:38:51,100 --> 00:38:58,860
 but this is end-effector impedance control.

644
00:38:58,860 --> 00:39:00,860
 And again, it's only barely impedance control.

645
00:39:00,860 --> 00:39:03,860
 It's really more of a stiffness control, I'd say.

646
00:39:03,860 --> 00:39:07,580
 And watch-- first of all, he's very happy, so it must be good.

647
00:39:07,580 --> 00:39:09,940
 And second of all, they're going to change the compliance,

648
00:39:09,940 --> 00:39:12,020
 the effect of compliance.

649
00:39:12,020 --> 00:39:16,980
 And he's going to show you that by changing the compliance

650
00:39:16,980 --> 00:39:19,220
 there, now it's a very low compliance.

651
00:39:19,220 --> 00:39:21,700
 A small force is allowing a big perturbation.

652
00:39:21,700 --> 00:39:26,220
 Again, the stiffness of that will not

653
00:39:26,220 --> 00:39:32,540
 change as a function of the position of the end-effector,

654
00:39:32,540 --> 00:39:35,340
 but the effective mass will.

655
00:39:35,340 --> 00:39:38,140
 There's no reason why you have to choose the same stiffness

656
00:39:38,140 --> 00:39:41,500
 in all three axes.

657
00:39:41,500 --> 00:39:43,340
 You can choose them differently, and that's

658
00:39:43,340 --> 00:39:48,820
 going to be important at the end of the lecture, I think.

659
00:39:48,820 --> 00:39:50,020
 That's probably fun to watch.

660
00:39:50,020 --> 00:39:56,900
 You can also write stiffness in orientation.

661
00:39:56,900 --> 00:39:58,740
 So I think this one is showing--

662
00:39:58,740 --> 00:40:02,020
 you can set a rotational compliance, too.

663
00:40:02,020 --> 00:40:05,500
 If you're now trying to control the whole parameterized

664
00:40:05,500 --> 00:40:07,860
 in terms of roll-bit-jaw, or however you parameterize

665
00:40:07,860 --> 00:40:11,100
 the end-effector stiffness, you can similarly

666
00:40:11,100 --> 00:40:15,180
 command an end-effector stiffness on this.

667
00:40:15,180 --> 00:40:19,620
 Make it very soft in rotation, very stiff in translation.

668
00:40:19,620 --> 00:40:24,020
 Pretty beautiful.

669
00:40:24,020 --> 00:40:34,100
 OK, one more point, a small point or detail

670
00:40:34,100 --> 00:40:35,860
 to call out here.

671
00:40:35,860 --> 00:40:41,060
 When you go to implement this controller,

672
00:40:41,060 --> 00:40:43,100
 one of the things you need is you actually

673
00:40:43,100 --> 00:40:47,860
 need to insert somehow the acceleration.

674
00:40:47,860 --> 00:40:51,380
 You need p double dot of c, right?

675
00:40:51,380 --> 00:40:53,020
 This is just kind of an aside here,

676
00:40:53,020 --> 00:41:01,940
 but we said p of c is f of kinematics of q.

677
00:41:01,940 --> 00:41:11,140
 We know p dot of c takes this form, the Jacobian.

678
00:41:11,140 --> 00:41:14,660
 You end up needing p double dot of c, too, in the derivation.

679
00:41:14,660 --> 00:41:16,360
 And it comes up in a lot of derivations,

680
00:41:16,360 --> 00:41:19,660
 so I just want to call it out here.

681
00:41:19,660 --> 00:41:23,220
 So what is p double dot of c?

682
00:41:23,220 --> 00:41:28,180
 We want to take one more time derivative of this equation.

683
00:41:28,180 --> 00:41:30,100
 So using the chain rule, I can write it

684
00:41:30,100 --> 00:41:42,660
 as jcq q double dot plus j dot cq q dot.

685
00:41:42,660 --> 00:41:45,020
 And there's a question that we get every couple of months

686
00:41:45,020 --> 00:41:46,460
 on Stack Overflow.

687
00:41:46,460 --> 00:41:48,420
 They're like, oh, how do you produce--

688
00:41:48,420 --> 00:41:56,420
 how do you get j dot in Drake?

689
00:41:56,420 --> 00:41:59,340
 Sorry, that's a specific version of the question.

690
00:41:59,340 --> 00:42:02,500
 But this comes up often.

691
00:42:02,500 --> 00:42:05,940
 And the answer is you don't, or you could,

692
00:42:05,940 --> 00:42:07,260
 but you really don't want that.

693
00:42:07,260 --> 00:42:08,500
 You probably don't want that.

694
00:42:08,500 --> 00:42:17,900
 And this is just a little window into a lot of smart thinking

695
00:42:17,900 --> 00:42:20,020
 that happens in the manipulator equations about how

696
00:42:20,020 --> 00:42:24,780
 to optimize different workflows.

697
00:42:24,780 --> 00:42:28,900
 But j of q is a matrix.

698
00:42:28,900 --> 00:42:31,660
 It's a-- I'll just even say a matrix.

699
00:42:31,660 --> 00:42:35,420
 I don't even care about its size right now.

700
00:42:35,420 --> 00:42:45,020
 J dot of q is going to be partial j, partial q.

701
00:42:45,020 --> 00:42:49,140
 I may have to be careful how I write this, q, q dot.

702
00:42:49,140 --> 00:42:52,180
 But that's a tensor somehow if I'm not careful.

703
00:42:52,180 --> 00:42:57,380
 So this thing is going to be a sum over i.

704
00:42:57,380 --> 00:42:59,300
 Maybe the simplest way for me to write this,

705
00:42:59,300 --> 00:43:05,820
 partial j, partial qi, qi dot.

706
00:43:05,820 --> 00:43:09,140
 Just take element by element gradient of this.

707
00:43:09,140 --> 00:43:10,980
 You definitely don't want to compute this.

708
00:43:10,980 --> 00:43:12,980
 You can compute it with autodiff if you want.

709
00:43:12,980 --> 00:43:14,860
 But we're not going to make that easy for you

710
00:43:14,860 --> 00:43:17,260
 because you almost never want that.

711
00:43:17,260 --> 00:43:21,860
 Because j dot q dot is a vector.

712
00:43:21,860 --> 00:43:30,180
 And pretty much every time you ever

713
00:43:30,180 --> 00:43:33,220
 want j dot anywhere in any of your controllers,

714
00:43:33,220 --> 00:43:35,620
 you actually want j dot q dot.

715
00:43:35,620 --> 00:43:40,780
 So in practice, when people say, oh, where's j dot?

716
00:43:40,780 --> 00:43:41,820
 You don't want j dot.

717
00:43:41,820 --> 00:43:42,900
 You want j dot q dot.

718
00:43:42,900 --> 00:43:46,060
 There's a function for that.

719
00:43:46,060 --> 00:43:47,100
 And you'll see that over and over.

720
00:43:47,100 --> 00:43:48,340
 You can compute that fast.

721
00:43:48,340 --> 00:43:50,180
 It doesn't have to allocate a lot of memory.

722
00:43:50,180 --> 00:43:52,700
 It's got this nice recursive form.

723
00:43:52,700 --> 00:43:54,540
 That's the term you always want.

724
00:43:54,540 --> 00:43:57,260
 And it becomes essential in implementing this controller.

725
00:43:57,260 --> 00:44:01,700
 Loads of details in there.

726
00:44:01,700 --> 00:44:16,660
 Everything good so far?

727
00:44:16,660 --> 00:44:21,220
 OK, so one last idea I want to land before I

728
00:44:21,220 --> 00:44:23,300
 let Rachel have the stage here.

729
00:44:23,300 --> 00:44:29,380
 So I've done stiffness control in end-effector coordinates.

730
00:44:29,380 --> 00:44:31,300
 I could have also done force control

731
00:44:31,300 --> 00:44:34,980
 in the end-effector coordinates.

732
00:44:34,980 --> 00:44:37,380
 And it's really pretty easy to do

733
00:44:37,380 --> 00:44:40,620
 if you make that same quasi-static assumption

734
00:44:40,620 --> 00:44:42,140
 that we did last time.

735
00:44:42,140 --> 00:44:45,620
 [WRITING ON BOARD]

736
00:44:45,620 --> 00:44:49,100
 [WRITING ON BOARD]

737
00:45:14,540 --> 00:45:18,020
 The recipe is use the operations-based form.

738
00:45:18,020 --> 00:45:31,020
 A recipe would be to say, assume that q double dot--

739
00:45:31,020 --> 00:45:33,660
 approximately take the quasi-static assumption

740
00:45:33,660 --> 00:45:34,620
 like we did last time.

741
00:45:41,220 --> 00:45:54,580
 And choose your controller to cancel the terms such

742
00:45:54,580 --> 00:46:05,420
 that fc desired equals fc in the end-effector coordinates.

743
00:46:05,420 --> 00:46:10,100
 The equations would look almost the same as what I just wrote.

744
00:46:10,100 --> 00:46:12,180
 But do you remember what happened

745
00:46:12,180 --> 00:46:16,980
 when I was doing the pure force version of the Cheez-It box

746
00:46:16,980 --> 00:46:18,500
 flip-up?

747
00:46:18,500 --> 00:46:22,060
 Did this sort of beautiful force control.

748
00:46:22,060 --> 00:46:24,540
 It stayed inside the friction cone.

749
00:46:24,540 --> 00:46:26,700
 It got to the top of the box and sort of by all accounts

750
00:46:26,700 --> 00:46:27,860
 was done.

751
00:46:27,860 --> 00:46:29,420
 And then the finger went--

752
00:46:29,420 --> 00:46:33,220
 kind of shot off into nonsense.

753
00:46:33,220 --> 00:46:33,820
 That's real.

754
00:46:36,660 --> 00:46:40,140
 If you're only commanding force and you

755
00:46:40,140 --> 00:46:42,780
 have no other specification of the objective,

756
00:46:42,780 --> 00:46:44,620
 if there's not a world to push back on you

757
00:46:44,620 --> 00:46:48,460
 and the force you expect, then you can go away pretty fast.

758
00:46:48,460 --> 00:46:54,700
 I think it's relatively rare to do pure force

759
00:46:54,700 --> 00:46:56,980
 control in all six degrees of freedom.

760
00:46:56,980 --> 00:47:03,260
 There is a thing that people do do often,

761
00:47:03,260 --> 00:47:11,060
 which is hybrid force plus either position or stiffness

762
00:47:11,060 --> 00:47:11,560
 control.

763
00:47:11,560 --> 00:47:25,460
 So if I have my two-link arm here out in the world

764
00:47:25,460 --> 00:47:28,460
 and I've got my P contact.

765
00:47:28,460 --> 00:47:30,300
 And let's say there's a chalkboard over here

766
00:47:30,300 --> 00:47:43,860
 that I'm trying to write on or push the book.

767
00:47:43,860 --> 00:47:47,780
 The way we push the book there was very similar to this.

768
00:47:47,780 --> 00:47:52,860
 Then it's very common to do force control

769
00:47:52,860 --> 00:47:53,540
 in this direction.

770
00:47:58,220 --> 00:48:02,540
 And stiffness control in this direction.

771
00:48:02,540 --> 00:48:07,340
 That's sort of a natural specification of the task.

772
00:48:07,340 --> 00:48:10,380
 The natural way for me to specify my objective

773
00:48:10,380 --> 00:48:12,780
 on the board is that I'd like to be pushing into the board

774
00:48:12,780 --> 00:48:14,540
 with some amount of force.

775
00:48:14,540 --> 00:48:18,220
 Regulating that force is the primal--

776
00:48:18,220 --> 00:48:20,180
 the most natural way for me to specify

777
00:48:20,180 --> 00:48:24,020
 the goal of having white lines appear on the board.

778
00:48:24,020 --> 00:48:27,500
 Stiffness, of course, or somehow reasoning about the position

779
00:48:27,500 --> 00:48:31,780
 is what gets the job done in the other axis.

780
00:48:31,780 --> 00:48:34,740
 So this is a very standard setup to do hybrid force and position

781
00:48:34,740 --> 00:48:35,660
 control.

782
00:48:35,660 --> 00:48:37,240
 And there's no reason in the equations

783
00:48:37,240 --> 00:48:40,380
 why you can't set the dynamics in one axis

784
00:48:40,380 --> 00:48:42,900
 to be a force command and the other axis

785
00:48:42,900 --> 00:48:45,980
 to be a stiffness command.

786
00:48:45,980 --> 00:48:47,440
 This can have very nice properties.

787
00:48:47,440 --> 00:48:50,140
 If you're trying to do the wall following kind of behavior,

788
00:48:50,140 --> 00:48:52,180
 it'll do these.

789
00:48:52,180 --> 00:48:57,420
 The only challenge, I guess, is that you

790
00:48:57,420 --> 00:48:59,780
 have to estimate the coordinate frame well.

791
00:48:59,780 --> 00:49:01,900
 If you are a little bit off on your estimation,

792
00:49:01,900 --> 00:49:05,100
 then you could be applying forces

793
00:49:05,100 --> 00:49:07,860
 or just acting like a little bit of a stiffness into the board,

794
00:49:07,860 --> 00:49:09,260
 and you can confuse things a lot.

795
00:49:09,260 --> 00:49:11,940
 So it's a little bit dependent on the accuracy

796
00:49:11,940 --> 00:49:14,040
 of your coordinate estimation if the gains are

797
00:49:14,040 --> 00:49:16,500
 very different in this axis versus this axis.

798
00:49:16,500 --> 00:49:17,860
 But that's a strategy people use.

799
00:49:17,860 --> 00:49:20,320
 I think Rachel will give you an example of where it may work

800
00:49:20,320 --> 00:49:22,180
 or may not work as well.

801
00:49:22,180 --> 00:49:30,060
 You could also alternatively act like a stiffness

802
00:49:30,060 --> 00:49:31,180
 into the board too, right?

803
00:49:31,180 --> 00:49:39,340
 And the example that we just showed of the IWA acting

804
00:49:39,340 --> 00:49:41,860
 like a very different stiffness in the x direction

805
00:49:41,860 --> 00:49:46,260
 as in the y direction could be exactly what you'd like here.

806
00:49:46,260 --> 00:49:48,260
 In this case, then, maybe the goal

807
00:49:48,260 --> 00:49:51,300
 would be to put a set point of my spring

808
00:49:51,300 --> 00:49:54,300
 at some virtual wall just behind it,

809
00:49:54,300 --> 00:49:58,340
 have a carefully chosen stiffness in this axis,

810
00:49:58,340 --> 00:50:00,740
 and a different stiffness in this axis,

811
00:50:00,740 --> 00:50:02,740
 and that can get the job done too.

812
00:50:02,740 --> 00:50:06,260
 And there are differences in the way

813
00:50:06,260 --> 00:50:08,100
 those get implemented that can make

814
00:50:08,100 --> 00:50:10,180
 a big difference in practice.

815
00:50:10,180 --> 00:50:12,700
 But this notion of hybrid force position control

816
00:50:12,700 --> 00:50:15,420
 is an important piece of that.

817
00:50:15,420 --> 00:50:15,920
 OK.

818
00:50:15,920 --> 00:50:25,580
 OK, so I just want to mention what I think are the--

819
00:50:25,580 --> 00:50:27,420
 the beautiful thing about this is this idea

820
00:50:27,420 --> 00:50:31,340
 that I can really make my dynamics at my finger

821
00:50:31,340 --> 00:50:34,980
 act like whatever I want within reason.

822
00:50:34,980 --> 00:50:37,020
 The problem I have with all this,

823
00:50:37,020 --> 00:50:40,020
 and I think maybe the biggest limitation in my mind,

824
00:50:40,020 --> 00:50:42,620
 is that you're only talking about the dynamics

825
00:50:42,620 --> 00:50:44,520
 at your finger, right?

826
00:50:44,520 --> 00:50:46,060
 So in the case in the world where

827
00:50:46,060 --> 00:50:48,060
 you have an EWA with this beautiful point that

828
00:50:48,060 --> 00:50:49,680
 wants to stay perfectly there, and I'm

829
00:50:49,680 --> 00:50:52,100
 going to push on the point, that's all good.

830
00:50:52,100 --> 00:50:54,500
 If you're reaching into a toy box

831
00:50:54,500 --> 00:50:56,820
 and making contact all over the place,

832
00:50:56,820 --> 00:51:00,620
 then this doesn't give you a recipe yet.

833
00:51:00,620 --> 00:51:02,820
 There's something else that's missing.

834
00:51:02,820 --> 00:51:04,660
 Somehow you either need to estimate

835
00:51:04,660 --> 00:51:08,660
 the locations of contact, which is hard, by the way.

836
00:51:08,660 --> 00:51:11,220
 There's good papers on that, but it's not easy.

837
00:51:11,220 --> 00:51:14,640
 And typically, the sensors that you have,

838
00:51:14,640 --> 00:51:18,120
 joint sensors are impoverished for that estimation problem.

839
00:51:18,120 --> 00:51:19,840
 You might need a tactile skin.

840
00:51:19,840 --> 00:51:25,280
 And even if you did, if you have multiple points of contact,

841
00:51:25,280 --> 00:51:27,420
 you somehow would need to somehow program

842
00:51:27,420 --> 00:51:29,960
 the behavior of interaction at multiple points

843
00:51:29,960 --> 00:51:31,520
 simultaneously or whatever.

844
00:51:31,520 --> 00:51:37,760
 So how do you program a more general form of interaction?

845
00:51:37,760 --> 00:51:42,060
 So that's one big limitation.

846
00:51:42,060 --> 00:51:45,580
 There's another sort of silly, annoying limitation,

847
00:51:45,580 --> 00:51:48,920
 which is that if you want to change

848
00:51:48,920 --> 00:51:51,140
 the location of that end effector

849
00:51:51,140 --> 00:51:53,980
 or even change from joint stiffness to end effector

850
00:51:53,980 --> 00:51:57,660
 stiffness on the EWA, you have to stop the robot,

851
00:51:57,660 --> 00:52:00,860
 turn off the control software, change the mode,

852
00:52:00,860 --> 00:52:02,420
 and then power it back up.

853
00:52:02,420 --> 00:52:04,180
 And I can totally see why that makes sense,

854
00:52:04,180 --> 00:52:05,620
 because they don't want to worry--

855
00:52:05,620 --> 00:52:07,140
 reason about-- I mean, they work so

856
00:52:07,140 --> 00:52:10,060
 hard to guarantee the passivity properties and safety

857
00:52:10,060 --> 00:52:12,020
 specified-- safety steps or whatever.

858
00:52:12,020 --> 00:52:15,660
 And if someone starts flipping between controllers

859
00:52:15,660 --> 00:52:17,420
 in software, I can see that being something

860
00:52:17,420 --> 00:52:18,980
 you don't want to support.

861
00:52:18,980 --> 00:52:20,780
 But it's kind of annoying.

862
00:52:20,780 --> 00:52:23,420
 And it means that, in general, we

863
00:52:23,420 --> 00:52:26,100
 are operating primarily in the joint stiffness mode

864
00:52:26,100 --> 00:52:27,780
 in the work I've shown you.

865
00:52:27,780 --> 00:52:30,120
 I think Rachel will show you something that uses the end

866
00:52:30,120 --> 00:52:31,660
 effector modes.

867
00:52:31,660 --> 00:52:34,400
 But there are sort of problems, I think,

868
00:52:34,400 --> 00:52:35,440
 that go along with that.

869
00:52:35,440 --> 00:52:35,940
 Yeah?

870
00:52:35,940 --> 00:52:40,300
 [INAUDIBLE]

871
00:52:40,300 --> 00:52:40,820
 So good.

872
00:52:40,820 --> 00:52:43,300
 So the question is, why not work in torque control mode?

873
00:52:43,300 --> 00:52:45,340
 So you can send a feedforward torque.

874
00:52:45,340 --> 00:52:47,140
 Even with a stiffness controller,

875
00:52:47,140 --> 00:52:50,860
 often you can say, I want to act like KP plus KD

876
00:52:50,860 --> 00:52:53,540
 plus some feedforward torque.

877
00:52:53,540 --> 00:52:57,780
 It's typically-- just sending torques

878
00:52:57,780 --> 00:53:00,780
 puts an onus on you modeling the dynamics well enough

879
00:53:00,780 --> 00:53:02,500
 to cancel the gravity compensation out

880
00:53:02,500 --> 00:53:03,820
 and everything like this.

881
00:53:03,820 --> 00:53:06,540
 You're going to run your controller over some impoverished

882
00:53:06,540 --> 00:53:08,540
 interface at a lower bandwidth than what's

883
00:53:08,540 --> 00:53:10,020
 running on the robot.

884
00:53:10,020 --> 00:53:14,900
 So it really pays to let the EWA stack, or the Franca stack,

885
00:53:14,900 --> 00:53:17,140
 or whichever stack, do as much of the cancellation

886
00:53:17,140 --> 00:53:22,140
 at super high rates with super well-calibrated gains for you.

887
00:53:22,140 --> 00:53:23,860
 So we tend to do--

888
00:53:23,860 --> 00:53:25,700
 so actually, the way the book worked

889
00:53:25,700 --> 00:53:29,500
 is we were in a joint stiffness mode, which we tend to use.

890
00:53:29,500 --> 00:53:31,960
 And then we added an additional feedforward force

891
00:53:31,960 --> 00:53:34,140
 on top of that joint stiffness controller

892
00:53:34,140 --> 00:53:37,620
 in order to push into the book.

893
00:53:37,620 --> 00:53:38,940
 So it's a good question.

894
00:53:38,940 --> 00:53:42,660
 But for implementation reasons, we tend to not--

895
00:53:42,660 --> 00:53:44,500
 I mean, if we were working at KUKA,

896
00:53:44,500 --> 00:53:46,580
 maybe we'd go all the way to torque level.

897
00:53:46,580 --> 00:53:51,900
 But as a user of a commercial robot arm, you just can't.

898
00:53:51,900 --> 00:53:55,100
 So the transition here-- let me just call out.

899
00:53:55,100 --> 00:54:01,620
 So there's actually a fun project at TRI trying to build--

900
00:54:01,620 --> 00:54:02,380
 it's not Baymax.

901
00:54:02,380 --> 00:54:03,100
 It's Puno.

902
00:54:03,100 --> 00:54:07,620
 Puno means chubby and lovable and a little silly

903
00:54:07,620 --> 00:54:09,460
 in Japanese.

904
00:54:09,460 --> 00:54:12,820
 This is actually the Toyota THR robot, which is awesome,

905
00:54:12,820 --> 00:54:14,380
 if you haven't seen it.

906
00:54:14,380 --> 00:54:16,140
 And that's Baymax from Disney.

907
00:54:16,140 --> 00:54:19,500
 And we're slowly building Puno.

908
00:54:19,500 --> 00:54:22,140
 So this kind of makes the point, though.

909
00:54:22,140 --> 00:54:25,500
 I mean, we'll talk more about the tactile sensing later.

910
00:54:25,500 --> 00:54:28,780
 There's some really nice tactile sensors and soft bubble grippers

911
00:54:28,780 --> 00:54:30,340
 there that are all open source.

912
00:54:30,340 --> 00:54:34,740
 But the goal of this project is to make contact

913
00:54:34,740 --> 00:54:36,540
 all over the robot.

914
00:54:36,540 --> 00:54:39,060
 So this is just a kind of a fun video

915
00:54:39,060 --> 00:54:43,500
 that they had the robot grab a fish tank,

916
00:54:43,500 --> 00:54:45,740
 because you could put a camera in the fish tank.

917
00:54:45,740 --> 00:54:48,380
 People were a little worried about it dropping the fish

918
00:54:48,380 --> 00:54:49,860
 tank, so they were just checking.

919
00:54:49,860 --> 00:54:52,100
 But it's super fun.

920
00:54:52,100 --> 00:54:56,620
 So that impedance control, as I've written on the board

921
00:54:56,620 --> 00:54:59,660
 today, doesn't offer strategies for programming

922
00:54:59,660 --> 00:55:04,620
 interactions like that, because the location of the contact

923
00:55:04,620 --> 00:55:08,700
 is sort of not specified a priori.

924
00:55:08,700 --> 00:55:11,140
 So there's a different mode of operation, which I honestly,

925
00:55:11,140 --> 00:55:14,540
 I think we have to get to, is just a more general

926
00:55:14,540 --> 00:55:18,500
 make contact all over the system, instrument contact,

927
00:55:18,500 --> 00:55:21,740
 tactile sensors all over the robot that are constantly

928
00:55:21,740 --> 00:55:24,460
 measuring forces and pressures and everything.

929
00:55:24,460 --> 00:55:27,020
 So that's just a fun project going on.

930
00:55:27,580 --> 00:55:28,580
 Cool.

931
00:55:28,580 --> 00:55:30,300
 OK, let me turn it over to Rachel,

932
00:55:30,300 --> 00:55:33,140
 who's going to tell you about her work.

933
00:55:33,140 --> 00:55:39,460
 What do you need here?

934
00:55:39,460 --> 00:55:40,940
 Oh, it's just the--

935
00:55:40,940 --> 00:55:41,420
 OK.

936
00:55:42,420 --> 00:55:43,420
 I think it's good now.

937
00:55:43,420 --> 00:55:43,920
 OK.

938
00:55:43,920 --> 00:55:56,420
 All right, we'll need to save that.

939
00:55:56,420 --> 00:55:56,900
 Oh, yes.

940
00:55:57,900 --> 00:55:58,900
 Is this going to be annoying?

941
00:55:58,900 --> 00:56:00,900
 Yeah, it's going to be annoying.

942
00:56:00,900 --> 00:56:01,900
 OK.

943
00:56:01,900 --> 00:56:04,900
 So what I'm going to do is I'm going to go ahead and save it.

944
00:56:04,900 --> 00:56:06,900
 And I'm going to go ahead and save it.

945
00:56:06,900 --> 00:56:08,900
 And I'm going to go ahead and save it.

946
00:56:08,900 --> 00:56:10,900
 And I'm going to go ahead and save it.

947
00:56:10,900 --> 00:56:12,900
 And I'm going to go ahead and save it.

948
00:56:12,900 --> 00:56:14,900
 And I'm going to go ahead and save it.

949
00:56:14,900 --> 00:56:16,900
 And I'm going to go ahead and save it.

950
00:56:16,900 --> 00:56:18,900
 And I'm going to go ahead and save it.

951
00:56:18,900 --> 00:56:20,900
 And I'm going to go ahead and save it.

952
00:56:20,900 --> 00:56:22,900
 And I'm going to go ahead and save it.

953
00:56:22,900 --> 00:56:24,900
 And I'm going to go ahead and save it.

954
00:56:24,900 --> 00:56:26,900
 Is this going to be annoying?

955
00:56:26,900 --> 00:56:34,900
 This is the first time you're all seeing the bottom of my face,

956
00:56:34,900 --> 00:56:35,900
 which is fun.

957
00:56:35,900 --> 00:56:38,900
 I do have the bottom of my face.

958
00:56:38,900 --> 00:56:41,900
 So we've been talking about control over the last two days.

959
00:56:41,900 --> 00:56:43,900
 And what I basically want to do for the rest of the course

960
00:56:43,900 --> 00:56:45,900
 is we're going to talk through a case study.

961
00:56:45,900 --> 00:56:48,900
 I'm going to introduce you to a new robot and a new task.

962
00:56:48,900 --> 00:56:51,900
 It is not with a dishwasher.

963
00:56:51,900 --> 00:56:53,900
 And we're going to walk through basically what

964
00:56:53,900 --> 00:56:55,900
 are the control options that you could do.

965
00:56:55,900 --> 00:56:57,900
 And then it's going to be specifically,

966
00:56:57,900 --> 00:56:59,900
 because this is based off work that I've done,

967
00:56:59,900 --> 00:57:01,900
 what are the control choices that I made.

968
00:57:01,900 --> 00:57:03,900
 So even more so than usual, this is not

969
00:57:03,900 --> 00:57:04,900
 objectively the correct answer.

970
00:57:04,900 --> 00:57:06,900
 This is the choices that we made.

971
00:57:06,900 --> 00:57:09,900
 And I will walk you through why we decided to make them.

972
00:57:09,900 --> 00:57:14,900
 So we've been working so far with Kuga.

973
00:57:14,900 --> 00:57:16,900
 This is the robot we've been dealing with.

974
00:57:16,900 --> 00:57:18,900
 I'm going to introduce you to a new robot, which

975
00:57:18,900 --> 00:57:22,900
 is the closest robot to the EWO while technically being

976
00:57:22,900 --> 00:57:25,900
 a different robot, which is the Franca Amica Panda.

977
00:57:25,900 --> 00:57:27,900
 Franca Amica is the name of the company.

978
00:57:27,900 --> 00:57:29,900
 Panda is the name of the robot.

979
00:57:29,900 --> 00:57:32,900
 They have a very cute story about why they call it a panda.

980
00:57:32,900 --> 00:57:34,900
 These robots are incredibly similar.

981
00:57:34,900 --> 00:57:35,900
 They are both 7 DoF.

982
00:57:35,900 --> 00:57:36,900
 They are made by the same people.

983
00:57:36,900 --> 00:57:40,900
 It is DLR, the German space agency.

984
00:57:40,900 --> 00:57:45,900
 The differences are that the Franca Amica is newer.

985
00:57:45,900 --> 00:57:47,900
 It is significantly cheaper.

986
00:57:47,900 --> 00:57:49,900
 And it has better documentation.

987
00:57:49,900 --> 00:57:51,900
 I think Russ's joke is that if you

988
00:57:51,900 --> 00:57:52,900
 know how something works in the Kuga,

989
00:57:52,900 --> 00:57:54,900
 you just go read the panda documentation,

990
00:57:54,900 --> 00:57:56,900
 because they are exceptionally similar.

991
00:57:56,900 --> 00:58:07,900
 So this is the robot that we're dealing with.

992
00:58:07,900 --> 00:58:08,900
 Sorry, I forgot to grab the notes.

993
00:58:08,900 --> 00:58:14,900
 One really neat thing about this robot

994
00:58:14,900 --> 00:58:16,900
 is that on the underlying system,

995
00:58:16,900 --> 00:58:19,900
 you can send either joint positions, joint velocities,

996
00:58:19,900 --> 00:58:21,900
 or joint torques.

997
00:58:21,900 --> 00:58:23,900
 That is the underlying controller interface.

998
00:58:23,900 --> 00:58:25,900
 And the really nice thing about that

999
00:58:25,900 --> 00:58:27,900
 is that allows you to build on top of it

1000
00:58:27,900 --> 00:58:28,900
 a wide range of controllers.

1001
00:58:28,900 --> 00:58:32,900
 So you can build, in joint space, position, velocity,

1002
00:58:32,900 --> 00:58:34,900
 impedance, torque.

1003
00:58:34,900 --> 00:58:38,900
 And in Cartesian space, position, velocity, impedance,

1004
00:58:38,900 --> 00:58:41,900
 force, hybrid, anything you want.

1005
00:58:41,900 --> 00:58:43,900
 To kind of echo the point we made on Tuesday

1006
00:58:43,900 --> 00:58:46,900
 that these controllers are not so different

1007
00:58:46,900 --> 00:58:49,900
 is that you can implement joint position control either

1008
00:58:49,900 --> 00:58:51,900
 by sending positions at the lowest level

1009
00:58:51,900 --> 00:58:53,900
 or by sending torques at the lowest level.

1010
00:58:53,900 --> 00:58:56,900
 You can do position control either way.

1011
00:58:56,900 --> 00:58:59,900
 One difference between the Kuga and the Panda

1012
00:58:59,900 --> 00:59:01,900
 is that if you want to switch control modes

1013
00:59:01,900 --> 00:59:04,900
 or if you want to switch stiffnesses for the Panda,

1014
00:59:04,900 --> 00:59:07,900
 you do not have to turn off the robot and reboot.

1015
00:59:07,900 --> 00:59:10,900
 You can just willy-nilly switch the controllers,

1016
00:59:10,900 --> 00:59:11,900
 which is really nice and something

1017
00:59:11,900 --> 00:59:13,900
 we're going to take advantage of.

1018
00:59:13,900 --> 00:59:14,900
 OK.

1019
00:59:14,900 --> 00:59:15,900
 So this is our robot.

1020
00:59:15,900 --> 00:59:17,900
 It has lots of different control modes.

1021
00:59:17,900 --> 00:59:18,900
 That's cool.

1022
00:59:18,900 --> 00:59:19,900
 Let's meet our new task.

1023
00:59:19,900 --> 00:59:29,900
 The task we are going to consider, which I will draw out,

1024
00:59:29,900 --> 00:59:32,900
 but I also brought a prop, is that let's say

1025
00:59:32,900 --> 00:59:39,900
 we have a childproof medicine bottle where

1026
00:59:39,900 --> 00:59:41,900
 you have to exert a push twist.

1027
00:59:41,900 --> 00:59:44,900
 You have to push down and twist in order to open it.

1028
00:59:44,900 --> 00:59:48,900
 All of you have this in your medicine cabinet.

1029
00:59:48,900 --> 00:59:50,900
 For me, it is nice that we could get a robot

1030
00:59:50,900 --> 00:59:51,900
 to open a medicine bottle.

1031
00:59:51,900 --> 00:59:54,900
 That's something I'd like my robot butler to do.

1032
00:59:54,900 --> 00:59:56,900
 But the broader point is it's a very nice example

1033
00:59:56,900 --> 01:00:00,900
 of a system where you want to both exert force and position

1034
01:00:00,900 --> 01:00:03,900
 in order to accomplish this task.

1035
01:00:03,900 --> 01:00:05,900
 So write this out.

1036
01:00:05,900 --> 01:00:08,900
 If we want the robot to open this bottle,

1037
01:00:08,900 --> 01:00:11,900
 it has to both exert a force downward on the lid

1038
01:00:11,900 --> 01:00:13,900
 while twisting it, which you could

1039
01:00:13,900 --> 01:00:16,900
 think of either as twisting it or exerting a torque.

1040
01:00:16,900 --> 01:00:19,900
 Are we clear on the robot that we're using

1041
01:00:19,900 --> 01:00:22,900
 and the task that we're achieving?

1042
01:00:22,900 --> 01:00:23,900
 Cool.

1043
01:00:23,900 --> 01:00:24,900
 OK.

1044
01:00:24,900 --> 01:00:28,900
 So let's walk through the different ways

1045
01:00:28,900 --> 01:00:30,900
 that we could approach this task.

1046
01:00:30,900 --> 01:00:32,900
 We're going to walk through basically three different

1047
01:00:32,900 --> 01:00:35,900
 control strategies.

1048
01:00:35,900 --> 01:00:36,900
 Option one.

1049
01:00:39,900 --> 01:00:43,900
 Now, I'm asking what control strategy

1050
01:00:43,900 --> 01:00:45,900
 could we use given that we want to exert forces?

1051
01:00:45,900 --> 01:00:47,900
 And not being creative at all, what's

1052
01:00:47,900 --> 01:00:50,900
 the first thing that comes to mind?

1053
01:00:50,900 --> 01:00:51,900
 Yes.

1054
01:00:51,900 --> 01:01:01,900
 So we've talked about force control.

1055
01:01:01,900 --> 01:01:04,900
 You could do force control to implement this task.

1056
01:01:04,900 --> 01:01:06,900
 You could run a force controller.

1057
01:01:06,900 --> 01:01:08,900
 You may guess by the fact that this is option one,

1058
01:01:08,900 --> 01:01:10,900
 and I told you there are three, that we are not

1059
01:01:10,900 --> 01:01:13,900
 going to go with this.

1060
01:01:13,900 --> 01:01:15,900
 There are two main reasons.

1061
01:01:15,900 --> 01:01:19,900
 One, force control scares me.

1062
01:01:19,900 --> 01:01:23,900
 Force control can be pretty dangerous.

1063
01:01:23,900 --> 01:01:26,900
 Russ mentioned force control is great if you are in contact.

1064
01:01:26,900 --> 01:01:30,900
 And to illustrate that, if I have--

1065
01:01:30,900 --> 01:01:32,900
 this is the Franconica Panda.

1066
01:01:32,900 --> 01:01:34,900
 This is one specifically in Alberto's lab.

1067
01:01:34,900 --> 01:01:36,900
 And if I ask it to just exert force down

1068
01:01:36,900 --> 01:01:38,900
 while it's in contact, it doesn't care where that block

1069
01:01:38,900 --> 01:01:41,900
 is, it's just going to keep exerting force down.

1070
01:01:41,900 --> 01:01:44,900
 It's somewhat robust because it doesn't care about position.

1071
01:01:44,900 --> 01:01:47,900
 It's just trying to exert force down.

1072
01:01:47,900 --> 01:01:49,900
 And actually, we'll switch it back

1073
01:01:49,900 --> 01:01:53,900
 that if you ask it to exert no force, then to echo the point,

1074
01:01:53,900 --> 01:01:55,900
 it's actually going to run gravity comp.

1075
01:01:55,900 --> 01:01:59,900
 But here, I'm not asking to exert anything down,

1076
01:01:59,900 --> 01:02:01,900
 but it'll stay in place because it's

1077
01:02:01,900 --> 01:02:03,900
 doing gravity compensation.

1078
01:02:03,900 --> 01:02:04,900
 Cool.

1079
01:02:04,900 --> 01:02:05,900
 Force control is well-defined.

1080
01:02:05,900 --> 01:02:07,900
 If you are actually in contact.

1081
01:02:07,900 --> 01:02:10,900
 But if you are not in contact and you ask force control

1082
01:02:10,900 --> 01:02:15,900
 to exert force, you're kind of in an ill-defined state.

1083
01:02:15,900 --> 01:02:18,100
 If you ask it to exert force and it's not in contact,

1084
01:02:18,100 --> 01:02:21,400
 it's going to do its best to exert force, which means it's

1085
01:02:21,400 --> 01:02:24,900
 just going to whip back at you.

1086
01:02:24,900 --> 01:02:27,900
 Fun fact, I did this by accident the first time.

1087
01:02:27,900 --> 01:02:30,900
 And it nearly cracked the back wall into Songbei's lab.

1088
01:02:30,900 --> 01:02:32,900
 Sorry, Songbei.

1089
01:02:32,900 --> 01:02:33,900
 And was very terrified.

1090
01:02:33,900 --> 01:02:35,900
 I was, oh, god, I have to--

1091
01:02:35,900 --> 01:02:38,900
 it's because I put something in the wrong sign.

1092
01:02:38,900 --> 01:02:40,400
 I was, oh, god, I have to fix that.

1093
01:02:40,400 --> 01:02:40,900
 Did it again.

1094
01:02:40,900 --> 01:02:42,900
 And my nervousness did not recompile.

1095
01:02:42,900 --> 01:02:44,900
 Did it a second time.

1096
01:02:44,900 --> 01:02:47,900
 And then the third time, I was like, I should record it.

1097
01:02:47,900 --> 01:02:49,900
 So that's what you're seeing here.

1098
01:02:49,900 --> 01:02:52,900
 This is a toy example of where force control can be dangerous

1099
01:02:52,900 --> 01:02:55,400
 because hopefully you will not be so dumb as to make a sign

1100
01:02:55,400 --> 01:02:56,400
 error.

1101
01:02:56,400 --> 01:02:59,400
 But in general, you have to ensure that you are in contact.

1102
01:02:59,400 --> 01:03:01,400
 And force control is not well-defined

1103
01:03:01,400 --> 01:03:02,400
 if you're not in contact.

1104
01:03:03,400 --> 01:03:06,400
 So that's one thing that makes me nervous about force control.

1105
01:03:06,400 --> 01:03:08,900
 The second reason that we did not go with force control

1106
01:03:08,900 --> 01:03:13,400
 is you could argue, here, our goal is to exert a torque.

1107
01:03:13,400 --> 01:03:17,900
 But specifying it as a torque could be kind of tricky.

1108
01:03:17,900 --> 01:03:20,900
 And it arguably is not maybe the most intuitive way.

1109
01:03:20,900 --> 01:03:24,400
 And so for that, our second option

1110
01:03:24,400 --> 01:03:29,400
 that we could have taken, looking

1111
01:03:29,400 --> 01:03:33,400
 at what we just covered, if I now want to do a force

1112
01:03:33,400 --> 01:03:35,400
 and a position--

1113
01:03:35,400 --> 01:03:37,400
 [INAUDIBLE]

1114
01:03:37,400 --> 01:03:40,400
 Well, before that, force and position,

1115
01:03:40,400 --> 01:03:45,400
 we're just going to talk about hybrid position force control.

1116
01:03:45,400 --> 01:03:48,400
 One note is, as was mentioned, some people

1117
01:03:48,400 --> 01:03:49,900
 call it hybrid position force control.

1118
01:03:49,900 --> 01:03:51,900
 Some people call it hybrid force position control.

1119
01:03:51,900 --> 01:03:54,900
 Some people call it hybrid velocity force control.

1120
01:03:54,900 --> 01:03:56,400
 They're all effectively the same thing.

1121
01:03:56,400 --> 01:03:57,900
 You just can't call it hybrid control

1122
01:03:57,900 --> 01:04:00,900
 as another thing entirely.

1123
01:04:00,900 --> 01:04:02,900
 So if you do hybrid position force control--

1124
01:04:02,900 --> 01:04:08,400
 now, again, I told you there are three options.

1125
01:04:08,400 --> 01:04:13,400
 So you may guess that we didn't go with option two either.

1126
01:04:13,400 --> 01:04:15,400
 Why?

1127
01:04:15,400 --> 01:04:16,900
 Hybrid position force control arguably

1128
01:04:16,900 --> 01:04:18,600
 would be a great choice for this problem,

1129
01:04:18,600 --> 01:04:20,060
 because it's very easy to specify.

1130
01:04:20,060 --> 01:04:21,900
 We want to exert force in one direction.

1131
01:04:21,900 --> 01:04:25,900
 And we want to control motion in another position.

1132
01:04:25,900 --> 01:04:27,400
 Additionally, my advisor is the dude

1133
01:04:27,400 --> 01:04:29,900
 who advised the person who invented hybrid position force

1134
01:04:29,900 --> 01:04:30,400
 control.

1135
01:04:30,400 --> 01:04:32,900
 So it would have been a very natural choice.

1136
01:04:32,900 --> 01:04:35,400
 Why did we not do it?

1137
01:04:35,400 --> 01:04:37,100
 So it actually comes back to this point

1138
01:04:37,100 --> 01:04:39,900
 Russ made, which is that--

1139
01:04:39,900 --> 01:04:40,400
 I'm sorry.

1140
01:04:40,400 --> 01:04:42,900
 I'm moving a ton, which is what we tell Russ not to do.

1141
01:04:42,900 --> 01:04:47,900
 In order to do hybrid position force control,

1142
01:04:47,900 --> 01:04:49,400
 you are specifying in what directions

1143
01:04:49,400 --> 01:04:51,400
 do I want to exert force and what directions

1144
01:04:51,400 --> 01:04:52,900
 do I want to control motion.

1145
01:04:52,900 --> 01:04:55,400
 And you define those constraints with respect to a frame.

1146
01:04:55,400 --> 01:04:57,900
 And you turn it-- there's a lot of beautiful math.

1147
01:04:57,900 --> 01:05:00,900
 And you specify it using Fafian constraints.

1148
01:05:00,900 --> 01:05:03,400
 But it relies on being able to estimate that frame very

1149
01:05:03,400 --> 01:05:03,900
 accurately.

1150
01:05:03,900 --> 01:05:06,400
 And as Russ mentioned, if you get that frame wrong,

1151
01:05:06,400 --> 01:05:07,400
 you're going to be exerting forces

1152
01:05:07,400 --> 01:05:09,900
 in the wrong directions, which is just the same case of force

1153
01:05:09,900 --> 01:05:12,900
 control being scary.

1154
01:05:12,900 --> 01:05:16,400
 So one is that hybrid position force control is beautiful.

1155
01:05:16,400 --> 01:05:17,400
 I love the math.

1156
01:05:17,400 --> 01:05:19,900
 It is difficult to get it right in a system.

1157
01:05:19,900 --> 01:05:21,400
 That's reason one.

1158
01:05:21,400 --> 01:05:24,900
 The second reason is you might not actually

1159
01:05:24,900 --> 01:05:26,400
 need it for this task.

1160
01:05:26,400 --> 01:05:29,400
 So hybrid position force control works well

1161
01:05:29,400 --> 01:05:31,400
 and is definitely needed if you're in the case

1162
01:05:31,400 --> 01:05:35,400
 where you care very carefully about regulating force.

1163
01:05:35,400 --> 01:05:38,400
 So the classic example is if you want to be writing

1164
01:05:38,400 --> 01:05:41,400
 or you're doing welding or you're doing grinding or sanding,

1165
01:05:41,400 --> 01:05:44,400
 where you really carefully care about regulating

1166
01:05:44,400 --> 01:05:47,400
 what force you are exerting.

1167
01:05:47,400 --> 01:05:49,400
 Oft less so.

1168
01:05:49,400 --> 01:05:51,900
 We are in the case where we want to control how much force we're

1169
01:05:51,900 --> 01:05:54,400
 exerting and we want to be able to exert enough force basically

1170
01:05:54,400 --> 01:05:55,400
 to open the bottle.

1171
01:05:55,400 --> 01:05:57,400
 But we are less concerned with regulating

1172
01:05:57,400 --> 01:05:59,400
 like it has to be exactly this force

1173
01:05:59,400 --> 01:06:03,900
 or we've messed up welding a part that goes on a plane.

1174
01:06:03,900 --> 01:06:07,400
 So hybrid position force control, powerful,

1175
01:06:07,400 --> 01:06:11,900
 hard to get right in some cases, maybe not needed for our task.

1176
01:06:11,900 --> 01:06:15,400
 And so because of all of that, we opted--

1177
01:06:15,400 --> 01:06:18,400
 and again, this is what we opted to do in our research.

1178
01:06:18,400 --> 01:06:20,400
 You could definitely do this with hybrid position force

1179
01:06:20,400 --> 01:06:22,400
 control and that would be an equally valid choice.

1180
01:06:22,400 --> 01:06:28,400
 Also, if my board work becomes either too small or ugly,

1181
01:06:28,400 --> 01:06:30,400
 someone please call me out on it.

1182
01:06:30,400 --> 01:06:42,400
 So what we have to do is use Cartesian impedance mode.

1183
01:06:42,400 --> 01:06:46,400
 To Russ's point that he made on Tuesday,

1184
01:06:46,400 --> 01:06:48,900
 we'll use stiffness control and impedance control fairly

1185
01:06:48,900 --> 01:06:50,400
 interchangeably.

1186
01:06:50,400 --> 01:06:52,400
 In this case, it would be more accurate

1187
01:06:52,400 --> 01:06:54,400
 to say that we're using stiffness control.

1188
01:06:54,400 --> 01:06:56,900
 I'm going to call it impedance control.

1189
01:06:56,900 --> 01:07:01,400
 Also, as Russ pointed out, some people say Cartesian,

1190
01:07:01,400 --> 01:07:03,900
 some people say indefectors, some people say operation space

1191
01:07:03,900 --> 01:07:06,900
 because that matches Osama Kati's seminal paper.

1192
01:07:06,900 --> 01:07:08,400
 Some people say task space.

1193
01:07:08,400 --> 01:07:09,900
 All of those words technically have

1194
01:07:09,900 --> 01:07:10,900
 like slightly different meaning, but we're

1195
01:07:10,900 --> 01:07:13,900
 going to use them interchangeably here.

1196
01:07:13,900 --> 01:07:15,900
 Good so far?

1197
01:07:15,900 --> 01:07:18,400
 OK.

1198
01:07:18,400 --> 01:07:22,400
 So I want to open a bottle using Cartesian impedance control.

1199
01:07:22,400 --> 01:07:24,900
 How am I going to do that?

1200
01:07:24,900 --> 01:07:27,900
 Which Russ somewhat stole my punch line, but that's OK.

1201
01:07:27,900 --> 01:07:32,400
 So let's say that we have a ground

1202
01:07:32,400 --> 01:07:37,400
 and we have our indefector and we're

1203
01:07:37,400 --> 01:07:39,900
 dealing in Cartesian impedance space.

1204
01:07:39,900 --> 01:07:42,900
 So we have a spring.

1205
01:07:42,900 --> 01:07:47,900
 This is a symbol for a damper, if that's unfamiliar to anyone.

1206
01:07:47,900 --> 01:07:49,900
 OK.

1207
01:07:49,900 --> 01:07:58,900
 So we specify a stiffness and a damping and a set point.

1208
01:07:58,900 --> 01:08:08,400
 Technically, because we are in Cartesian impedance control,

1209
01:08:08,400 --> 01:08:15,400
 in our full glory, our stiffness matrix is a 6 by 6.

1210
01:08:15,400 --> 01:08:21,400
 So is our damping matrix.

1211
01:08:21,400 --> 01:08:28,900
 And our set point is in SE3.

1212
01:08:28,900 --> 01:08:31,900
 Everyone good with that notation?

1213
01:08:31,900 --> 01:08:32,400
 OK.

1214
01:08:32,400 --> 01:08:37,900
 So how do we, given a mass-spring damper system,

1215
01:08:37,900 --> 01:08:38,400
 exert force?

1216
01:08:38,400 --> 01:08:40,400
 For right now, I'm just going to focus on the fact

1217
01:08:40,400 --> 01:08:41,900
 that we want to exert force down.

1218
01:08:41,900 --> 01:08:44,900
 We'll get back to that twist part later.

1219
01:08:44,900 --> 01:08:46,400
 How do I exert force down?

1220
01:08:46,400 --> 01:08:47,900
 Russ already mentioned this.

1221
01:08:47,900 --> 01:08:53,400
 If you basically move your set point further into the ground,

1222
01:08:53,400 --> 01:08:57,900
 by let's say some d, this is going to cause your spring

1223
01:08:57,900 --> 01:08:59,900
 to compress the decision.

1224
01:08:59,900 --> 01:09:01,900
 Again, this is a decision we made.

1225
01:09:01,900 --> 01:09:04,100
 It doesn't mean it's objectively the correct thing.

1226
01:09:04,100 --> 01:09:06,400
 It's just the choice we made.

1227
01:09:06,400 --> 01:09:09,400
 Because if I think about what stiffness and what damping

1228
01:09:09,400 --> 01:09:13,900
 do I have to specify, that's a lot of numbers.

1229
01:09:13,900 --> 01:09:18,400
 Those are big matrices and more than I want to deal with.

1230
01:09:18,400 --> 01:09:20,400
 So what we're going to do is, instead

1231
01:09:20,400 --> 01:09:22,900
 of specifying the entire matrix, we're

1232
01:09:22,900 --> 01:09:26,900
 going to actually only consider the diagonal.

1233
01:09:26,900 --> 01:09:32,400
 So what is our stiffness in x, in y, in z, in--

1234
01:09:32,400 --> 01:09:34,400
 oh, I'm not going to remember the order correct--

1235
01:09:34,400 --> 01:09:39,400
 roll, pitch, yaw.

1236
01:09:39,400 --> 01:09:45,900
 Instead of 36 numbers, now I have 6.

1237
01:09:45,900 --> 01:09:48,900
 And rather than controlling the damping matrix,

1238
01:09:48,900 --> 01:09:51,900
 I'm just going to set it to be critically damped.

1239
01:09:51,900 --> 01:09:54,400
 If that does not mean anything to you, that is OK.

1240
01:09:54,400 --> 01:09:55,900
 It's basically a way of setting it

1241
01:09:55,900 --> 01:09:57,900
 such that we minimize oscillations.

1242
01:09:57,900 --> 01:10:08,400
 So that is-- to tie back to a point that was made on Tuesday,

1243
01:10:08,400 --> 01:10:12,400
 I've seen a lot of people who do work now on learning impedance

1244
01:10:12,400 --> 01:10:13,400
 parameters.

1245
01:10:13,400 --> 01:10:14,900
 And there's an interesting thought of,

1246
01:10:14,900 --> 01:10:17,900
 like, you can learn everything.

1247
01:10:17,900 --> 01:10:19,740
 Or if you make these simplifying assumptions,

1248
01:10:19,740 --> 01:10:23,400
 it's a lot smaller thing to learn, which obviously would

1249
01:10:23,400 --> 01:10:24,820
 make your learning problem easier.

1250
01:10:24,820 --> 01:10:25,740
 And so there's a thing to think of,

1251
01:10:25,740 --> 01:10:27,480
 like, how much do you actually need?

1252
01:10:27,480 --> 01:10:29,520
 Sometimes you will need the off-diagonal terms.

1253
01:10:29,520 --> 01:10:32,360
 This is not a decision you can make unilaterally.

1254
01:10:32,360 --> 01:10:34,600
 But it's just something to think about what assumptions

1255
01:10:34,600 --> 01:10:35,600
 can you make about what you actually

1256
01:10:35,600 --> 01:10:39,100
 need to get your controller.

1257
01:10:39,100 --> 01:10:40,200
 Cool.

1258
01:10:40,200 --> 01:10:41,800
 OK.

1259
01:10:41,800 --> 01:10:44,480
 So we have our stiffness and our damping matrix.

1260
01:10:44,480 --> 01:10:46,200
 We have a lot less to specify.

1261
01:10:46,200 --> 01:10:48,800
 Let's think about what stiffness do

1262
01:10:48,800 --> 01:10:51,660
 we want to exert in the z direction,

1263
01:10:51,660 --> 01:10:55,400
 and what is this offset d?

1264
01:10:55,400 --> 01:10:58,120
 If we want to-- what do I need my spring stiffness to be

1265
01:10:58,120 --> 01:11:02,640
 and my offset to be if I want to exert force down?

1266
01:11:02,640 --> 01:11:05,600
 Now, we have told you that we are getting the robot to act

1267
01:11:05,600 --> 01:11:08,100
 like a mass spring damper.

1268
01:11:08,100 --> 01:11:10,240
 And you might reasonably say, OK,

1269
01:11:10,240 --> 01:11:14,280
 it acts like a mass spring damper, but is it actually?

1270
01:11:14,280 --> 01:11:19,240
 And shockingly, with some back of the envelope calculations--

1271
01:11:19,240 --> 01:11:20,880
 again, these were done kind of ad hoc,

1272
01:11:20,880 --> 01:11:22,680
 so don't take them for granted--

1273
01:11:22,680 --> 01:11:26,640
 is that the relationship between your offset in your d,

1274
01:11:26,640 --> 01:11:32,000
 your offset into the ground, and the stiffness of your spring,

1275
01:11:32,000 --> 01:11:34,840
 and the force that you exert is linear.

1276
01:11:34,840 --> 01:11:41,320
 Like, how far I'm exerting, the force that I'm exerting.

1277
01:11:41,320 --> 01:11:43,920
 And so it behaves exactly like a spring,

1278
01:11:43,920 --> 01:11:46,880
 the fact where if you say, for a given stiffness,

1279
01:11:46,880 --> 01:11:49,640
 I want to exert this force, I can pretty closely tell you

1280
01:11:49,640 --> 01:11:52,640
 this is the d that exerts that.

1281
01:11:52,640 --> 01:11:54,960
 And we actually did this across multiple stiffnesses.

1282
01:11:54,960 --> 01:12:00,720
 And the fact that the robot behaves so amazingly well

1283
01:12:00,720 --> 01:12:04,040
 is honestly both suspicious and a credit to the engineering

1284
01:12:04,040 --> 01:12:06,360
 that it actually behaves like a mass spring damper.

1285
01:12:06,360 --> 01:12:10,800
 No one is suspicious of this.

1286
01:12:10,800 --> 01:12:11,720
 OK, you all believe me.

1287
01:12:11,720 --> 01:12:13,360
 [INAUDIBLE]

1288
01:12:13,360 --> 01:12:16,880
 Yeah, r equals 1 for that last one, which--

1289
01:12:16,880 --> 01:12:18,320
 I mean, it's not the densest point.

1290
01:12:18,320 --> 01:12:20,640
 But when we say it acts like a mass spring damper,

1291
01:12:20,640 --> 01:12:21,640
 at least for the panda, it actually

1292
01:12:21,640 --> 01:12:24,020
 does an excellent job of acting like a mass spring damper.

1293
01:12:24,020 --> 01:12:27,480
 So this is to say that if I want to exert a certain downward

1294
01:12:27,480 --> 01:12:29,680
 force, I can pick a certain stiffness.

1295
01:12:29,680 --> 01:12:31,800
 In my work, I have a heuristic for which stiffness,

1296
01:12:31,800 --> 01:12:34,640
 effectively, I want to be as stiff as possible.

1297
01:12:34,640 --> 01:12:39,800
 And that can directly tell me what d that I need to exert.

1298
01:12:39,800 --> 01:12:42,240
 Does everyone follow on that?

1299
01:12:42,240 --> 01:12:44,000
 This is how we can use Cartesian impedance

1300
01:12:44,000 --> 01:12:46,240
 to exert a downward force, because we

1301
01:12:46,240 --> 01:12:49,120
 have a super well-behaved mass spring damper.

1302
01:12:49,120 --> 01:12:51,520
 So you said the Cartesian principle,

1303
01:12:51,520 --> 01:12:54,320
 although it cannot go down actually--

1304
01:12:54,320 --> 01:12:56,520
 Yes, you are asking it to do a thing that it cannot.

1305
01:12:56,520 --> 01:12:58,560
 It gets very frustrated and exerts force at you,

1306
01:12:58,560 --> 01:13:01,880
 which is what you want.

1307
01:13:01,880 --> 01:13:02,720
 Cool.

1308
01:13:02,720 --> 01:13:03,720
 Nishant, Willie, sorry.

1309
01:13:03,720 --> 01:13:08,480
 [INAUDIBLE]

1310
01:13:08,480 --> 01:13:13,360
 So here, I can be very confident that I can exert a force.

1311
01:13:13,360 --> 01:13:15,680
 If this was less well-behaved, then you

1312
01:13:15,680 --> 01:13:18,600
 would not be able to as directly control your force.

1313
01:13:18,600 --> 01:13:20,760
 And that gets back to the point, like, if we needed

1314
01:13:20,760 --> 01:13:22,240
 to control an exact force, you shouldn't

1315
01:13:22,240 --> 01:13:23,660
 be using Cartesian impedance mode.

1316
01:13:23,660 --> 01:13:25,800
 You should probably be using hybrid.

1317
01:13:25,800 --> 01:13:27,400
 [INAUDIBLE]

1318
01:13:27,400 --> 01:13:29,080
 Oh, sorry.

1319
01:13:29,080 --> 01:13:31,920
 The question was, what if this wasn't so well-behaved?

1320
01:13:31,920 --> 01:13:35,560
 OK.

1321
01:13:35,560 --> 01:13:39,880
 This covers what is my offset d and what is my stiffness in d.

1322
01:13:39,880 --> 01:13:43,160
 We've right now only covered the pushing down part.

1323
01:13:43,160 --> 01:13:46,120
 What about the twist?

1324
01:13:46,120 --> 01:13:48,120
 So for the twist, what we basically need to do

1325
01:13:48,120 --> 01:13:51,960
 is we need to generate set points at this d offset, which

1326
01:13:51,960 --> 01:13:53,560
 move in a circle.

1327
01:13:53,560 --> 01:13:55,760
 And luckily, all of you have done this,

1328
01:13:55,760 --> 01:13:58,840
 because this is what was asked in the robot painter example.

1329
01:13:58,840 --> 01:14:01,000
 And I wish I could claim this was all planned,

1330
01:14:01,000 --> 01:14:04,000
 but it just works out very nicely.

1331
01:14:04,000 --> 01:14:08,440
 None of you look happy at the fact that you had to do that.

1332
01:14:08,440 --> 01:14:13,240
 So to review, what do we have to send our controller?

1333
01:14:13,240 --> 01:14:16,760
 We're going to set our stiffness and our offset d based

1334
01:14:16,760 --> 01:14:18,400
 of how much force we want to exert.

1335
01:14:18,400 --> 01:14:20,760
 And then we're going to generate a series of set points

1336
01:14:20,760 --> 01:14:22,720
 that basically trace out a circle,

1337
01:14:22,720 --> 01:14:26,160
 choosing pretty high stiffnesses in the other dimensions

1338
01:14:26,160 --> 01:14:28,040
 with our damping set to be critically damped.

1339
01:14:28,040 --> 01:14:34,320
 Questions so far?

1340
01:14:34,320 --> 01:14:35,560
 OK.

1341
01:14:35,560 --> 01:14:38,040
 So that is essentially what we're going to ask our controller

1342
01:14:38,040 --> 01:14:38,960
 to do.

1343
01:14:38,960 --> 01:14:42,920
 That is not actually the complete picture.

1344
01:14:42,920 --> 01:14:44,640
 So let's say that we have our robot here.

1345
01:14:44,640 --> 01:14:48,320
 This is the same panda from before.

1346
01:14:48,320 --> 01:14:50,400
 And what we're actually going to do in order to--

1347
01:14:50,400 --> 01:14:52,720
 in my work, I call this a push twist--

1348
01:14:52,720 --> 01:14:54,840
 is that we're not exclusively going

1349
01:14:54,840 --> 01:14:56,760
 to run a Cartesian impedance controller.

1350
01:14:56,760 --> 01:14:57,840
 We're going to leverage the fact that we

1351
01:14:57,840 --> 01:14:59,360
 can switch between controllers.

1352
01:14:59,360 --> 01:15:00,920
 So the first thing that we're going to do

1353
01:15:00,920 --> 01:15:04,080
 is we're going to actually do what's called a garden move.

1354
01:15:04,080 --> 01:15:05,720
 It's a move until touch.

1355
01:15:05,720 --> 01:15:08,360
 It moves until it feels contact with something,

1356
01:15:08,360 --> 01:15:10,320
 which allows us to be kind of invariant to what

1357
01:15:10,320 --> 01:15:13,280
 the exact position is in d.

1358
01:15:13,280 --> 01:15:14,800
 Once it moves until touch, it's going

1359
01:15:14,800 --> 01:15:18,000
 to compute those set points based off

1360
01:15:18,000 --> 01:15:20,960
 what that actual distance is.

1361
01:15:20,960 --> 01:15:23,280
 It's going to go around and twist.

1362
01:15:23,280 --> 01:15:27,000
 I don't run my robots very fast, to be fair.

1363
01:15:27,000 --> 01:15:28,400
 And then once it's finished, it's

1364
01:15:28,400 --> 01:15:31,600
 going to do what I call a move out of touch.

1365
01:15:31,600 --> 01:15:33,240
 And so it's actually three controllers

1366
01:15:33,240 --> 01:15:35,000
 that run as part of this-- move until touch,

1367
01:15:35,000 --> 01:15:36,800
 Cartesian impedance to actually twist it,

1368
01:15:36,800 --> 01:15:38,920
 and then move out of touch.

1369
01:15:38,920 --> 01:15:39,920
 Yeah?

1370
01:15:39,920 --> 01:15:48,400
 [INAUDIBLE]

1371
01:15:48,400 --> 01:15:51,520
 You could just run this with Cartesian impedance control

1372
01:15:51,520 --> 01:15:54,360
 direct down.

1373
01:15:54,360 --> 01:15:58,120
 Yeah, it's an equally valid choice.

1374
01:15:58,120 --> 01:15:59,800
 The practical answer is I have move

1375
01:15:59,800 --> 01:16:02,440
 until touch implemented using position control instead

1376
01:16:02,440 --> 01:16:04,280
 of Cartesian impedance control.

1377
01:16:04,280 --> 01:16:06,320
 And so that's just what I call.

1378
01:16:06,320 --> 01:16:08,440
 But there's no good reason for that.

1379
01:16:08,440 --> 01:16:09,320
 Yeah?

1380
01:16:09,320 --> 01:16:11,560
 Oh, I did not repeat the question.

1381
01:16:11,560 --> 01:16:14,720
 Why don't I do move until touch with Cartesian impedance

1382
01:16:14,720 --> 01:16:15,200
 control?

1383
01:16:15,200 --> 01:16:16,880
 Because it's springy.

1384
01:16:16,880 --> 01:16:17,380
 Yeah?

1385
01:16:17,380 --> 01:16:26,480
 [INAUDIBLE]

1386
01:16:26,480 --> 01:16:28,440
 Yeah, so the particular implementation-- sorry,

1387
01:16:28,440 --> 01:16:30,400
 the question is, why does it look like it's not

1388
01:16:30,400 --> 01:16:31,680
 moving continuously?

1389
01:16:31,680 --> 01:16:33,240
 And that's because the implementation

1390
01:16:33,240 --> 01:16:35,880
 that we're running there is that we are actually

1391
01:16:35,880 --> 01:16:37,440
 sending a series of set points.

1392
01:16:37,440 --> 01:16:39,680
 And it's checking that you hit each set point

1393
01:16:39,680 --> 01:16:41,440
 before moving to the next one.

1394
01:16:41,440 --> 01:16:44,160
 There's an interesting-- OK, I consider

1395
01:16:44,160 --> 01:16:46,760
 an interesting implementation detail about how dense

1396
01:16:46,760 --> 01:16:49,600
 do you want those set points.

1397
01:16:49,600 --> 01:16:51,040
 First, we make them somewhat dense,

1398
01:16:51,040 --> 01:16:53,320
 because particularly for this robot with the impedance

1399
01:16:53,320 --> 01:16:55,600
 controller, it does not like doing large motions

1400
01:16:55,600 --> 01:16:56,480
 in impedance mode.

1401
01:16:56,480 --> 01:17:01,120
 It can be pretty dangerous and actually fault sometimes.

1402
01:17:01,120 --> 01:17:02,080
 Yeah?

1403
01:17:02,080 --> 01:17:05,040
 Why does it not like doing big motions in impedance control?

1404
01:17:05,040 --> 01:17:10,640
 So the question is, why does it not like doing big motions

1405
01:17:10,640 --> 01:17:11,520
 in impedance control?

1406
01:17:11,520 --> 01:17:14,080
 Part of that is due to the gains that it said,

1407
01:17:14,080 --> 01:17:15,840
 which you could change.

1408
01:17:15,840 --> 01:17:18,160
 The other question-- the reason why I pause is because I

1409
01:17:18,160 --> 01:17:21,880
 can answer this question with a lot of personal bias, which

1410
01:17:21,880 --> 01:17:28,400
 is that doing large motions running Cartesian control,

1411
01:17:28,400 --> 01:17:30,680
 I would argue, can be somewhat dangerous

1412
01:17:30,680 --> 01:17:33,960
 for the instance of you are not collision checking.

1413
01:17:33,960 --> 01:17:36,520
 If you are moving in an empty world, which

1414
01:17:36,520 --> 01:17:39,000
 is what a lot of people do when they run Cartesian control,

1415
01:17:39,000 --> 01:17:41,120
 and they're not collision checking, then it's fine.

1416
01:17:41,120 --> 01:17:43,560
 But it's not terribly general, because you're not

1417
01:17:43,560 --> 01:17:46,440
 collision checking against the world and checking things,

1418
01:17:46,440 --> 01:17:49,840
 or often checking a lot of other things like that.

1419
01:17:49,840 --> 01:17:52,520
 So it does not like it, for the gains perspective.

1420
01:17:52,520 --> 01:17:57,040
 I do not like it, because it's not general and safe.

1421
01:17:57,040 --> 01:17:57,800
 Hope that answers.

1422
01:17:57,800 --> 01:17:58,300
 OK.

1423
01:17:58,300 --> 01:18:06,200
 There is actually-- and due to time, we won't get into it--

1424
01:18:06,200 --> 01:18:10,360
 there's a couple interesting points about--

1425
01:18:10,360 --> 01:18:11,880
 this is a redundant manipulator.

1426
01:18:11,880 --> 01:18:13,360
 And so there are design decisions

1427
01:18:13,360 --> 01:18:16,040
 about what is the starting configuration before you

1428
01:18:16,040 --> 01:18:20,120
 run that controller, and picking that such that you can control

1429
01:18:20,120 --> 01:18:23,600
 things within an all space and do not run into a singularity.

1430
01:18:23,600 --> 01:18:25,400
 And so we do some heuristics and checks

1431
01:18:25,400 --> 01:18:28,920
 to make sure that that initial configuration allows

1432
01:18:28,920 --> 01:18:30,680
 you to do that smooth motion pretty well.

1433
01:18:30,680 --> 01:18:34,100
 Yeah.

1434
01:18:34,100 --> 01:18:35,400
 [INAUDIBLE]

1435
01:18:35,400 --> 01:18:35,900
 OK.

1436
01:18:35,900 --> 01:18:40,840
 So I've showed you, for one case,

1437
01:18:40,840 --> 01:18:43,800
 to zoom out a little bit with this work,

1438
01:18:43,800 --> 01:18:46,000
 we actually implemented that same controller,

1439
01:18:46,000 --> 01:18:48,440
 but four different ways, where the thing that changed

1440
01:18:48,440 --> 01:18:52,040
 is what is the contact that you are making.

1441
01:18:52,040 --> 01:18:54,280
 And all of these controllers were

1442
01:18:54,280 --> 01:18:56,200
 defined as basically actions that you

1443
01:18:56,200 --> 01:18:59,240
 could do that you could either open the bottle by using

1444
01:18:59,240 --> 01:19:02,640
 your palm, by using a grasp, by using a finger,

1445
01:19:02,640 --> 01:19:03,360
 by using a tool.

1446
01:19:03,360 --> 01:19:05,440
 All of these have different kinematic properties,

1447
01:19:05,440 --> 01:19:08,280
 as well as frictional properties.

1448
01:19:08,280 --> 01:19:13,080
 And so these were different actions that you could take.

1449
01:19:13,080 --> 01:19:15,800
 We're not going to talk about this yet.

1450
01:19:15,800 --> 01:19:19,080
 But basically, we defined those actions in combination

1451
01:19:19,080 --> 01:19:22,440
 with a lot of other actions.

1452
01:19:22,440 --> 01:19:24,600
 And we used a task and motion planning system.

1453
01:19:24,600 --> 01:19:28,560
 This is something that I think was mentioned four lectures ago.

1454
01:19:28,560 --> 01:19:30,080
 In the decision-making lecture, we

1455
01:19:30,080 --> 01:19:33,520
 mentioned that task and motion planning is a powerful tool.

1456
01:19:33,520 --> 01:19:35,960
 Basically, using that to sequence

1457
01:19:35,960 --> 01:19:42,720
 our set of controllers, we can search

1458
01:19:42,720 --> 01:19:44,360
 through basically a combinatorial search

1459
01:19:44,360 --> 01:19:47,120
 base of different ways to solve this problem.

1460
01:19:47,120 --> 01:19:49,360
 So for the interest of today, this

1461
01:19:49,360 --> 01:19:51,520
 is running different Cartesian impedance controllers,

1462
01:19:51,520 --> 01:19:53,240
 as well as position controllers, in order

1463
01:19:53,240 --> 01:19:54,240
 to accomplish this task.

1464
01:19:54,240 --> 01:19:59,840
 If we do a task and motion planning kind of boutique

1465
01:19:59,840 --> 01:20:01,680
 lecture at the end, then I will be

1466
01:20:01,680 --> 01:20:03,960
 able to explain to you how it actually does the search in

1467
01:20:03,960 --> 01:20:05,640
 order to be able to find these sequences

1468
01:20:05,640 --> 01:20:08,280
 and understand what's truly going on in this video.

1469
01:20:08,280 --> 01:20:11,760
 Questions?

1470
01:20:20,800 --> 01:20:21,300
 Yeah.

1471
01:20:21,300 --> 01:20:33,360
 So specifically for this task--

1472
01:20:33,360 --> 01:20:35,960
 and this gets into a little bit about task and motion planning--

1473
01:20:35,960 --> 01:20:42,280
 it's defined as a fluent where the lid is off of the bottle.

1474
01:20:42,280 --> 01:20:46,720
 And we constrain it such that you cannot take the lid off

1475
01:20:46,720 --> 01:20:49,960
 the bottle until you have exerted this forceful-- what

1476
01:20:49,960 --> 01:20:52,920
 we call forceful operation, the push-twist operator.

1477
01:20:52,920 --> 01:20:56,200
 And so it reasons through, OK, my goal

1478
01:20:56,200 --> 01:20:57,560
 is that I want to remove the lid.

1479
01:20:57,560 --> 01:20:59,240
 In order to remove the lid, I have

1480
01:20:59,240 --> 01:21:01,800
 to exert this forceful operation.

1481
01:21:01,800 --> 01:21:04,200
 You also have to fixture the bottle in place.

1482
01:21:04,200 --> 01:21:05,640
 And it kind of reasons through what

1483
01:21:05,640 --> 01:21:07,800
 is the sequence of actions that I need to take,

1484
01:21:07,800 --> 01:21:09,960
 as well as what are the parameters of those actions

1485
01:21:09,960 --> 01:21:10,960
 in order to achieve it.

1486
01:21:10,960 --> 01:21:12,440
 So the planner is actually--

1487
01:21:12,440 --> 01:21:14,200
 we walked through how you do this.

1488
01:21:14,200 --> 01:21:16,760
 The planner actually is the one deciding what is that d.

1489
01:21:16,760 --> 01:21:19,200
 It's the one computing all of that,

1490
01:21:19,200 --> 01:21:20,880
 in addition to the sequence of actions.

1491
01:21:20,880 --> 01:21:25,920
 Task and motion planning is really cool.

1492
01:21:25,920 --> 01:21:30,440
 If you want a boutique lecture on this, please say so.

1493
01:21:30,440 --> 01:21:30,940
 OK.

1494
01:21:30,940 --> 01:21:36,640
 Yeah, any other questions before we--

1495
01:21:36,640 --> 01:21:38,120
 we're just about at the end of time.

1496
01:21:38,120 --> 01:21:41,920
 Sweet.

1497
01:21:41,920 --> 01:21:43,320
 Thanks, everyone.

1498
01:21:43,320 --> 01:21:45,120
 Pset 8 is out.

1499
01:21:45,120 --> 01:21:47,120
 8 involves hybrid position force control.

1500
01:21:47,120 --> 01:21:49,120
 so you'll be able to implement it.

