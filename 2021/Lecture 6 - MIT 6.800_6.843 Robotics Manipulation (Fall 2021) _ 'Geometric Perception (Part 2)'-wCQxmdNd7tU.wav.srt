1
00:00:00,000 --> 00:00:03,440
 [SIDE CONVERSATION]

2
00:00:03,440 --> 00:00:07,920
 You guys ready to go?

3
00:00:07,920 --> 00:00:09,160
 Everything's good, right?

4
00:00:09,160 --> 00:00:11,160
 Already been going, I guess.

5
00:00:11,160 --> 00:00:13,040
 Yeah.

6
00:00:13,040 --> 00:00:14,000
 Oh, yeah, sure.

7
00:00:14,000 --> 00:00:23,160
 OK, welcome back, everybody.

8
00:00:27,080 --> 00:00:30,600
 So last time, we started doing perception.

9
00:00:30,600 --> 00:00:32,840
 We started the more geometric perception.

10
00:00:32,840 --> 00:00:35,600
 It connects, I think, nicely with the kinematics work

11
00:00:35,600 --> 00:00:40,040
 we had been doing, just thinking about the motion of the robot.

12
00:00:40,040 --> 00:00:41,840
 And I want to continue that today,

13
00:00:41,840 --> 00:00:45,080
 with the major theme being we're going to do estimation

14
00:00:45,080 --> 00:00:47,280
 and think a lot more about the consequences of having

15
00:00:47,280 --> 00:00:50,680
 very messy point clouds.

16
00:00:50,680 --> 00:00:53,240
 Now, there's a couple topics that I wanted--

17
00:00:53,240 --> 00:00:57,360
 there's lots of things to possibly say or know.

18
00:00:57,360 --> 00:01:00,080
 But I wanted, instead of listing all of them,

19
00:01:00,080 --> 00:01:03,880
 which I think the notes can be better about being a little bit

20
00:01:03,880 --> 00:01:07,200
 more encyclopedic, I want to go in a little bit deeper

21
00:01:07,200 --> 00:01:10,760
 and talk about a few cases that I think stand out

22
00:01:10,760 --> 00:01:14,920
 and are worthy of some attention here.

23
00:01:14,920 --> 00:01:17,280
 And I hope it will not only continue

24
00:01:17,280 --> 00:01:19,960
 thinking about geometry and perception,

25
00:01:19,960 --> 00:01:22,120
 but also it's going to dig a little deeper in the way

26
00:01:22,120 --> 00:01:23,280
 we're using optimization.

27
00:01:23,280 --> 00:01:25,560
 So this whole connection--

28
00:01:25,560 --> 00:01:27,520
 I know I've only introduced optimization

29
00:01:27,520 --> 00:01:29,440
 through a couple of pictures and examples,

30
00:01:29,440 --> 00:01:31,160
 but I'm hoping that I can continue

31
00:01:31,160 --> 00:01:33,820
 to build on that with build your intuition by working

32
00:01:33,820 --> 00:01:36,040
 through some of these examples and showing you how

33
00:01:36,040 --> 00:01:39,000
 powerful that framework can be.

34
00:01:39,000 --> 00:01:41,040
 So I'll start up on the slides here.

35
00:01:41,040 --> 00:01:43,960
 So remember that we started-- the setup

36
00:01:43,960 --> 00:01:48,600
 was we're using the soon-to-be-extinct D415

37
00:01:48,600 --> 00:01:51,200
 cameras, awesome cameras.

38
00:01:51,200 --> 00:01:55,240
 They've been a workhorse for robotics.

39
00:01:55,240 --> 00:02:00,960
 And we are simulating those cameras with basically

40
00:02:00,960 --> 00:02:05,880
 a rendering pipeline, where we've added our RGBD sensor,

41
00:02:05,880 --> 00:02:09,520
 so color and depth sensor.

42
00:02:09,520 --> 00:02:10,840
 And we're getting out images that

43
00:02:10,840 --> 00:02:13,720
 are of color image and a depth image that are the same size.

44
00:02:13,720 --> 00:02:20,160
 We can transform that into a point cloud.

45
00:02:20,160 --> 00:02:22,000
 And last time, what we started talking about

46
00:02:22,000 --> 00:02:25,760
 was the iterative closest point algorithm,

47
00:02:25,760 --> 00:02:27,640
 which we're going to build on today.

48
00:02:27,640 --> 00:02:29,200
 That was the foundation.

49
00:02:29,200 --> 00:02:33,680
 So roughly speaking, it looks like this.

50
00:02:33,680 --> 00:02:37,240
 So I've made a random shape.

51
00:02:37,240 --> 00:02:41,800
 I put it in original pose and some perturbed pose.

52
00:02:41,800 --> 00:02:43,280
 The blue is the model.

53
00:02:43,280 --> 00:02:45,040
 The red is the scene.

54
00:02:45,040 --> 00:02:49,040
 And the algorithm-- I mean, it's actually kind of worthwhile,

55
00:02:49,040 --> 00:02:50,840
 I think, to watch it and step through it

56
00:02:50,840 --> 00:02:53,160
 and see the choices it makes because

57
00:02:53,160 --> 00:02:56,200
 of that simple heuristic of distance.

58
00:02:56,200 --> 00:03:00,960
 But oftentimes, it will converge to something reasonable.

59
00:03:00,960 --> 00:03:03,440
 I also put in a few examples in the notes where it does not

60
00:03:03,440 --> 00:03:04,780
 converge to something reasonable.

61
00:03:04,780 --> 00:03:06,680
 It does something pretty ridiculous.

62
00:03:06,680 --> 00:03:08,120
 And that can be pretty frustrating

63
00:03:08,120 --> 00:03:12,440
 when you're trying to pick up a mug or something in the sink.

64
00:03:12,440 --> 00:03:14,800
 But this is the workhorse that we're going to start with.

65
00:03:14,800 --> 00:03:17,400
 Let me remind you of the basic equations there.

66
00:03:17,400 --> 00:03:35,240
 So it's iterative because we're alternating

67
00:03:35,240 --> 00:03:37,240
 between two different optimization problems.

68
00:03:40,040 --> 00:03:45,320
 In one of them, we assume the correspondences are known.

69
00:03:45,320 --> 00:03:49,200
 We optimize over a position and orientation

70
00:03:49,200 --> 00:03:51,400
 where this is actually a 3 by 3 matrix.

71
00:04:09,720 --> 00:04:12,160
 And we had to put in these extra constraints that--

72
00:04:12,160 --> 00:04:33,640
 so that was given the correspondences.

73
00:04:33,640 --> 00:04:36,360
 We did that.

74
00:04:36,360 --> 00:04:38,040
 And the other part of the algorithm

75
00:04:38,040 --> 00:04:44,880
 was given my guess at the pose, I

76
00:04:44,880 --> 00:04:48,040
 reconstruct by searching over possible correspondences.

77
00:04:48,040 --> 00:05:06,320
 And this one, since r is given, doesn't have those constraints.

78
00:05:06,320 --> 00:05:11,120
 This is just a distance, minimum distance problem.

79
00:05:11,120 --> 00:05:12,760
 It has good algorithms.

80
00:05:12,760 --> 00:05:19,160
 So it's important for today's conversation

81
00:05:19,160 --> 00:05:22,560
 to realize that this problem, when the correspondences are

82
00:05:22,560 --> 00:05:28,000
 given, we've decided that it has a good solution.

83
00:05:28,000 --> 00:05:30,040
 It has a globally optimal solution.

84
00:05:30,040 --> 00:05:33,920
 We showed you the pictures of that quadratic bowl.

85
00:05:33,920 --> 00:05:36,720
 This solution, once the correspondences are given,

86
00:05:36,720 --> 00:05:40,400
 it will find you the best p and r.

87
00:05:40,400 --> 00:05:42,520
 No worries about local minima or anything like this.

88
00:05:42,520 --> 00:05:47,960
 It will find the optimal p and r that minimizes this equation.

89
00:05:47,960 --> 00:05:50,140
 So that's an oracle that we can go to,

90
00:05:50,140 --> 00:05:52,240
 and we will go to, to ask, what was

91
00:05:52,240 --> 00:05:54,960
 the answer to this problem?

92
00:05:54,960 --> 00:05:57,920
 And separately, we can, either through brute force search

93
00:05:57,920 --> 00:06:00,680
 or clever nearest neighbor algorithms,

94
00:06:00,680 --> 00:06:04,280
 just search over all possible correspondences

95
00:06:04,280 --> 00:06:06,560
 and find, given the current pose,

96
00:06:06,560 --> 00:06:07,880
 what is the best correspondence?

97
00:06:07,880 --> 00:06:09,600
 What is the minimum distance?

98
00:06:09,600 --> 00:06:12,760
 So that we can also solve globally,

99
00:06:12,760 --> 00:06:15,400
 and we can do it efficiently with good data structures.

100
00:06:15,400 --> 00:06:17,640
 So we're going to alternate between two algorithms that

101
00:06:17,640 --> 00:06:22,840
 are independently global, but that alternation

102
00:06:22,840 --> 00:06:24,920
 can cause local minima.

103
00:06:24,920 --> 00:06:26,760
 So the problems where it gets stuck

104
00:06:26,760 --> 00:06:32,560
 and gets in this frustrating bad estimate of the solution,

105
00:06:32,560 --> 00:06:34,600
 alternating between two global solvers

106
00:06:34,600 --> 00:06:37,520
 does not mean that you're solving the joint problem

107
00:06:37,520 --> 00:06:38,440
 globally.

108
00:06:38,440 --> 00:06:39,680
 Yeah?

109
00:06:39,680 --> 00:06:42,640
 Are there known shape cases that are

110
00:06:42,640 --> 00:06:45,600
 harder than others, like stars versus compact bodies?

111
00:06:45,600 --> 00:06:52,280
 I haven't seen it broken in terms of shape.

112
00:06:52,280 --> 00:06:54,280
 It's possible that there's a dichotomy there.

113
00:06:54,280 --> 00:06:59,160
 But I think you can think about the global optima as--

114
00:06:59,160 --> 00:07:03,600
 basically, we're going to see a few of them do outliers.

115
00:07:03,600 --> 00:07:06,560
 But once you get a bad set of correspondences,

116
00:07:06,560 --> 00:07:08,520
 it doesn't take a star pattern or something.

117
00:07:08,520 --> 00:07:12,040
 You can get caught in the corner of a cube just fine

118
00:07:12,040 --> 00:07:13,520
 and get yourself pretty stuck.

119
00:07:13,520 --> 00:07:20,000
 I think it's highly dependent on both the shape

120
00:07:20,000 --> 00:07:22,560
 and the guess of the pose and the number of points

121
00:07:22,560 --> 00:07:24,360
 and all these different things.

122
00:07:24,360 --> 00:07:25,900
 I don't think it's as simple as that.

123
00:07:25,900 --> 00:07:29,920
 Now, it's interesting.

124
00:07:29,920 --> 00:07:30,420
 Oh, see.

125
00:07:30,420 --> 00:07:30,920
 Yeah, please.

126
00:07:30,920 --> 00:07:34,400
 I just want to confirm the objective functions.

127
00:07:34,400 --> 00:07:37,400
 [INAUDIBLE]

128
00:07:37,400 --> 00:07:38,080
 Oh my goodness.

129
00:07:38,080 --> 00:07:39,400
 I wrote subtract.

130
00:07:39,400 --> 00:07:39,900
 Thank you.

131
00:07:39,900 --> 00:07:40,400
 Thank you.

132
00:07:40,400 --> 00:07:41,520
 Thank you.

133
00:07:41,520 --> 00:07:43,640
 I appreciate you catching that.

134
00:07:43,640 --> 00:07:45,960
 Yeah, you definitely want to--

135
00:07:45,960 --> 00:07:50,240
 this is the points projected into the world frame.

136
00:07:50,240 --> 00:07:51,640
 This is the other point, so that we

137
00:07:51,640 --> 00:07:52,600
 want the distance between them.

138
00:07:52,600 --> 00:07:53,760
 Thank you for catching that.

139
00:07:53,760 --> 00:07:58,600
 Good, good.

140
00:07:58,600 --> 00:08:03,160
 OK, I mean, I want you to know that this is a general--

141
00:08:03,160 --> 00:08:06,000
 this is a common strategy in optimization.

142
00:08:06,000 --> 00:08:09,080
 When you have a problem that is non-convex,

143
00:08:09,080 --> 00:08:14,960
 but you can lock a few variables in and solve different pieces

144
00:08:14,960 --> 00:08:18,600
 of it optimally, these alternation strategies,

145
00:08:18,600 --> 00:08:19,960
 they come up over and over again.

146
00:08:19,960 --> 00:08:22,880
 You see them in bilinear optimization.

147
00:08:22,880 --> 00:08:26,040
 You see them-- if you've heard about the EM algorithm,

148
00:08:26,040 --> 00:08:28,480
 expectation maximization, that's an instance of this.

149
00:08:28,480 --> 00:08:31,520
 These are all the same kind of thing, where you're breaking up

150
00:08:31,520 --> 00:08:34,720
 a problem that is non-convex into two convex problems,

151
00:08:34,720 --> 00:08:37,080
 and you alternate.

152
00:08:37,080 --> 00:08:38,720
 But it can get stuck in local minima,

153
00:08:38,720 --> 00:08:40,040
 because the two halves are convex

154
00:08:40,040 --> 00:08:43,840
 is not enough to solve the original problem jointly.

155
00:08:43,840 --> 00:08:49,600
 OK, so yes, thank you for catching that.

156
00:08:49,600 --> 00:08:52,440
 Another good question that Jared asked at the end of class

157
00:08:52,440 --> 00:08:57,800
 last time was, sometimes I've written the model points here

158
00:08:57,800 --> 00:09:00,360
 and the scene points here in the notes

159
00:09:00,360 --> 00:09:03,440
 I have written in the other case.

160
00:09:03,440 --> 00:09:08,040
 So I think a question that I'd like to address here

161
00:09:08,040 --> 00:09:11,240
 is, do we want the model to match the scene points,

162
00:09:11,240 --> 00:09:13,360
 or the scene to match the model points?

163
00:09:13,360 --> 00:09:16,680
 If we're going to figure out correspondences,

164
00:09:16,680 --> 00:09:17,480
 which one's better?

165
00:09:17,480 --> 00:09:19,880
 Should we find for every model point a scene point

166
00:09:19,880 --> 00:09:20,880
 that it corresponds to?

167
00:09:20,880 --> 00:09:22,880
 Should we find for every scene point a model

168
00:09:22,880 --> 00:09:24,680
 that it corresponds to?

169
00:09:24,680 --> 00:09:28,080
 And I think the complexity there starts

170
00:09:28,080 --> 00:09:30,680
 to reveal some of the challenges in the real problem.

171
00:09:30,680 --> 00:09:31,760
 And I made some pictures.

172
00:09:31,760 --> 00:09:37,200
 So there's a couple of things that--

173
00:09:37,200 --> 00:09:38,600
 the real point clouds are messy.

174
00:09:38,600 --> 00:09:41,160
 They're messy in terms of having dropouts.

175
00:09:41,160 --> 00:09:45,640
 They're messy in terms of having outliers.

176
00:09:45,640 --> 00:09:50,000
 Remember, this video was just showing the lumpiness.

177
00:09:50,000 --> 00:09:52,080
 So these things are messy.

178
00:09:52,080 --> 00:09:57,800
 And if you wanted to run ICP to find a LEGO block or a piece

179
00:09:57,800 --> 00:10:01,600
 of carrot or something, this is not

180
00:10:01,600 --> 00:10:05,640
 the picture I had drawn with the simple shape in 2D before.

181
00:10:05,640 --> 00:10:10,040
 It's a much messier proposition.

182
00:10:10,040 --> 00:10:13,680
 So there's outliers and noise.

183
00:10:13,680 --> 00:10:15,240
 And the other big thing that we saw

184
00:10:15,240 --> 00:10:18,000
 is that there's partial views, the fact

185
00:10:18,000 --> 00:10:20,560
 that the camera looking from one side

186
00:10:20,560 --> 00:10:23,280
 is only going to see half your object at best.

187
00:10:23,280 --> 00:10:25,200
 You can put multiple cameras, but still you're

188
00:10:25,200 --> 00:10:26,560
 never going to see the bottom of the object

189
00:10:26,560 --> 00:10:28,880
 if it's sitting on the table unless you pick it up.

190
00:10:28,880 --> 00:10:31,680
 So if you start with a CAD model, which

191
00:10:31,680 --> 00:10:35,400
 has points all over the geometry,

192
00:10:35,400 --> 00:10:36,400
 and you try to find--

193
00:10:36,400 --> 00:10:42,680
 correspond every model point to a scene point,

194
00:10:42,680 --> 00:10:46,480
 what's the problem with the model points to scene points?

195
00:10:46,480 --> 00:11:02,240
 This is-- the potential problem with this is partial views.

196
00:11:09,640 --> 00:11:14,200
 So if you have only half of your mustard generating the point

197
00:11:14,200 --> 00:11:17,880
 cloud, and you have model points for all of your mustard,

198
00:11:17,880 --> 00:11:20,080
 if you ask every one of your model points

199
00:11:20,080 --> 00:11:22,200
 to correspond to some scene point,

200
00:11:22,200 --> 00:11:24,160
 then you're asking for it to correspond to things

201
00:11:24,160 --> 00:11:25,400
 that just don't exist.

202
00:11:25,400 --> 00:11:28,160
 And that's going to pull it backwards.

203
00:11:28,160 --> 00:11:32,880
 It's going to try to pull your estimate

204
00:11:32,880 --> 00:11:35,040
 into the wrong location.

205
00:11:35,040 --> 00:11:35,840
 Is that clear?

206
00:11:35,840 --> 00:11:36,340
 OK.

207
00:11:36,340 --> 00:11:45,080
 So you think, OK, let's do scene to model.

208
00:11:45,080 --> 00:11:50,160
 But that has problems too.

209
00:11:50,160 --> 00:11:51,680
 OK.

210
00:11:51,680 --> 00:11:54,720
 That has problems-- more problems with the outliers.

211
00:11:54,720 --> 00:11:56,960
 OK, this is actually-- let me finish the partial view.

212
00:11:56,960 --> 00:12:01,080
 So this is a partial view case, right, where I just made that.

213
00:12:04,520 --> 00:12:07,720
 So this is actually solving the scene points to model.

214
00:12:07,720 --> 00:12:10,440
 It happens to get caught in a local minima this time.

215
00:12:10,440 --> 00:12:16,800
 But scene to model can do better with the partial views, right,

216
00:12:16,800 --> 00:12:18,360
 if I only take my scene points and try

217
00:12:18,360 --> 00:12:19,520
 to capture the model points.

218
00:12:19,520 --> 00:12:21,520
 That seems natural.

219
00:12:21,520 --> 00:12:27,040
 The problem with scene to model is outliers.

220
00:12:27,040 --> 00:12:27,540
 OK.

221
00:12:28,300 --> 00:12:30,700
 [WRITING]

222
00:12:30,700 --> 00:12:37,580
 One of the problems, right?

223
00:12:37,580 --> 00:12:40,260
 So I've taken my blue perfect scene points,

224
00:12:40,260 --> 00:12:45,140
 and I've just added three random outliers.

225
00:12:45,140 --> 00:12:49,060
 I got a speck of light or a speck of dust in the air,

226
00:12:49,060 --> 00:12:50,660
 happened to catch a return.

227
00:12:50,660 --> 00:12:52,700
 I've got a random point in the middle of the air.

228
00:12:52,700 --> 00:12:54,140
 It happens, right?

229
00:12:54,140 --> 00:12:56,780
 Now, those are still going to match

230
00:12:56,780 --> 00:13:00,900
 if I'm asking all of my scene points

231
00:13:00,900 --> 00:13:03,420
 to connect to some model point, right?

232
00:13:03,420 --> 00:13:05,980
 Then this, even when it wants to get close,

233
00:13:05,980 --> 00:13:08,500
 it's still getting pulled towards these points

234
00:13:08,500 --> 00:13:10,460
 because they're all trying to find their match.

235
00:13:10,460 --> 00:13:16,340
 OK.

236
00:13:16,340 --> 00:13:20,300
 So both of these problems have potential pitfalls.

237
00:13:20,300 --> 00:13:24,260
 Both of them have possible solutions.

238
00:13:24,260 --> 00:13:27,540
 But I think one of the things that could fix either of these

239
00:13:27,540 --> 00:13:30,140
 is if we had some way of identifying outliers

240
00:13:30,140 --> 00:13:33,420
 and ejecting them from the data set, right?

241
00:13:33,420 --> 00:13:36,880
 [WRITING]

242
00:13:36,880 --> 00:13:59,380
 And I hope you're already thinking about some reasonable

243
00:13:59,380 --> 00:14:00,500
 heuristics for that, right?

244
00:14:00,500 --> 00:14:02,580
 If the distance is too big, I can just crop it.

245
00:14:02,580 --> 00:14:04,980
 There's a bunch of things that we can go through.

246
00:14:04,980 --> 00:14:10,780
 But before we completely solve the problem,

247
00:14:10,780 --> 00:14:14,940
 let's try to make a little bit more understanding

248
00:14:14,940 --> 00:14:17,220
 about this sort of decision.

249
00:14:17,220 --> 00:14:18,940
 There is actually one thing.

250
00:14:18,940 --> 00:14:21,460
 I think in both of those cases, if you have partial views

251
00:14:21,460 --> 00:14:23,580
 and you can reject outliers, then you

252
00:14:23,580 --> 00:14:25,180
 can reject the model points that were

253
00:14:25,180 --> 00:14:28,100
 on the back of a mustard bottle, right?

254
00:14:28,100 --> 00:14:32,240
 If you have actual outliers and you have the ability

255
00:14:32,240 --> 00:14:33,420
 to pull them from the data set, then I

256
00:14:33,420 --> 00:14:34,460
 think this can work too.

257
00:14:34,460 --> 00:14:37,140
 Both of those can be made more robust

258
00:14:37,140 --> 00:14:40,420
 if you have some algorithm for removing the non-matches.

259
00:14:40,420 --> 00:14:44,740
 But there are more subtle reasons maybe

260
00:14:44,740 --> 00:14:45,900
 to prefer one or the other.

261
00:14:45,900 --> 00:14:54,380
 I tend to prefer finding scene to model

262
00:14:54,380 --> 00:14:57,540
 because I particularly like a generalization

263
00:14:57,540 --> 00:14:59,580
 of the point-to-point correspondence, which

264
00:14:59,580 --> 00:15:01,980
 is point-to-mesh correspondence.

265
00:15:01,980 --> 00:15:05,060
 And it's worth, I think, writing that down.

266
00:15:05,060 --> 00:15:26,460
 So presumably, your CAD model-- it's kind of weird, right,

267
00:15:26,460 --> 00:15:28,620
 that we started off-- we have this nice CAD model.

268
00:15:28,620 --> 00:15:30,220
 You think that's something I've got,

269
00:15:30,220 --> 00:15:32,260
 like a nice triangular mesh, for instance.

270
00:15:32,260 --> 00:15:34,420
 And I'm going to start by sampling points on it.

271
00:15:34,420 --> 00:15:36,460
 And then I'm treating it as a point registration.

272
00:15:36,460 --> 00:15:38,060
 That always felt weird to me, right?

273
00:15:38,060 --> 00:15:40,660
 There's applications where maybe you actually had a point.

274
00:15:40,660 --> 00:15:41,860
 But I don't know.

275
00:15:41,860 --> 00:15:44,940
 In my world, you start with a CAD model probably.

276
00:15:44,940 --> 00:15:47,300
 And you're going to go from there.

277
00:15:47,300 --> 00:15:50,180
 So let's say our model was not a set of points,

278
00:15:50,180 --> 00:15:55,820
 but maybe a triangular mesh, one of our other 3D

279
00:15:55,820 --> 00:15:59,540
 representations, 3D geometry representations.

280
00:15:59,540 --> 00:16:01,060
 Typically, a triangular mesh, you

281
00:16:01,060 --> 00:16:07,620
 end up with a list of vertices, not so different than a point

282
00:16:07,620 --> 00:16:11,660
 cloud, but a list of x, y, z locations in space.

283
00:16:11,660 --> 00:16:16,260
 They could be sparse now instead of a dense point cloud.

284
00:16:16,260 --> 00:16:23,260
 And then you have a list of faces

285
00:16:23,260 --> 00:16:28,500
 where each face has indices into the vertices.

286
00:16:28,500 --> 00:16:34,180
 Let me write vertex indices.

287
00:16:34,180 --> 00:16:38,260
 So if I have a triangular mesh and a bunch of triangles

288
00:16:38,260 --> 00:16:42,540
 building up my geometry, then these might just be--

289
00:16:42,540 --> 00:16:47,460
 for every face, I have three integers that reference

290
00:16:47,460 --> 00:16:49,780
 the big list of vertices.

291
00:16:49,780 --> 00:16:52,780
 And if you look at an OBJ file or an SDL file or whatever,

292
00:16:52,780 --> 00:16:55,780
 that's basically what's inside there, is those two lists.

293
00:16:55,780 --> 00:16:58,140
 Sometimes some normal information,

294
00:16:58,140 --> 00:17:01,220
 but that's a big part of it.

295
00:17:01,220 --> 00:17:07,940
 So just to spell it out here, let's

296
00:17:07,940 --> 00:17:15,300
 say I've got everything in 2D for now.

297
00:17:15,300 --> 00:17:28,020
 So maybe my vertices could be negative 1.5, 1.5.

298
00:17:28,020 --> 00:17:30,580
 Got a box of size 3, let's say.

299
00:17:30,580 --> 00:17:47,380
 So this is maybe my vertex 0, I guess.

300
00:17:47,380 --> 00:17:52,940
 And then I made this one 1, 2, 3.

301
00:17:52,940 --> 00:17:57,540
 And then these are my vertices.

302
00:17:57,540 --> 00:18:00,740
 And then my faces in 2D would just be a list.

303
00:18:00,740 --> 00:18:03,820
 I'm saying, oh, I've got a face that goes from 0 to 1.

304
00:18:03,820 --> 00:18:05,940
 I've got another one that goes from 0 to 2.

305
00:18:05,940 --> 00:18:09,340
 I've got one that goes from 1 to 3.

306
00:18:09,340 --> 00:18:10,820
 I've got one that goes from 2 to 3.

307
00:18:10,820 --> 00:18:18,220
 What I'd like to do--

308
00:18:18,220 --> 00:18:19,940
 this is a different representation

309
00:18:19,940 --> 00:18:21,780
 than what we did before, where we had--

310
00:18:21,780 --> 00:18:24,180
 somehow, if we had a big box, we somehow

311
00:18:24,180 --> 00:18:29,900
 wanted to sample points all over the place

312
00:18:29,900 --> 00:18:33,220
 with some dense geometry.

313
00:18:33,220 --> 00:18:37,140
 I would like to solve a better problem, I think.

314
00:18:37,140 --> 00:18:39,900
 If I have a point here that I'm trying

315
00:18:39,900 --> 00:18:42,780
 to register with the CAD model, I

316
00:18:42,780 --> 00:18:48,140
 don't want to find the closest random sample point on this.

317
00:18:48,140 --> 00:18:55,540
 I want to just do the distance to the actual face.

318
00:18:55,540 --> 00:18:57,780
 It seems it would be way better if we could do that.

319
00:18:57,780 --> 00:19:04,660
 So you should start thinking about,

320
00:19:04,660 --> 00:19:08,180
 how would I write the point to a plane or point to a face,

321
00:19:08,180 --> 00:19:10,980
 even, because a face is actually not a full plane.

322
00:19:10,980 --> 00:19:11,620
 It's a segment.

323
00:19:11,620 --> 00:19:17,980
 And I hope you're thinking in your head, OK, well, I know--

324
00:19:17,980 --> 00:19:27,740
 I can write the equation of a plane as somehow a linear

325
00:19:27,740 --> 00:19:28,620
 equation.

326
00:19:28,620 --> 00:19:29,780
 We would define a plane.

327
00:19:29,780 --> 00:19:33,900
 So maybe I can use that.

328
00:19:33,900 --> 00:19:35,140
 And you actually can use that.

329
00:19:35,140 --> 00:19:36,260
 You can derive things.

330
00:19:36,260 --> 00:19:38,820
 You can think about taking dot products of the normal vector.

331
00:19:38,820 --> 00:19:42,100
 And there's a bunch of geometry that you can do.

332
00:19:42,100 --> 00:19:45,380
 And they will get you various different formulations.

333
00:19:46,060 --> 00:19:50,260
 But there's a really slick way, now

334
00:19:50,260 --> 00:19:51,980
 that we're in the land of optimization,

335
00:19:51,980 --> 00:19:56,540
 that I think is worth you appreciating.

336
00:19:56,540 --> 00:20:00,700
 So how can I say--

337
00:20:00,700 --> 00:20:02,060
 I guess the first observation here

338
00:20:02,060 --> 00:20:04,740
 is that I can talk about the element.

339
00:20:04,740 --> 00:20:09,460
 I can define the set of points that are inside here

340
00:20:09,460 --> 00:20:14,700
 by writing some element, p, if I want to position p.

341
00:20:15,700 --> 00:20:19,060
 And I want to parameterize all of the positions that

342
00:20:19,060 --> 00:20:21,860
 are inside that face.

343
00:20:21,860 --> 00:20:22,540
 I can do that.

344
00:20:22,540 --> 00:20:30,620
 This is any face or a triangular face is a convex set.

345
00:20:30,620 --> 00:20:35,300
 So I can do that by just making an affine combination

346
00:20:35,300 --> 00:20:36,420
 of the vertices.

347
00:20:36,420 --> 00:20:43,260
 So if I take a sum of the vertices,

348
00:20:43,260 --> 00:20:46,940
 let's say alpha i vertex i.

349
00:20:46,940 --> 00:20:50,740
 Let me say p of vertex i.

350
00:20:50,740 --> 00:21:01,060
 And I say that all the i's alphas are greater than 1.

351
00:21:01,060 --> 00:21:05,340
 And sum of the alphas equals 1.

352
00:21:05,340 --> 00:21:09,780
 Then in the case, this would be, let's say,

353
00:21:09,780 --> 00:21:17,220
 inside some face f, all the vertices inside some face f.

354
00:21:17,220 --> 00:21:23,340
 So in this case, it would really just be alpha times this

355
00:21:23,340 --> 00:21:26,220
 plus alpha times this.

356
00:21:26,220 --> 00:21:28,340
 And if the sum of them has to equal 1,

357
00:21:28,340 --> 00:21:29,820
 then I would parameterize.

358
00:21:29,820 --> 00:21:35,220
 If I change my alpha 0 from being 1 and the other one being

359
00:21:35,220 --> 00:21:37,420
 0 to this one being 1 and the other one being 0,

360
00:21:37,420 --> 00:21:41,220
 I'm just going to walk along that face.

361
00:21:41,220 --> 00:21:43,100
 And that's true in higher dimensions, too.

362
00:21:43,100 --> 00:21:47,500
 If you have any convex polytope, you

363
00:21:47,500 --> 00:21:50,860
 can write a member of that convex polytope

364
00:21:50,860 --> 00:21:53,020
 by an affine combination of its vertices.

365
00:21:53,020 --> 00:22:01,180
 So why is that so useful?

366
00:22:01,180 --> 00:22:17,420
 Well, we're leaning more and more

367
00:22:17,420 --> 00:22:21,300
 on the power of optimization.

368
00:22:21,300 --> 00:22:23,320
 The game in optimization, the reason

369
00:22:23,320 --> 00:22:25,700
 we liked this sort of objective was

370
00:22:25,700 --> 00:22:28,900
 that that term, the inside of this,

371
00:22:28,900 --> 00:22:31,300
 is linear in the decision variables.

372
00:22:31,300 --> 00:22:32,660
 Therefore, when I take a squared,

373
00:22:32,660 --> 00:22:34,620
 it's quadratic in the decision variables, which

374
00:22:34,620 --> 00:22:38,980
 made it was convex in those decision variables.

375
00:22:38,980 --> 00:22:43,060
 So if I'm going to add any excitement to this,

376
00:22:43,060 --> 00:22:45,780
 any new things to this, I'd like to do it

377
00:22:45,780 --> 00:22:47,820
 in a way that is linear in the decision

378
00:22:47,820 --> 00:22:52,180
 variables on the inside, so it's quadratic for the whole thing.

379
00:22:52,180 --> 00:22:54,140
 You see where this is going?

380
00:22:54,140 --> 00:23:02,340
 So what if I do this for each of those points?

381
00:23:02,340 --> 00:23:15,780
 I'd like to say-- I guess I've got to flip my-- minus.

382
00:23:15,780 --> 00:23:22,420
 Now I'm going to do sum over j, alpha j, p of m,

383
00:23:22,420 --> 00:23:26,220
 j in the face that I know to be correspondent to.

384
00:23:26,220 --> 00:23:31,980
 Get that right?

385
00:23:31,980 --> 00:23:37,580
 So I'm going to do for all of my scene points,

386
00:23:37,580 --> 00:23:42,620
 i, I'm going to look up the face.

387
00:23:42,620 --> 00:23:44,940
 This time, my correspondence that I've given--

388
00:23:44,940 --> 00:23:48,140
 this is given correspondence.

389
00:23:48,140 --> 00:23:51,340
 I'll say fi, let's say.

390
00:23:51,340 --> 00:23:58,100
 Given correspondences fi.

391
00:23:58,100 --> 00:24:05,100
 I can just add in this alpha in a way that's

392
00:24:05,100 --> 00:24:09,940
 linear in the objective here.

393
00:24:09,940 --> 00:24:21,060
 I still have my more nasty constraints,

394
00:24:21,060 --> 00:24:26,300
 but I can do the same tricks I did before now

395
00:24:26,300 --> 00:24:29,860
 and actually solve in closed form for p and alpha

396
00:24:29,860 --> 00:24:33,580
 and r using my SPD trick.

397
00:24:33,580 --> 00:24:35,540
 So this is pretty slick, I would say.

398
00:24:35,540 --> 00:24:39,780
 Now you can have a much sparser representation.

399
00:24:39,780 --> 00:24:40,280
 Yeah?

400
00:24:40,280 --> 00:24:43,260
 [INAUDIBLE]

401
00:24:43,260 --> 00:24:44,020
 Oh, sorry, sorry.

402
00:24:44,020 --> 00:24:45,020
 Yes.

403
00:24:45,020 --> 00:24:45,780
 Oh, you're right.

404
00:24:45,780 --> 00:24:49,300
 So that makes it harder to do the SPD.

405
00:24:49,300 --> 00:24:56,420
 Alpha i and sum over i, i.

406
00:24:56,420 --> 00:25:07,100
 Yes, you do have to deal with those.

407
00:25:08,100 --> 00:25:10,940
 Right.

408
00:25:10,940 --> 00:25:11,980
 So yeah, you're right.

409
00:25:11,980 --> 00:25:14,060
 I misspoke when I said you can just call it the SPD

410
00:25:14,060 --> 00:25:16,660
 because you have to take those into account at the same time.

411
00:25:16,660 --> 00:25:25,060
 OK, but that's beautiful and good.

412
00:25:25,060 --> 00:25:28,380
 And now I can get closest point to a plane instead--

413
00:25:28,380 --> 00:25:31,780
 or to a face instead of point to point.

414
00:25:31,780 --> 00:25:35,460
 And I think it's so useful that that's maybe one thing

415
00:25:35,460 --> 00:25:39,220
 to break the tie between scene to model versus model to scene.

416
00:25:39,220 --> 00:25:47,580
 Is that good?

417
00:25:47,580 --> 00:25:52,820
 I'm hoping that you'll get increasingly

418
00:25:52,820 --> 00:25:55,940
 flexible with this sort of way of thinking about optimization

419
00:25:55,940 --> 00:25:58,380
 is that we can carve out these optimization problems

420
00:25:58,380 --> 00:26:03,240
 and doing a little extra work to sort of find the right way

421
00:26:03,240 --> 00:26:05,900
 to add your parameters into the model

422
00:26:05,900 --> 00:26:09,660
 can make a huge difference to the optimization landscape.

423
00:26:09,660 --> 00:26:13,440
 It's like if you make good choices here,

424
00:26:13,440 --> 00:26:16,500
 you are fundamentally reforming the landscape from something

425
00:26:16,500 --> 00:26:19,100
 that could be very non-convex to something that's non-convex

426
00:26:19,100 --> 00:26:21,740
 and an easy optimization to solve.

427
00:26:21,740 --> 00:26:27,060
 That is, I think, deep networks work so well that people

428
00:26:27,060 --> 00:26:32,260
 tend to not think about these kind of things as much anymore.

429
00:26:32,260 --> 00:26:34,300
 But it's still, even for deep networks,

430
00:26:34,300 --> 00:26:37,260
 if you make your landscape better,

431
00:26:37,260 --> 00:26:38,540
 it's going to work a lot better.

432
00:26:38,540 --> 00:26:40,340
 So make good choices.

433
00:26:40,340 --> 00:26:44,100
 I think that's the takeaway.

434
00:26:44,100 --> 00:26:47,580
 OK, so let's think about how do we reject outliers.

435
00:26:59,500 --> 00:27:03,500
 And let me distinguish between two cases.

436
00:27:03,500 --> 00:27:09,980
 One I would say is the easy case, which

437
00:27:09,980 --> 00:27:16,140
 would be inside the ICP loop where we've

438
00:27:16,140 --> 00:27:19,580
 got a pretty good solution, and we're just

439
00:27:19,580 --> 00:27:20,380
 trying to refine it.

440
00:27:20,380 --> 00:27:22,900
 We're kind of like in the last stages of convergence,

441
00:27:22,900 --> 00:27:27,820
 and we don't want these distant points to be screwing up

442
00:27:27,820 --> 00:27:30,740
 my optimization.

443
00:27:30,740 --> 00:27:40,780
 I would say good pose estimate near convergence.

444
00:27:40,780 --> 00:27:53,460
 And there's various heuristics that we'll use for that.

445
00:27:53,460 --> 00:28:03,780
 So for instance, let's say if I do my distance calculation

446
00:28:03,780 --> 00:28:07,180
 and the distance is greater than 3 centimeters,

447
00:28:07,180 --> 00:28:09,860
 I'll say just pick some threshold and distance.

448
00:28:09,860 --> 00:28:17,020
 And anything beyond some distance threshold

449
00:28:17,020 --> 00:28:20,020
 is just left as an outlier.

450
00:28:20,020 --> 00:28:21,380
 Threshold maximum distance.

451
00:28:21,940 --> 00:28:33,180
 There's another one that we put on the--

452
00:28:33,180 --> 00:28:35,140
 think about on your p-set, threshold

453
00:28:35,140 --> 00:28:36,540
 the number of inliers.

454
00:28:36,540 --> 00:28:42,620
 So is that language clear?

455
00:28:42,620 --> 00:28:45,740
 So if you have an optimization problem,

456
00:28:45,740 --> 00:28:47,740
 you're trying to fit all these points,

457
00:28:47,740 --> 00:28:49,660
 we're going to call the inliers the ones that

458
00:28:49,660 --> 00:28:53,060
 are agreeing with my model, and the outliers

459
00:28:53,060 --> 00:28:56,340
 the ones that are not agreeing with my model.

460
00:28:56,340 --> 00:28:59,500
 And we're trying to separate the inliers from the outliers.

461
00:28:59,500 --> 00:29:02,220
 So it might be that if you know a priori that you expect

462
00:29:02,220 --> 00:29:06,980
 to have exactly 10 points, then taking the 10 closest ones

463
00:29:06,980 --> 00:29:07,820
 could be a good one.

464
00:29:07,820 --> 00:29:12,060
 And that'll be something you'll look at in the p-set.

465
00:29:12,060 --> 00:29:19,460
 OK, but let's contrast that with the harder case, which

466
00:29:19,460 --> 00:29:21,020
 I think I put in the next slide here.

467
00:29:21,020 --> 00:29:26,820
 Yeah, so let's say I'm just looking

468
00:29:26,820 --> 00:29:28,660
 at some complicated scene, and I've

469
00:29:28,660 --> 00:29:33,740
 got a CAD model or a point cloud model of a drill.

470
00:29:33,740 --> 00:29:36,940
 And I'm trying to solve this much more global problem

471
00:29:36,940 --> 00:29:39,200
 of saying, find me the points that

472
00:29:39,200 --> 00:29:41,220
 match my drill in this scene that

473
00:29:41,220 --> 00:29:42,460
 has points all over the place.

474
00:29:42,460 --> 00:29:47,060
 And some of them are drill-ish shapes, but not a drill.

475
00:29:47,060 --> 00:29:58,340
 And you've got to find-- this is the more global registration

476
00:29:58,340 --> 00:29:58,840
 problem.

477
00:29:58,840 --> 00:30:08,380
 This global point registration problem, I think,

478
00:30:08,380 --> 00:30:10,380
 requires different tools.

479
00:30:10,380 --> 00:30:13,860
 You can't just somehow threshold max distance,

480
00:30:13,860 --> 00:30:16,860
 because you might not even latch on.

481
00:30:16,860 --> 00:30:19,740
 It might be that your initial guess, the max distance just

482
00:30:19,740 --> 00:30:24,020
 rules out the drill right away, and you'll never find it.

483
00:30:24,020 --> 00:30:25,980
 So there's a series of different ideas--

484
00:30:25,980 --> 00:30:31,100
 I'll tell you one or two of them in more detail--

485
00:30:31,100 --> 00:30:33,780
 that try to address this more global problem.

486
00:30:33,780 --> 00:30:39,540
 I'm OK going back and forth with these two.

487
00:30:39,540 --> 00:30:43,020
 [END PLAYBACK]

488
00:30:43,020 --> 00:31:00,900
 Do people know various ideas in this vein?

489
00:31:00,900 --> 00:31:05,460
 Anybody want to throw some buzzwords out?

490
00:31:05,460 --> 00:31:06,820
 What would you think of if you're

491
00:31:06,820 --> 00:31:10,180
 trying to search for the needle in the haystack here?

492
00:31:10,180 --> 00:31:12,820
 You've got a big point cloud, a little model.

493
00:31:12,820 --> 00:31:15,180
 You're trying to find the model in the point cloud.

494
00:31:15,180 --> 00:31:15,900
 What would you do?

495
00:31:15,900 --> 00:31:25,020
 Segmentation, awesome.

496
00:31:25,020 --> 00:31:29,140
 So in fact, the coloring there is

497
00:31:29,140 --> 00:31:31,060
 an example of a segmentation.

498
00:31:31,060 --> 00:31:33,060
 And these days, I think you're absolutely right.

499
00:31:33,060 --> 00:31:35,620
 The first thing I would do, I would train a deep network

500
00:31:35,620 --> 00:31:38,900
 to do some initial segmentation.

501
00:31:38,900 --> 00:31:42,620
 Nowadays, you can download deep networks

502
00:31:42,620 --> 00:31:45,020
 that are pre-trained, that you point them

503
00:31:45,020 --> 00:31:47,500
 at your environment, you're going

504
00:31:47,500 --> 00:31:49,300
 to get a fairly good segmentation right out

505
00:31:49,300 --> 00:31:50,020
 of the box.

506
00:31:50,020 --> 00:31:54,700
 But typically, you would try to throw

507
00:31:54,700 --> 00:31:57,100
 in some of the specific objects you're trying to segment

508
00:31:57,100 --> 00:31:59,460
 and at least fine tune a deep network model, which

509
00:31:59,460 --> 00:32:02,260
 we'll do in a few weeks.

510
00:32:02,260 --> 00:32:05,220
 So having an initial segmentation--

511
00:32:05,220 --> 00:32:08,060
 and I should say that there are geometric algorithms

512
00:32:08,060 --> 00:32:10,340
 for segmentation too.

513
00:32:10,340 --> 00:32:12,220
 Those have mostly been eclipsed, I would say.

514
00:32:12,220 --> 00:32:13,140
 I would say most of the time now,

515
00:32:13,140 --> 00:32:14,740
 it's deep networks for segmentation

516
00:32:14,740 --> 00:32:17,060
 for that part of the program.

517
00:32:17,060 --> 00:32:18,060
 What else would you do?

518
00:32:18,060 --> 00:32:22,140
 Yeah?

519
00:32:22,140 --> 00:32:22,640
 [INAUDIBLE]

520
00:32:22,640 --> 00:32:30,980
 Awesome.

521
00:32:30,980 --> 00:32:31,500
 Good.

522
00:32:31,500 --> 00:32:34,020
 So just take some random crops.

523
00:32:34,020 --> 00:32:35,940
 Maybe take a bunch of random crops of the scene

524
00:32:35,940 --> 00:32:38,340
 and check those random crops.

525
00:32:38,340 --> 00:32:39,700
 I think that's a really good--

526
00:32:39,700 --> 00:32:42,180
 both of those are very good suggestions.

527
00:32:42,180 --> 00:33:03,180
 So I think the way you said it was very good.

528
00:33:03,180 --> 00:33:07,740
 You said that-- I mean, because we have our points in 3D,

529
00:33:07,740 --> 00:33:10,420
 we know that the points we're looking for

530
00:33:10,420 --> 00:33:12,060
 are localized in 3D.

531
00:33:12,060 --> 00:33:15,980
 We could use our geometric intuition to take subsamples.

532
00:33:15,980 --> 00:33:19,580
 There's a more generic way that people do this,

533
00:33:19,580 --> 00:33:20,780
 of this random subsampling.

534
00:33:20,780 --> 00:33:22,240
 If you just have a random data set,

535
00:33:22,240 --> 00:33:24,540
 you don't have that same geometric intuition,

536
00:33:24,540 --> 00:33:26,140
 then you might just take that data set

537
00:33:26,140 --> 00:33:31,180
 and just at random pick some subset of the pixels.

538
00:33:31,180 --> 00:33:32,980
 And that is called RANSAC.

539
00:33:32,980 --> 00:33:39,780
 That is-- which would be random sample consensus.

540
00:33:39,780 --> 00:33:54,100
 It's typically done-- it's a general tool for regression

541
00:33:54,100 --> 00:33:59,460
 given outliers, where you can sample a subset of your data,

542
00:33:59,460 --> 00:34:03,420
 try to fit everything that's an outlier you discard,

543
00:34:03,420 --> 00:34:06,840
 and then you just do that initial sample a bunch of times

544
00:34:06,840 --> 00:34:09,100
 and take the best one.

545
00:34:09,100 --> 00:34:12,980
 It's an algorithm that has some theoretical guarantees,

546
00:34:12,980 --> 00:34:14,740
 but they're only probabilistic.

547
00:34:14,740 --> 00:34:17,220
 It's like, if you sample enough times,

548
00:34:17,220 --> 00:34:20,060
 you will eventually get lucky and sample the right thing.

549
00:34:20,060 --> 00:34:23,060
 So these are probabilistic type algorithms.

550
00:34:23,060 --> 00:34:24,140
 They can be useful.

551
00:34:24,140 --> 00:34:26,700
 We're going to have you implement a simple RANSAC

552
00:34:26,700 --> 00:34:28,460
 algorithm for the problem set.

553
00:34:28,460 --> 00:34:34,820
 But I think your observation about it being geometric

554
00:34:34,820 --> 00:34:37,820
 is often not discussed in the generic RANSAC literature,

555
00:34:37,820 --> 00:34:40,220
 but very relevant here.

556
00:34:40,220 --> 00:34:42,720
 And I'm going to list one more, which I particularly like.

557
00:34:42,720 --> 00:34:45,300
 I think it's particularly clever for the--

558
00:34:45,300 --> 00:34:50,660
 and I think uses our understanding of geometry

559
00:34:50,660 --> 00:34:52,660
 with our optimization.

560
00:34:52,660 --> 00:34:54,540
 And that's the pairwise distance ideas.

561
00:34:55,540 --> 00:35:03,620
 So what do I mean by that?

562
00:35:03,620 --> 00:35:08,420
 So the pairwise distance between points

563
00:35:08,420 --> 00:35:17,500
 is a-- the pairwise distance is invariant to translation

564
00:35:17,500 --> 00:35:18,220
 and rotation.

565
00:35:18,820 --> 00:35:19,320
 OK.

566
00:35:19,320 --> 00:35:36,180
 So let me just make a super simple example here.

567
00:35:36,180 --> 00:35:45,300
 I'll do my-- my daughter's doing 3, 4, 5 triangles at home,

568
00:35:45,300 --> 00:35:46,860
 so I'll do a 3, 4, 5 triangle.

569
00:35:46,860 --> 00:35:49,300
 We've got nice numbers.

570
00:35:49,300 --> 00:35:53,020
 OK, so let's say I've got points just in the corners to start,

571
00:35:53,020 --> 00:35:54,740
 although I think that's artificial

572
00:35:54,740 --> 00:35:55,940
 and we'll fix it in a minute.

573
00:35:55,940 --> 00:36:05,820
 So the distance between those two points is 4, 3, 5.

574
00:36:05,820 --> 00:36:09,820
 Every distance here for every pair of points

575
00:36:09,820 --> 00:36:12,860
 is either 3, 4, or 5.

576
00:36:12,860 --> 00:36:14,100
 If I take another--

577
00:36:14,100 --> 00:36:17,340
 if I just change the pose of that,

578
00:36:17,340 --> 00:36:22,060
 I could perturb it arbitrarily in translation and rotation.

579
00:36:22,060 --> 00:36:27,300
 If I compute the distances in that new point cloud,

580
00:36:27,300 --> 00:36:30,860
 the distances are still going to be only 3, 4, or 5.

581
00:36:30,860 --> 00:36:32,900
 OK, so it's kind of cool if you're

582
00:36:32,900 --> 00:36:37,300
 willing to take a relative measurement between just--

583
00:36:37,300 --> 00:36:40,100
 that's a distance relative to the points,

584
00:36:40,100 --> 00:36:42,580
 then that actually metric doesn't--

585
00:36:42,580 --> 00:36:45,420
 you can-- it's completely invariant to pose.

586
00:36:45,420 --> 00:36:48,420
 So before I have any estimate of my pose,

587
00:36:48,420 --> 00:36:50,180
 I can just look at the pairwise distances

588
00:36:50,180 --> 00:36:52,700
 and start asking, is that a pairwise distance that could

589
00:36:52,700 --> 00:36:54,540
 possibly exist in my model?

590
00:36:54,540 --> 00:36:58,540
 If it's not, I can possibly reject it.

591
00:36:58,540 --> 00:37:01,740
 So if I have now this setting where

592
00:37:01,740 --> 00:37:11,100
 I have a bunch of point measurements,

593
00:37:11,100 --> 00:37:14,980
 it's potentially an expensive sounding approach.

594
00:37:14,980 --> 00:37:18,900
 But I'll take pairwise distances from every possible pair.

595
00:37:18,900 --> 00:37:22,860
 For every possible point, I'll take every possible pair.

596
00:37:22,860 --> 00:37:28,060
 And in this case, I'll just check.

597
00:37:28,060 --> 00:37:29,460
 Is it 3, 4, or 5?

598
00:37:29,460 --> 00:37:37,140
 If the number is not 3, 4, or 5, what does that tell you?

599
00:37:37,140 --> 00:37:41,580
 That tells you that if this edge is not 3, 4, or 5,

600
00:37:41,580 --> 00:37:44,220
 that tells you that one of those two points

601
00:37:44,220 --> 00:37:47,740
 must not be in the mesh.

602
00:37:47,740 --> 00:37:50,380
 It could be that one of them is, but the other one's not.

603
00:37:50,380 --> 00:37:58,260
 OK, so there's various ways to leverage that.

604
00:37:58,260 --> 00:38:14,220
 The one I like that I'll show you now-- anybody here

605
00:38:14,220 --> 00:38:15,420
 working with Luca Carlone?

606
00:38:15,420 --> 00:38:22,180
 Luca and Hank and folks have been

607
00:38:22,180 --> 00:38:25,540
 working on an algorithm called Teaser, which

608
00:38:25,540 --> 00:38:29,540
 has a piece of it that leverages this idea.

609
00:38:29,540 --> 00:38:35,940
 It's actually, I guess I should--

610
00:38:35,940 --> 00:38:45,980
 I've got some other collaborators too.

611
00:38:45,980 --> 00:38:46,620
 They're at MIT.

612
00:38:51,460 --> 00:38:56,980
 OK, so they actually recommend-- so you can immediately

613
00:38:56,980 --> 00:39:02,940
 rule out some points if a point does not

614
00:39:02,940 --> 00:39:06,060
 have any edges that could make it feasible.

615
00:39:06,060 --> 00:39:09,340
 Then you can just remove that point immediately.

616
00:39:09,340 --> 00:39:12,580
 But you can do more aggressive pruning

617
00:39:12,580 --> 00:39:17,500
 by actually looking at the whole graph that gets constructed out

618
00:39:17,500 --> 00:39:19,060
 of these things.

619
00:39:19,060 --> 00:39:20,660
 So let me try to say that carefully.

620
00:39:20,660 --> 00:39:31,620
 So if Psi minus Psj squared--

621
00:39:31,620 --> 00:39:34,100
 I'm going to just use my cartoon here.

622
00:39:34,100 --> 00:39:38,100
 It's either 3, 4, or 5.

623
00:39:38,100 --> 00:39:39,540
 Then we'll add an edge.

624
00:39:46,420 --> 00:39:49,580
 If Pij is not one of those things, we won't add an edge.

625
00:39:49,580 --> 00:39:52,740
 So if I have k over here and it wasn't part of that,

626
00:39:52,740 --> 00:39:55,380
 then I won't add an edge.

627
00:39:55,380 --> 00:39:59,060
 So I'll have a bunch of points out there.

628
00:39:59,060 --> 00:40:00,300
 Some of them have edges.

629
00:40:00,300 --> 00:40:01,500
 Some of them don't have edges.

630
00:40:01,500 --> 00:40:05,140
 If I have anybody that's not fully connected,

631
00:40:05,140 --> 00:40:07,820
 then we know it's an outlier.

632
00:40:07,820 --> 00:40:10,220
 So if I have something like this,

633
00:40:10,220 --> 00:40:13,420
 I better be fully connected.

634
00:40:13,420 --> 00:40:17,340
 This guy happens to be 5 away from something.

635
00:40:17,340 --> 00:40:20,900
 But because it's missing the other pairwise distances,

636
00:40:20,900 --> 00:40:25,420
 it can't possibly be an element of my object.

637
00:40:25,420 --> 00:40:28,620
 So the expensive version of this,

638
00:40:28,620 --> 00:40:32,500
 in an NP-hard kind of sense, is to try to find the largest

639
00:40:32,500 --> 00:40:36,460
 clique of the graph.

640
00:40:36,460 --> 00:40:42,700
 Now, depending on exactly what your point cloud looks like,

641
00:40:42,700 --> 00:40:46,300
 they talk about in the paper actually using max clique.

642
00:40:46,300 --> 00:40:49,380
 I think, depending on the numbers of points flying

643
00:40:49,380 --> 00:40:51,000
 around, that's a hard argument to make.

644
00:40:51,000 --> 00:41:00,420
 But let's look for large cliques in the graph.

645
00:41:00,420 --> 00:41:04,580
 Now, that is a computationally hard problem.

646
00:41:04,580 --> 00:41:07,300
 But there are approximations that

647
00:41:07,300 --> 00:41:11,860
 can find at least-- allow us to discard

648
00:41:11,860 --> 00:41:14,420
 large numbers of points that don't exist in a clique

649
00:41:14,420 --> 00:41:15,660
 over some size, for instance.

650
00:41:16,260 --> 00:41:16,760
 OK.

651
00:41:44,700 --> 00:41:46,140
 Kind of a neat idea, right?

652
00:41:46,140 --> 00:41:49,300
 Without having any notion of the pose whatsoever,

653
00:41:49,300 --> 00:41:52,620
 or the position, I can just look at pairs of points

654
00:41:52,620 --> 00:41:55,120
 and reject a bunch of things that couldn't possibly match.

655
00:41:55,120 --> 00:41:59,900
 Now, I actually don't fully know.

656
00:41:59,900 --> 00:42:05,540
 My mind is not made up about how powerful this is in practice.

657
00:42:05,540 --> 00:42:14,380
 Luca, I think, is extremely positive about it.

658
00:42:14,380 --> 00:42:15,660
 I think-- and I believe him.

659
00:42:15,660 --> 00:42:18,900
 I think he's-- so, you know.

660
00:42:18,900 --> 00:42:20,580
 But here's the question I have, right?

661
00:42:20,580 --> 00:42:22,540
 So I think I have-- there's no doubt in my mind

662
00:42:22,540 --> 00:42:24,700
 that if you have an existing point

663
00:42:24,700 --> 00:42:27,300
 cloud, like a perfect point cloud,

664
00:42:27,300 --> 00:42:31,180
 you perturb that point cloud with its exact 3, 4, 5

665
00:42:31,180 --> 00:42:34,220
 kind of numbers, and you add a bunch of outliers,

666
00:42:34,220 --> 00:42:36,420
 and you try to recover it, I think

667
00:42:36,420 --> 00:42:38,940
 it would work extremely well in that case.

668
00:42:38,940 --> 00:42:41,220
 If I have a box, and I'm approximating it

669
00:42:41,220 --> 00:42:43,380
 with whatever returns I get, and I'm

670
00:42:43,380 --> 00:42:48,340
 going to have all kinds of distances that are like--

671
00:42:48,340 --> 00:42:49,380
 anything, it could be--

672
00:42:49,380 --> 00:42:52,300
 I could have-- this is the case I'm worried about,

673
00:42:52,300 --> 00:42:54,220
 is that I've got my nice box, but I'm actually

674
00:42:54,220 --> 00:42:57,540
 getting sample returns like this, right?

675
00:42:57,540 --> 00:43:01,100
 So in some sense, the only thing I really know

676
00:43:01,100 --> 00:43:12,060
 is that my-- I kind of know it's going to be less than 5,

677
00:43:12,060 --> 00:43:14,140
 but probably it's going to be greater

678
00:43:14,140 --> 00:43:17,420
 than my minimum resolution of my camera and less than 5.

679
00:43:17,420 --> 00:43:22,660
 So if you have this weaker version, where you can't

680
00:43:22,660 --> 00:43:25,140
 really expect these to match perfectly,

681
00:43:25,140 --> 00:43:28,820
 or some noise threshold or whatever, I just don't know.

682
00:43:28,820 --> 00:43:30,460
 I mean, how far--

683
00:43:30,460 --> 00:43:31,820
 I mean, we've run the algorithm.

684
00:43:31,820 --> 00:43:33,380
 I've seen some results.

685
00:43:33,380 --> 00:43:35,940
 But I think this would be a great project.

686
00:43:35,940 --> 00:43:37,400
 This would be a great final project,

687
00:43:37,400 --> 00:43:39,260
 would be to dig in and understand,

688
00:43:39,260 --> 00:43:45,140
 in the same teaser, in some of these kind of settings,

689
00:43:45,140 --> 00:43:49,700
 how effective is that clique reduction for real--

690
00:43:49,700 --> 00:43:51,740
 for point clouds that come out of simulation,

691
00:43:51,740 --> 00:43:53,940
 where you just throw a CAD model in?

692
00:43:53,940 --> 00:43:55,940
 That's a great question.

693
00:43:55,940 --> 00:43:56,820
 What do you think?

694
00:43:56,820 --> 00:43:57,300
 [INAUDIBLE]

695
00:43:58,300 --> 00:44:02,260
 Like, can you even expect a pairwise [INAUDIBLE]

696
00:44:02,260 --> 00:44:05,260
 sort of similar in the first camera world

697
00:44:05,260 --> 00:44:06,740
 or in the model world?

698
00:44:06,740 --> 00:44:08,740
 Like, what if it's like scaled faster?

699
00:44:08,740 --> 00:44:11,220
 [INAUDIBLE]

700
00:44:11,220 --> 00:44:11,740
 Awesome.

701
00:44:11,740 --> 00:44:15,740
 OK, so the question was about the camera world

702
00:44:15,740 --> 00:44:18,860
 and the original world might have other artifacts.

703
00:44:18,860 --> 00:44:21,780
 I mean, the camera might have a little bit of distortion.

704
00:44:21,780 --> 00:44:23,740
 There could be some scaling effects.

705
00:44:23,740 --> 00:44:26,660
 Scaling actually can be treated very nicely

706
00:44:26,660 --> 00:44:27,660
 in the same kind of way.

707
00:44:27,660 --> 00:44:30,700
 So there are similarly metrics.

708
00:44:30,700 --> 00:44:35,860
 There are things like the pairwise distance effects,

709
00:44:35,860 --> 00:44:42,460
 just take the squared away, that you can figure out

710
00:44:42,460 --> 00:44:46,540
 the scale without solving for the translation and rotation

711
00:44:46,540 --> 00:44:48,540
 using similar ideas.

712
00:44:48,540 --> 00:44:52,220
 Scale, they address nicely in the teaser paper, for instance.

713
00:44:52,220 --> 00:44:53,940
 Distortions and things like that,

714
00:44:53,940 --> 00:44:57,340
 I think you've got to just calibrate your camera.

715
00:44:57,340 --> 00:44:59,500
 That one's going to be bad.

716
00:44:59,500 --> 00:45:01,860
 Do something to get rid of that, because that's always

717
00:45:01,860 --> 00:45:04,020
 going to screw things up.

718
00:45:04,020 --> 00:45:05,580
 But you're right that those do exist,

719
00:45:05,580 --> 00:45:07,980
 and they can affect your point clouds,

720
00:45:07,980 --> 00:45:11,780
 especially if you have like a--

721
00:45:11,780 --> 00:45:13,220
 people will knock into your camera,

722
00:45:13,220 --> 00:45:16,340
 or your robot ran into a wall, and now it's

723
00:45:16,340 --> 00:45:18,260
 camera's a little bit off or whatever.

724
00:45:18,260 --> 00:45:20,580
 These things really do happen.

725
00:45:20,580 --> 00:45:21,080
 Yeah?

726
00:45:21,080 --> 00:45:41,540
 [INAUDIBLE]

727
00:45:41,540 --> 00:45:42,300
 Awesome.

728
00:45:42,300 --> 00:45:43,940
 So let me repeat the question.

729
00:45:43,940 --> 00:45:46,180
 So what if I had an occlusion?

730
00:45:46,180 --> 00:45:48,780
 Somehow this box was in front of me,

731
00:45:48,780 --> 00:45:50,500
 so I didn't get all these points.

732
00:45:50,500 --> 00:45:51,660
 I just got the partial view.

733
00:45:51,660 --> 00:45:58,740
 So if my camera is over here, I might have only

734
00:45:58,740 --> 00:46:01,140
 gotten these views, but not the ones

735
00:46:01,140 --> 00:46:04,940
 that were occluded by that box.

736
00:46:04,940 --> 00:46:10,500
 So I think this step is robust to that, in my mind.

737
00:46:10,500 --> 00:46:15,660
 It would basically-- so this is only excluding outliers.

738
00:46:15,660 --> 00:46:16,900
 So it's not going to--

739
00:46:16,900 --> 00:46:19,980
 in the later step, you've got just your inliers,

740
00:46:19,980 --> 00:46:21,900
 and you're going to do your pose estimation.

741
00:46:21,900 --> 00:46:24,700
 Now you have less points to do your pose estimation.

742
00:46:24,700 --> 00:46:28,580
 But I don't think this step would falsely

743
00:46:28,580 --> 00:46:30,580
 discard any points.

744
00:46:30,580 --> 00:46:34,380
 There might be-- you'll get some returns maybe on this front box.

745
00:46:34,380 --> 00:46:36,780
 If they don't match any of the expected distances,

746
00:46:36,780 --> 00:46:40,140
 they might even be discarded in a nice way.

747
00:46:40,140 --> 00:46:42,080
 But I would think the hazard there

748
00:46:42,080 --> 00:46:44,340
 is just that you have less points left,

749
00:46:44,340 --> 00:46:46,640
 rather than this would discard them artificially.

750
00:46:46,640 --> 00:46:47,640
 Yeah?

751
00:46:47,640 --> 00:46:58,120
 How many points do you expect to have [INAUDIBLE]??

752
00:46:58,120 --> 00:46:59,480
 That's a super good question.

753
00:46:59,480 --> 00:47:02,080
 So the question was, how many points do we expect to have?

754
00:47:02,080 --> 00:47:07,320
 So I think some of the initial point registration literature,

755
00:47:07,320 --> 00:47:09,800
 it was not that many points.

756
00:47:09,800 --> 00:47:11,680
 And then there's people that are trying

757
00:47:11,680 --> 00:47:14,240
 to apply it to big, raw point clouds that are coming straight

758
00:47:14,240 --> 00:47:15,340
 off the camera.

759
00:47:15,340 --> 00:47:18,520
 And I think some of the algorithms will scale to that.

760
00:47:18,520 --> 00:47:20,920
 Oftentimes, hidden inside the algorithm,

761
00:47:20,920 --> 00:47:24,160
 you'll see a subsampling step, where they're actually

762
00:47:24,160 --> 00:47:27,600
 using a small subset of the dense clouds.

763
00:47:27,600 --> 00:47:29,080
 And that can work.

764
00:47:29,080 --> 00:47:32,360
 In fact, I think the teaser picture I have here--

765
00:47:32,360 --> 00:47:36,440
 by the way, everybody uses that bunny.

766
00:47:36,440 --> 00:47:38,120
 Every paper I was looking at today,

767
00:47:38,120 --> 00:47:40,240
 there's at least one picture with a Stanford bunny.

768
00:47:40,240 --> 00:47:45,000
 So I'm going to have a series of pictures from bunnies here.

769
00:47:45,000 --> 00:47:48,480
 Oh, I didn't pick the one that had the--

770
00:47:48,480 --> 00:47:49,280
 did I?

771
00:47:49,280 --> 00:47:51,160
 No, I didn't pick the one that had this.

772
00:47:51,160 --> 00:47:53,120
 But oftentimes, if your algorithm

773
00:47:53,120 --> 00:47:58,000
 can't cope with the fully dense, then you'll just subsample.

774
00:47:58,000 --> 00:48:02,960
 And it tends to be fewer than you might think.

775
00:48:02,960 --> 00:48:03,920
 Yeah?

776
00:48:03,920 --> 00:48:04,400
 [INAUDIBLE]

777
00:48:04,400 --> 00:48:07,360
 If there's a lot of pairs of points,

778
00:48:07,360 --> 00:48:09,360
 then you can basically expect the distances

779
00:48:09,360 --> 00:48:14,360
 to have to be somewhat filling an entire range of what

780
00:48:14,360 --> 00:48:16,840
 the minimum distance is in the maximum distance.

781
00:48:16,840 --> 00:48:20,800
 And then if you also have some sort of [INAUDIBLE]

782
00:48:20,800 --> 00:48:22,800
 in terms of your period, then it's

783
00:48:22,800 --> 00:48:26,320
 basically any pairs of points that are within the certain

784
00:48:26,320 --> 00:48:29,280
 minimax are going to be [INAUDIBLE]

785
00:48:29,280 --> 00:48:32,600
 The question is, if you start having dense point clouds,

786
00:48:32,600 --> 00:48:35,160
 then don't you have pairs of points that are arbitrarily

787
00:48:35,160 --> 00:48:37,240
 close?

788
00:48:37,240 --> 00:48:41,480
 Yeah, so I think this is like noise floor almost zero.

789
00:48:41,480 --> 00:48:45,360
 This is what I worry about, is that if it really only tells me

790
00:48:45,360 --> 00:48:47,440
 a maximum distance, then it could

791
00:48:47,440 --> 00:48:50,280
 match the drill and the bucket and the whatever.

792
00:48:50,280 --> 00:48:53,000
 Everything that's roughly drill-sized could match.

793
00:48:53,000 --> 00:48:54,700
 And if you have a dense, cluttered scene

794
00:48:54,700 --> 00:48:56,640
 of similar objects, I would guess this heuristic

795
00:48:56,640 --> 00:48:57,720
 doesn't buy you as much.

796
00:48:57,720 --> 00:49:00,800
 It might form multiple cliques that

797
00:49:00,800 --> 00:49:03,800
 are all reasonable things to start searching for.

798
00:49:03,800 --> 00:49:05,600
 And that would be interesting to explore.

799
00:49:05,600 --> 00:49:08,080
 But I think as a global metric to find the biggest clique

800
00:49:08,080 --> 00:49:09,960
 or whatever, I feel like it's not as popular.

801
00:49:09,960 --> 00:49:12,120
 That would be my understanding without having

802
00:49:12,120 --> 00:49:15,240
 explored it deeply, waiting for someone's project to do it,

803
00:49:15,240 --> 00:49:15,800
 let's say.

804
00:49:15,800 --> 00:49:16,300
 Yes, Joe?

805
00:49:16,300 --> 00:49:19,280
 For the messy version of the algorithm,

806
00:49:19,280 --> 00:49:20,760
 is it productive to think about this

807
00:49:20,760 --> 00:49:23,240
 as like you have some sort of empirical probability

808
00:49:23,240 --> 00:49:26,240
 distribution on [INAUDIBLE] and you're

809
00:49:26,240 --> 00:49:31,680
 trying to match that by combining some [INAUDIBLE]

810
00:49:31,680 --> 00:49:33,560
 or is that a non-good [INAUDIBLE]??

811
00:49:33,560 --> 00:49:35,080
 Oh, I think that's probably an excellent way

812
00:49:35,080 --> 00:49:35,840
 to think about it.

813
00:49:35,840 --> 00:49:39,800
 So his question was, is there maybe a probabilistic way

814
00:49:39,800 --> 00:49:42,000
 to think about this, that you have some distribution

815
00:49:42,000 --> 00:49:46,760
 of possible pairwise distances, and you're trying to--

816
00:49:46,760 --> 00:49:49,440
 even the-- you'd like the statistics

817
00:49:49,440 --> 00:49:50,940
 of that distribution, for instance,

818
00:49:50,940 --> 00:49:53,280
 I think is what you're getting at to match your--

819
00:49:53,280 --> 00:49:56,600
 so I think that's an excellent way to think about that.

820
00:49:56,600 --> 00:49:59,600
 So this clique idea would be like a brute force version

821
00:49:59,600 --> 00:50:00,100
 of that.

822
00:50:00,100 --> 00:50:02,220
 And I think the probabilistic version would probably

823
00:50:02,220 --> 00:50:04,640
 be a softer statistical version of that, which

824
00:50:04,640 --> 00:50:08,640
 could be a very nice relaxation to make these NP-hard problems

825
00:50:08,640 --> 00:50:09,720
 less NP-hard.

826
00:50:09,720 --> 00:50:14,560
 So the idea of pairwise distances

827
00:50:14,560 --> 00:50:16,100
 has been around for a long time.

828
00:50:16,100 --> 00:50:18,100
 And there's lots of papers and computer graphics and the like

829
00:50:18,100 --> 00:50:19,800
 that have used it.

830
00:50:19,800 --> 00:50:22,560
 I'm guessing people have looked at it from that lens.

831
00:50:22,560 --> 00:50:23,840
 I can't think of one off the top of my head,

832
00:50:23,840 --> 00:50:25,320
 but I'm guessing that's--

833
00:50:25,320 --> 00:50:27,020
 so Justin Solomon teaches a great course

834
00:50:27,020 --> 00:50:28,600
 on computational geometry.

835
00:50:28,600 --> 00:50:31,080
 And he's done a lot of work in this over the last 10 years

836
00:50:31,080 --> 00:50:31,580
 or so.

837
00:50:31,580 --> 00:50:37,240
 But that's a great idea.

838
00:50:37,240 --> 00:50:39,600
 In fact, it leads in nicely to the next thing.

839
00:50:39,600 --> 00:50:47,880
 So let me just make sure that the story arc of the lectures

840
00:50:47,880 --> 00:50:48,560
 is good, right?

841
00:50:48,560 --> 00:50:52,920
 So we talked about more messy point clouds, the scene

842
00:50:52,920 --> 00:50:54,520
 versus model and the point to mesh.

843
00:50:54,520 --> 00:50:55,940
 And then we started talking about,

844
00:50:55,940 --> 00:50:58,520
 how do we actually reject outliers?

845
00:50:58,520 --> 00:51:01,120
 And in the hard case, pairwise distance

846
00:51:01,120 --> 00:51:05,120
 is a nice example of a geometrically inspired algorithm

847
00:51:05,120 --> 00:51:06,080
 that can do this.

848
00:51:06,080 --> 00:51:09,480
 And it's one of many examples, but it's one I think

849
00:51:09,480 --> 00:51:12,320
 is particularly insightful.

850
00:51:12,320 --> 00:51:14,900
 OK, but I think there's another way

851
00:51:14,900 --> 00:51:19,000
 to be more robust to messy point clouds, which

852
00:51:19,000 --> 00:51:20,120
 is to relax a little bit.

853
00:51:20,120 --> 00:51:22,520
 And not so different from Charles's question there

854
00:51:22,520 --> 00:51:25,280
 is to relax a little bit this super rigid notion

855
00:51:25,280 --> 00:51:26,040
 of correspondence.

856
00:51:26,040 --> 00:51:29,920
 Like this point corresponds to this point, period, right?

857
00:51:29,920 --> 00:51:32,520
 And it does not correspond to anything else or whatever.

858
00:51:32,520 --> 00:51:36,880
 So how do we slightly relax that notion of correspondence?

859
00:51:36,880 --> 00:51:46,140
 And how do we continue to flex our little optimization

860
00:51:46,140 --> 00:51:46,640
 toolkit?

861
00:51:46,640 --> 00:52:02,580
 So let's think about how do we generalize and make

862
00:52:02,580 --> 00:52:05,300
 softer versions of the correspondence.

863
00:52:05,300 --> 00:52:08,720
 [WRITING ON BOARD]

864
00:52:08,720 --> 00:52:20,880
 So far-- let me just use the shorthand here.

865
00:52:20,880 --> 00:52:26,440
 We've done P of O, M, or P i.

866
00:52:34,040 --> 00:52:36,240
 I guess I should have made one point early on, right?

867
00:52:36,240 --> 00:52:41,920
 So if I do switch this to be M and this to be S,

868
00:52:41,920 --> 00:52:46,120
 if I do switch this, that's not a big deal, right?

869
00:52:46,120 --> 00:52:47,960
 But what is it geometrically?

870
00:52:47,960 --> 00:52:50,000
 So algebraically, it doesn't look like a big deal.

871
00:52:50,000 --> 00:52:51,320
 I just move my decision variables

872
00:52:51,320 --> 00:52:52,920
 over to this side of the equation.

873
00:52:52,920 --> 00:52:55,440
 The math should still work, right?

874
00:52:55,440 --> 00:52:57,640
 What does it correspond to in terms of my frames?

875
00:52:57,640 --> 00:53:01,540
 Yeah?

876
00:53:01,540 --> 00:53:03,160
 [INAUDIBLE]

877
00:53:03,160 --> 00:53:04,560
 You get the inverse frame, right?

878
00:53:04,560 --> 00:53:07,920
 So geometrically, the version I've written here

879
00:53:07,920 --> 00:53:11,240
 is I'm taking my scene points and trying to--

880
00:53:11,240 --> 00:53:12,680
 sorry, I'm taking my model points

881
00:53:12,680 --> 00:53:14,520
 and trying to put them in world coordinates

882
00:53:14,520 --> 00:53:16,600
 so they match the scene points.

883
00:53:16,600 --> 00:53:19,440
 If I were to put the x over here, what I'm trying to do

884
00:53:19,440 --> 00:53:21,800
 is I'm trying to take my scene points

885
00:53:21,800 --> 00:53:25,200
 and warp them into my model coordinates.

886
00:53:25,200 --> 00:53:27,480
 So the difference is am I going--

887
00:53:27,480 --> 00:53:32,640
 am I trying to solve xow or am I trying to solve--

888
00:53:32,640 --> 00:53:39,040
 I said ow thinking that way, but yeah.

889
00:53:39,040 --> 00:53:41,240
 It's just the difference of which frame

890
00:53:41,240 --> 00:53:42,480
 you're doing the matching in.

891
00:53:42,480 --> 00:53:43,040
 And it doesn't matter.

892
00:53:43,040 --> 00:53:44,240
 You can do it in the object coordinates

893
00:53:44,240 --> 00:53:47,120
 or you can do it in the world coordinates.

894
00:53:47,120 --> 00:53:48,280
 So either one of those is OK.

895
00:53:48,280 --> 00:53:54,120
 But so far, our correspondence has entered the equations here,

896
00:53:54,120 --> 00:53:54,620
 right?

897
00:53:55,620 --> 00:54:01,740
 And that's a pretty limited way.

898
00:54:01,740 --> 00:54:04,020
 There's like-- that's just an integer

899
00:54:04,020 --> 00:54:06,980
 in an index of the data I'm putting into this equation.

900
00:54:06,980 --> 00:54:11,500
 There's not a way for me to make that less integer, right?

901
00:54:11,500 --> 00:54:13,620
 The way it's written right now.

902
00:54:13,620 --> 00:54:19,740
 So because this means that ci has to be j and only j and not

903
00:54:19,740 --> 00:54:22,580
 something else.

904
00:54:22,580 --> 00:54:24,000
 So let's write a different version

905
00:54:24,000 --> 00:54:26,500
 of this optimization that's just a little bit more flexible.

906
00:54:26,500 --> 00:54:29,900
 And then we can soften things, right?

907
00:54:29,900 --> 00:54:42,300
 So let's make a correspondence matrix where ci, j--

908
00:54:42,300 --> 00:54:45,460
 if we want to write the exact same rigid correspondence,

909
00:54:45,460 --> 00:54:47,860
 we could do something like this, right?

910
00:54:47,860 --> 00:54:59,460
 We say ci, j is 1 if i corresponds to j or 0 otherwise.

911
00:54:59,460 --> 00:55:12,380
 And then if I were to write this same objective as--

912
00:55:12,380 --> 00:55:15,020
 I mean, this I should have be--

913
00:55:15,020 --> 00:55:18,780
 this way I was summing over just the i's before.

914
00:55:18,780 --> 00:55:23,900
 Now I'll sum over both i and j.

915
00:55:23,900 --> 00:55:27,780
 I'll do my same objective now.

916
00:55:27,780 --> 00:55:42,660
 But I'll turn off all the ones that don't correspond.

917
00:55:42,660 --> 00:55:45,180
 I'll just multiply by 0 all the ones

918
00:55:45,180 --> 00:55:47,100
 that I don't consider to be corresponding.

919
00:55:47,100 --> 00:56:01,700
 Do we agree that algebraically or mathematically

920
00:56:01,700 --> 00:56:02,700
 that's the same as this?

921
00:56:02,700 --> 00:56:12,180
 This one, though, as you can see,

922
00:56:12,180 --> 00:56:15,660
 we could start being more flexible with our decision

923
00:56:15,660 --> 00:56:17,100
 about what's corresponding.

924
00:56:17,100 --> 00:56:19,580
 I could have some points that are--

925
00:56:19,580 --> 00:56:22,060
 I could have entire rows or columns of j

926
00:56:22,060 --> 00:56:24,640
 that are completely 0 if I want to have something that doesn't

927
00:56:24,640 --> 00:56:26,700
 correspond to anything.

928
00:56:26,700 --> 00:56:30,300
 Or I could even have multiple points from my model

929
00:56:30,300 --> 00:56:32,700
 correspond to my scene, or multiple points in my scene

930
00:56:32,700 --> 00:56:34,540
 correspond to my model.

931
00:56:34,540 --> 00:56:37,500
 There's just a lot more flexibility there.

932
00:56:37,500 --> 00:56:42,340
 I can also allow partial correspondences.

933
00:56:42,340 --> 00:56:48,100
 I could say that model point i kind of corresponds

934
00:56:48,100 --> 00:56:49,900
 with scene point j.

935
00:56:49,900 --> 00:56:54,020
 I could set c to be 0.5 or something, or 0.2.

936
00:56:54,020 --> 00:57:04,180
 So I can relax this hard constraint

937
00:57:04,180 --> 00:57:08,660
 to be-- let's say it doesn't even really

938
00:57:08,660 --> 00:57:11,580
 have to stay inside 1, but let's just say it stays inside there.

939
00:57:11,580 --> 00:57:29,260
 Similarly, only match model only matches one scene.

940
00:57:29,260 --> 00:57:33,620
 This looks like a constraint, like the sum over--

941
00:57:33,620 --> 00:57:35,740
 corresponds to-- depends on what I wrote here.

942
00:57:35,740 --> 00:57:40,500
 So if I say model j only corresponds to one scene,

943
00:57:40,500 --> 00:57:50,740
 so this would be sum over i, or model sum over i.

944
00:57:50,740 --> 00:57:54,500
 And if I wanted to say that the scene sum only matches

945
00:57:54,500 --> 00:57:56,420
 one model, I could put a constraint saying

946
00:57:56,420 --> 00:58:00,340
 that the sum of over j had to equal 1,

947
00:58:00,340 --> 00:58:02,260
 just the columns and rows of that.

948
00:58:02,260 --> 00:58:04,340
 But this is a pretty flexible representation.

949
00:58:04,340 --> 00:58:06,700
 I could add constraints to that if I

950
00:58:06,700 --> 00:58:10,020
 want to impose more rigid matching.

951
00:58:10,020 --> 00:58:24,620
 OK, so the same way that ICP goes through and tries

952
00:58:24,620 --> 00:58:27,220
 to compute the correspondences in an outer loop,

953
00:58:27,220 --> 00:58:29,860
 there's another well-known algorithm

954
00:58:29,860 --> 00:58:34,340
 called coherent point drift, CPD, which,

955
00:58:34,340 --> 00:58:38,180
 given my guess of my pose, will go through and compute

956
00:58:38,180 --> 00:58:43,340
 kind of a softer distance to compute these Cij's,

957
00:58:43,340 --> 00:58:48,460
 hold them constant, solve the x, same way we did before.

958
00:58:48,460 --> 00:58:51,940
 And then given x, solve for my Cij's,

959
00:58:51,940 --> 00:58:55,220
 but using just a softer version of that that gives me

960
00:58:55,220 --> 00:58:56,420
 values between 0 and 1.

961
00:58:57,420 --> 00:58:58,420
 OK.

962
00:58:58,580 --> 00:58:59,080
 OK.

963
00:58:59,080 --> 00:59:02,560
 [WHIRRING]

964
00:59:02,560 --> 00:59:05,560
 [CLATTERING]

965
00:59:32,240 --> 00:59:34,760
 So it's still an iterative algorithm.

966
00:59:34,760 --> 00:59:46,960
 It will go through, and given my current x, it will compute Cij.

967
00:59:46,960 --> 00:59:50,160
 And now, coherent point drift, the paper

968
00:59:50,160 --> 00:59:52,960
 is written completely in a Bayesian probabilistic

969
00:59:52,960 --> 00:59:54,000
 framework.

970
00:59:54,000 --> 00:59:55,960
 I'm translating-- I mean, you can write anything

971
00:59:55,960 --> 00:59:58,320
 as a Gaussian, and it's just a quadratic, and vice versa.

972
00:59:58,320 --> 01:00:01,440
 So I've converted it to stay in our notation,

973
01:00:01,440 --> 01:00:03,520
 to look just like the quadratic objectives

974
01:00:03,520 --> 01:00:05,560
 that we know and love.

975
01:00:05,560 --> 01:00:07,760
 But it's all the same.

976
01:00:07,760 --> 01:00:09,880
 You could take any of our quadratic forms

977
01:00:09,880 --> 01:00:13,560
 and give a probabilistic interpretation.

978
01:00:13,560 --> 01:00:17,640
 But because they have a probabilistic interpretation,

979
01:00:17,640 --> 01:00:22,880
 they choose a weighting function to say two points are not just

980
01:00:22,880 --> 01:00:27,080
 the distance, but I'm going to put a Gaussian kernel.

981
01:00:27,080 --> 01:00:32,920
 So I'm going to say that the points are corresponding based

982
01:00:32,920 --> 01:00:36,080
 on a Gaussian kernel that says how close they are to matching.

983
01:00:36,080 --> 01:00:36,560
 OK.

984
01:00:36,560 --> 01:00:43,360
 So I will just pick e to the distance, basically.

985
01:00:43,360 --> 01:01:00,240
 And this is a normalization constant

986
01:01:00,240 --> 01:01:01,400
 to get it all equal to 1.

987
01:01:01,400 --> 01:01:06,960
 OK.

988
01:01:06,960 --> 01:01:08,200
 So what does that look like?

989
01:01:08,200 --> 01:01:10,840
 Instead of in my-- I should make a nice little animation

990
01:01:10,840 --> 01:01:15,400
 of this, too, where I had my animations that

991
01:01:15,400 --> 01:01:25,400
 look like this, if I take one step,

992
01:01:25,400 --> 01:01:27,360
 you see the little green lines there?

993
01:01:27,360 --> 01:01:29,320
 This is actually-- that's a bad case,

994
01:01:29,320 --> 01:01:32,580
 because there's three scene points that

995
01:01:32,580 --> 01:01:37,760
 match to that one blue, but the blue only matches--

996
01:01:37,760 --> 01:01:39,980
 each scene point only matches to one blue.

997
01:01:39,980 --> 01:01:42,480
 Now, think of it as having a little Gaussian

998
01:01:42,480 --> 01:01:43,880
 around each of the points.

999
01:01:43,880 --> 01:01:44,640
 OK.

1000
01:01:44,640 --> 01:01:46,140
 And based on the distance, I'm going

1001
01:01:46,140 --> 01:01:48,240
 to score all of them, all of my neighbors,

1002
01:01:48,240 --> 01:01:52,280
 as having some weight of correspondence that drops off

1003
01:01:52,280 --> 01:01:55,000
 in the shape of a Gaussian.

1004
01:01:55,000 --> 01:01:57,720
 Now, why is that more robust, potentially?

1005
01:01:57,720 --> 01:01:59,680
 The word on the street is that it's more robust.

1006
01:01:59,680 --> 01:02:02,400
 It tends to be more robust to outliers and everything.

1007
01:02:02,400 --> 01:02:07,120
 First of all, the fact that it tails off nicely, right?

1008
01:02:07,120 --> 01:02:08,600
 It's not just any arbitrary distance.

1009
01:02:08,600 --> 01:02:12,200
 It's got an explicit tail, where the points that are far away

1010
01:02:12,200 --> 01:02:16,240
 get zero correspondence, turning towards zero correspondence.

1011
01:02:16,240 --> 01:02:18,480
 OK.

1012
01:02:18,480 --> 01:02:20,480
 And it's a softer correspondence.

1013
01:02:20,480 --> 01:02:22,820
 It doesn't have to have exactly a one-to-one matching when

1014
01:02:22,820 --> 01:02:24,360
 that's an artificial thing, right?

1015
01:02:24,360 --> 01:02:27,720
 So you're matching-- you can match up between two points

1016
01:02:27,720 --> 01:02:30,000
 if you're just getting a different sample returns.

1017
01:02:30,000 --> 01:02:31,760
 There's lots of reasons, maybe, to believe

1018
01:02:31,760 --> 01:02:35,880
 that this is a slightly more robust version of the algorithm.

1019
01:02:35,880 --> 01:02:37,720
 Because of the probabilistic interpretation,

1020
01:02:37,720 --> 01:02:42,240
 they even have a way to schedule the covariance, right?

1021
01:02:42,240 --> 01:02:44,360
 So you can look at your current fit

1022
01:02:44,360 --> 01:02:46,360
 and tighten your covariance estimate

1023
01:02:46,360 --> 01:02:51,200
 so that you're dialing in and converging to a good solution.

1024
01:02:51,200 --> 01:02:51,700
 OK.

1025
01:02:58,320 --> 01:03:00,400
 So this-- oops.

1026
01:03:00,400 --> 01:03:08,840
 This paper also has bunnies all over the place.

1027
01:03:08,840 --> 01:03:12,920
 Like, figures 1 through 6 are all bunnies, Stanford bunny.

1028
01:03:12,920 --> 01:03:17,480
 And some people have been at Stanford before, right?

1029
01:03:17,480 --> 01:03:19,880
 When you go running around Stanford,

1030
01:03:19,880 --> 01:03:21,520
 the bunnies don't look like that, right?

1031
01:03:21,520 --> 01:03:22,120
 They're hares.

1032
01:03:22,120 --> 01:03:23,920
 They're like these big jackrabbits things.

1033
01:03:23,920 --> 01:03:27,400
 So it's kind of funny that they have a New England

1034
01:03:27,400 --> 01:03:30,680
 bunny or something that's the Stanford bunny.

1035
01:03:30,680 --> 01:03:33,440
 Anyhow, bunnies everywhere.

1036
01:03:33,440 --> 01:03:38,320
 And the evidence in the paper and the, I'd say,

1037
01:03:38,320 --> 01:03:40,280
 consistent feedback from the community

1038
01:03:40,280 --> 01:03:44,080
 is that these algorithms tend to be more robust to outliers

1039
01:03:44,080 --> 01:03:47,480
 and noise in this, especially in the local convergence sense.

1040
01:03:47,480 --> 01:03:49,360
 The downside is that they tend to be much more

1041
01:03:49,360 --> 01:03:50,480
 expensive to compute.

1042
01:03:50,480 --> 01:03:54,840
 You're looping through a lot more pairs of points,

1043
01:03:54,840 --> 01:03:57,000
 as opposed to just picking for every scene point,

1044
01:03:57,000 --> 01:03:59,240
 you just compute the distance for one.

1045
01:03:59,240 --> 01:04:02,600
 Somehow you're computing this thing

1046
01:04:02,600 --> 01:04:04,440
 for every possible pair of points,

1047
01:04:04,440 --> 01:04:08,560
 and you're using it in your posed estimation

1048
01:04:08,560 --> 01:04:10,360
 update, a lot more terms.

1049
01:04:10,360 --> 01:04:20,320
 Wei Gao, who was a student with me not too long ago,

1050
01:04:20,320 --> 01:04:23,400
 had a version of it that observed

1051
01:04:23,400 --> 01:04:25,880
 that if you flip some of the terms around,

1052
01:04:25,880 --> 01:04:28,040
 you can actually get a lot of the performance back.

1053
01:04:28,040 --> 01:04:30,760
 And he has a CPD-like algorithm called

1054
01:04:30,760 --> 01:04:34,760
 FilterReg that was a lot faster.

1055
01:04:34,760 --> 01:04:40,320
 So CPD tends to be pretty slow but robust.

1056
01:04:40,320 --> 01:04:44,040
 He had a version that was pretty fast and pretty robust.

1057
01:04:44,040 --> 01:04:52,320
 Does that general idea of softening the correspondences

1058
01:04:52,320 --> 01:04:52,820
 make sense?

1059
01:04:52,820 --> 01:04:53,320
 No.

1060
01:04:53,320 --> 01:05:01,340
 I feel that a lot of people get confused about CPD,

1061
01:05:01,340 --> 01:05:02,880
 because the notation is so different.

1062
01:05:02,880 --> 01:05:07,140
 But really, it's just that.

1063
01:05:07,140 --> 01:05:09,580
 But if I think about that equation there--

1064
01:05:09,580 --> 01:05:10,540
 I'll pull it back down.

1065
01:05:10,540 --> 01:05:17,420
 I've been sort of preaching this make good choices,

1066
01:05:17,420 --> 01:05:20,020
 I guess I said.

1067
01:05:20,020 --> 01:05:22,700
 Did we make a good choice here?

1068
01:05:22,700 --> 01:05:24,260
 It's fine for this implementation,

1069
01:05:24,260 --> 01:05:28,740
 because we alternate between picking Cij and then

1070
01:05:28,740 --> 01:05:30,540
 solving for the pose or whatever.

1071
01:05:30,540 --> 01:05:33,300
 But what immediately jumps out to me

1072
01:05:33,300 --> 01:05:36,660
 is that if I wanted to try to optimize C and x

1073
01:05:36,660 --> 01:05:40,140
 at the same time, this gets me at least closer

1074
01:05:40,140 --> 01:05:41,680
 to thinking about how I would do this.

1075
01:05:41,680 --> 01:05:44,300
 There's two sets of decision variables

1076
01:05:44,300 --> 01:05:45,420
 that look kind of similar.

1077
01:05:45,420 --> 01:05:48,140
 I could potentially throw them into a solver.

1078
01:05:48,140 --> 01:05:50,940
 But those things are being multiplied together.

1079
01:05:50,940 --> 01:05:55,300
 So I'd have a term that would be quadratic in my terms

1080
01:05:55,300 --> 01:05:57,820
 inside here, but multiply it again

1081
01:05:57,820 --> 01:05:59,900
 by this set of decision variables

1082
01:05:59,900 --> 01:06:02,260
 if I wanted to solve them jointly.

1083
01:06:02,260 --> 01:06:06,340
 So that's not a good choice in terms of global optimization.

1084
01:06:06,340 --> 01:06:09,860
 For the CPD, it's great.

1085
01:06:09,860 --> 01:06:14,980
 So let me do one last optimization sort of idea

1086
01:06:14,980 --> 01:06:18,140
 with you here, which would be, how do I massage

1087
01:06:18,140 --> 01:06:23,460
 this equation one more time to try to get the Cij to enter

1088
01:06:23,460 --> 01:06:27,660
 in a better way so that I could do joint optimization

1089
01:06:27,660 --> 01:06:28,340
 on those things?

1090
01:06:28,340 --> 01:06:56,980
, There's a handful of methods

1091
01:06:56,980 --> 01:06:59,860
 that try to solve those problems jointly.

1092
01:06:59,860 --> 01:07:09,940
 Here's one formulation that is the most logical successor,

1093
01:07:09,940 --> 01:07:12,300
 I guess, the closest to that set of equations.

1094
01:07:12,300 --> 01:07:20,460
 Let's try to minimize over P, R, and C all at the same time.

1095
01:07:25,620 --> 01:07:28,340
 And what if I did this?

1096
01:07:28,340 --> 01:07:30,060
 Sum over i again here.

1097
01:07:39,540 --> 01:08:09,500
 We do the Si here, and I'll do M.

1098
01:08:09,500 --> 01:08:26,580
 OK.

1099
01:08:26,580 --> 01:08:31,940
 So flex your optimization muscles for a minute here.

1100
01:08:31,940 --> 01:08:34,660
 So what is this saying?

1101
01:08:34,660 --> 01:08:37,540
 This is saying for every scene point,

1102
01:08:37,540 --> 01:08:40,540
 I want it to, with my correspondence function,

1103
01:08:40,540 --> 01:08:42,460
 match some combination of the model points.

1104
01:08:42,460 --> 01:08:46,260
 Not so different than what we did with the faces.

1105
01:08:46,260 --> 01:08:48,540
 But this is a version of the soft correspondences

1106
01:08:48,540 --> 01:08:50,700
 that you see there, too.

1107
01:08:50,700 --> 01:08:53,780
 You can add hard constraints on Cij,

1108
01:08:53,780 --> 01:08:55,380
 or you can allow them to be more soft.

1109
01:08:55,380 --> 01:09:04,900
 You can ask for them to be one to many match,

1110
01:09:04,900 --> 01:09:08,020
 or many to one match, or in whichever direction

1111
01:09:08,020 --> 01:09:09,100
 with constraints like this.

1112
01:09:09,100 --> 01:09:14,260
 And it fits inside this nice framework.

1113
01:09:14,260 --> 01:09:20,380
 The trick with this and the one that I wrote earlier

1114
01:09:20,380 --> 01:09:22,100
 is that these constraints are still bad.

1115
01:09:22,100 --> 01:09:26,540
 And once I add these other constraints here,

1116
01:09:26,540 --> 01:09:29,420
 you can't just solve the SVD.

1117
01:09:29,420 --> 01:09:30,900
 So there's various ways that people

1118
01:09:30,900 --> 01:09:33,460
 have tried to work with these kind of equations.

1119
01:09:33,460 --> 01:09:36,460
 OK.

1120
01:09:36,460 --> 01:09:44,620
 There's a form of it where you try

1121
01:09:44,620 --> 01:09:48,500
 to stick to binary correspondences.

1122
01:09:48,500 --> 01:09:51,060
 And you can write this whole thing as a mixed integer

1123
01:09:51,060 --> 01:09:51,900
 optimization.

1124
01:09:51,900 --> 01:10:00,460
 Is it good?

1125
01:10:00,460 --> 01:10:01,700
 I forget the relaxation here.

1126
01:10:01,700 --> 01:10:03,300
 Is it still a QP?

1127
01:10:03,300 --> 01:10:05,180
 It's definitely mixed integer convex.

1128
01:10:05,180 --> 01:10:12,180
 OK.

1129
01:10:12,180 --> 01:10:17,700
 There are versions of this that use semi-definite programming.

1130
01:10:17,700 --> 01:10:20,380
 If I don't do this, there's also another version

1131
01:10:20,380 --> 01:10:22,220
 that does semi-definite programming.

1132
01:10:22,220 --> 01:10:29,460
 These are more advanced optimization algorithms,

1133
01:10:29,460 --> 01:10:31,620
 but they're still optimization algorithms

1134
01:10:31,620 --> 01:10:34,940
 that you expect to be able to solve globally.

1135
01:10:34,940 --> 01:10:39,220
 And they require relaxing these constraints a bit

1136
01:10:39,220 --> 01:10:41,820
 to fit them into that framework.

1137
01:10:41,820 --> 01:10:43,820
 And there's various levels of success

1138
01:10:43,820 --> 01:10:45,100
 for those different algorithms.

1139
01:10:45,100 --> 01:10:45,600
 Yeah.

1140
01:10:45,600 --> 01:10:46,100
 [INAUDIBLE]

1141
01:10:46,100 --> 01:10:54,580
 Right.

1142
01:10:54,580 --> 01:10:56,860
 So that's what I was just saying is that it's also not

1143
01:10:56,860 --> 01:10:58,700
 a semi-definite program by itself,

1144
01:10:58,700 --> 01:11:01,420
 but you have to relax this to be-- yeah.

1145
01:11:01,420 --> 01:11:03,860
 Both of these require relaxation.

1146
01:11:03,860 --> 01:11:04,360
 Yeah.

1147
01:11:04,360 --> 01:11:12,700
 We come up with some approximation

1148
01:11:12,700 --> 01:11:15,300
 of those rotation constraints.

1149
01:11:15,300 --> 01:11:16,780
 Yeah.

1150
01:11:16,780 --> 01:11:18,900
 Just make sure I'm super clear about that.

1151
01:11:28,460 --> 01:11:29,700
 And I won't cover the details.

1152
01:11:29,700 --> 01:11:34,580
 I just want to get you to think about that equation

1153
01:11:34,580 --> 01:11:36,620
 a little bit, because it's similar to what we've

1154
01:11:36,620 --> 01:11:37,460
 been thinking about.

1155
01:11:37,460 --> 01:11:38,260
 It's another way.

1156
01:11:38,260 --> 01:11:40,420
 There's this kind of skill that you'll

1157
01:11:40,420 --> 01:11:45,340
 pick up of how do you fit these harder formulations

1158
01:11:45,340 --> 01:11:48,220
 into the same kind of toolkit.

1159
01:11:48,220 --> 01:11:50,580
 This is a good, I think, way to think about that

1160
01:11:50,580 --> 01:11:53,700
 and know that there are papers you can read, if you'd like,

1161
01:11:53,700 --> 01:11:55,660
 to understand the details of how to try to do

1162
01:11:55,660 --> 01:11:57,620
 more global optimization.

1163
01:11:57,620 --> 01:12:01,580
 I'd say I would not call global optimization a technology

1164
01:12:01,580 --> 01:12:02,780
 in really messy point clouds.

1165
01:12:02,780 --> 01:12:04,580
 It's something that people are trying to do.

1166
01:12:04,580 --> 01:12:05,780
 They're often very expensive.

1167
01:12:05,780 --> 01:12:08,380
 They often don't work as well.

1168
01:12:08,380 --> 01:12:12,500
 I mean, Luca is very keen on the teaser semi-definite programming

1169
01:12:12,500 --> 01:12:13,220
 representation.

1170
01:12:13,220 --> 01:12:17,380
 So maybe it's gotten a lot better.

1171
01:12:17,380 --> 01:12:21,980
 The SDP relaxation in teaser and the like,

1172
01:12:21,980 --> 01:12:23,420
 I think the way to think about it,

1173
01:12:23,420 --> 01:12:26,900
 which I mumbled about last time, but it really

1174
01:12:26,900 --> 01:12:34,380
 is 2D is not enough to show the picture that

1175
01:12:34,380 --> 01:12:35,620
 would need to be shown.

1176
01:12:35,620 --> 01:12:39,660
 But I think conceptually, thinking about this optimization

1177
01:12:39,660 --> 01:12:43,140
 problem that we showed before and having that unit circle

1178
01:12:43,140 --> 01:12:47,860
 constraint, saying that a squared plus b squared equals

1179
01:12:47,860 --> 01:12:48,360
 1.

1180
01:12:53,460 --> 01:12:57,060
 And we're going to change that to a squared plus b squared

1181
01:12:57,060 --> 01:12:58,060
 less than or equal to 1.

1182
01:12:58,060 --> 01:13:03,900
 This picture of trying to solve for these things

1183
01:13:03,900 --> 01:13:08,700
 jointly by relaxing the non-convex unit circle

1184
01:13:08,700 --> 01:13:12,460
 constraint to the convex unit disk constraint,

1185
01:13:12,460 --> 01:13:13,860
 that's basically what's happening

1186
01:13:13,860 --> 01:13:16,180
 in these SDP relaxations.

1187
01:13:16,180 --> 01:13:20,020
 So you'll hear people saying things like, well, it's tight.

1188
01:13:20,020 --> 01:13:22,080
 And that's in the case where there's no noise,

1189
01:13:22,080 --> 01:13:25,680
 it's tight because the objective function actually

1190
01:13:25,680 --> 01:13:30,140
 lands right on the unit disk.

1191
01:13:30,140 --> 01:13:32,580
 And if you pull it outside, this constraint

1192
01:13:32,580 --> 01:13:33,700
 will pull it back inside.

1193
01:13:33,700 --> 01:13:37,020
 But if you're inside, it will be loose.

1194
01:13:37,020 --> 01:13:39,300
 So if that's helpful, I know that's--

1195
01:13:39,300 --> 01:13:41,720
 I haven't given you everything you need to appreciate that.

1196
01:13:41,720 --> 01:13:48,500
 But if that is helpful, I hope it helps a few people.

1197
01:13:48,500 --> 01:13:51,620
 So that was today's story about dealing with messy point

1198
01:13:51,620 --> 01:13:54,540
 clouds and about doing a little bit of geometry

1199
01:13:54,540 --> 01:13:55,940
 plus optimization, which I really

1200
01:13:55,940 --> 01:14:00,820
 think is a beautiful combination of those ideas.

1201
01:14:00,820 --> 01:14:03,540
 So we talked about three specific ones.

1202
01:14:03,540 --> 01:14:05,900
 I hope you come away with this point to mesh registration

1203
01:14:05,900 --> 01:14:08,420
 idea, with the pairwise distance idea,

1204
01:14:08,420 --> 01:14:13,060
 that it's a translation and rotation invariant quantity,

1205
01:14:13,060 --> 01:14:16,460
 and this idea of generalizing correspondence to make it soft,

1206
01:14:16,460 --> 01:14:18,700
 paying an increased computational cost,

1207
01:14:18,700 --> 01:14:23,660
 but potentially robust, getting robustness benefits.

1208
01:14:23,660 --> 01:14:25,740
 Good choices, yeah?

1209
01:14:25,740 --> 01:14:28,180
 OK, cool.

1210
01:14:28,180 --> 01:14:30,700
 There's one last big set of ideas

1211
01:14:30,700 --> 01:14:33,420
 that I want to make sure we cover in pose estimation,

1212
01:14:33,420 --> 01:14:35,860
 and we'll do that next Tuesday.

1213
01:14:35,860 --> 01:14:37,900
 Sorry that DeepNote was having troubles this week.

1214
01:14:37,900 --> 01:14:45,460
 They were having, I think, bad actors attacking their servers.

1215
01:14:45,460 --> 01:14:48,180
 They're super responsive, actually.

1216
01:14:48,180 --> 01:14:51,020
 They told me when it happened, and they said,

1217
01:14:51,020 --> 01:14:52,460
 as of last night, it's back up.

1218
01:14:52,460 --> 01:14:55,500
 So if you have any troubles, let me know.

