1
00:00:00,000 --> 00:00:03,840
 So it's motion planning week.

2
00:00:03,840 --> 00:00:06,360
 There's a lot of cool tools in motion planning.

3
00:00:06,360 --> 00:00:10,400
 I think it's a pretty rich and well-developed subject.

4
00:00:10,400 --> 00:00:11,880
 We're breaking it up into two pieces.

5
00:00:11,880 --> 00:00:16,560
 We'll talk about the optimization viewpoint today, and we'll talk about sort of the randomized

6
00:00:16,560 --> 00:00:20,800
 algorithm sampling-based strategies on Thursday.

7
00:00:20,800 --> 00:00:23,240
 Let me just start, though, by talking a little bit about projects.

8
00:00:23,240 --> 00:00:26,560
 We sent a couple of piazza posts about it.

9
00:00:26,560 --> 00:00:33,480
 So I mean, the basic details-- so thank you for submitting the pre-proposals.

10
00:00:33,480 --> 00:00:34,600
 I had a blast reading them.

11
00:00:34,600 --> 00:00:36,000
 I think we all had a blast reading them.

12
00:00:36,000 --> 00:00:40,800
 Some of you guys are really ambitious and wrote really good proposals.

13
00:00:40,800 --> 00:00:42,200
 So thank you for that.

14
00:00:42,200 --> 00:00:46,440
 Please, everybody, do submit again, even if the feedback-- I said this on piazza-- but

15
00:00:46,440 --> 00:00:49,880
 even if the feedback was like, you're good to go, just submit it again so we have the

16
00:00:49,880 --> 00:00:55,560
 one canonical place where everybody's full proposals are.

17
00:00:55,560 --> 00:00:59,880
 And if you do just have to touch up a few things, add a few details for us, then just

18
00:00:59,880 --> 00:01:05,200
 do it with some sort of track changes so we don't read and have to find exactly what you

19
00:01:05,200 --> 00:01:06,960
 changed.

20
00:01:06,960 --> 00:01:11,080
 But I think a lot of them were in very, very good shape.

21
00:01:11,080 --> 00:01:13,880
 We're going to try to support you through that project.

22
00:01:13,880 --> 00:01:16,480
 We're going to turn down the p-sets.

23
00:01:16,480 --> 00:01:18,000
 They're not going to be as heavy now.

24
00:01:18,000 --> 00:01:21,000
 We'll try to be more in project mode.

25
00:01:21,000 --> 00:01:22,800
 We'll be available if you want to ask questions.

26
00:01:22,800 --> 00:01:29,240
 I think certainly on piazza, if you need to reach out to us, please do reach out to us.

27
00:01:29,240 --> 00:01:33,000
 If you have questions about Drake, you can post on the Drake sites too.

28
00:01:33,000 --> 00:01:36,520
 Then you'll have even more people to answer questions.

29
00:01:36,520 --> 00:01:44,200
 Actually, I wanted to make sure that people know something good has happened recently

30
00:01:44,200 --> 00:01:45,200
 in Drake.

31
00:01:45,200 --> 00:01:49,360
 You can actually just pip install Drake now, or apt install Drake.

32
00:01:49,360 --> 00:01:50,520
 That's actually been there for a while.

33
00:01:50,520 --> 00:01:57,400
 But if you decide that DeepNote isn't quite enough for you to do the full debugging that

34
00:01:57,400 --> 00:02:01,240
 you need for your project, and you want to do local installs, we can help you through

35
00:02:01,240 --> 00:02:02,240
 that.

36
00:02:02,240 --> 00:02:05,080
 I think it's gotten easier depending on exactly what platform you're on.

37
00:02:05,080 --> 00:02:09,480
 It could be as easy as pip install Drake, which I'm super excited about.

38
00:02:09,480 --> 00:02:13,900
 That was a long time, a lot of work behind it.

39
00:02:13,900 --> 00:02:18,760
 But in general, I think there's a couple of different workflows you could decide that

40
00:02:18,760 --> 00:02:19,760
 works well.

41
00:02:19,760 --> 00:02:24,680
 I'm more interested to hear if you think DeepNote's exactly the right tool for your

42
00:02:24,680 --> 00:02:25,680
 group project.

43
00:02:25,680 --> 00:02:27,040
 That would be really interesting for me to find out.

44
00:02:27,040 --> 00:02:28,480
 It's kind of built for that.

45
00:02:28,480 --> 00:02:33,520
 But if you like hitting breakpoints and doing all the things you've got in an IDE on your

46
00:02:33,520 --> 00:02:36,600
 desktop, then I could see how it's not quite what you want.

47
00:02:36,600 --> 00:02:39,120
 I'd be very interested to see how you guys decide.

48
00:02:39,120 --> 00:02:40,120
 Yeah?

49
00:02:40,120 --> 00:02:45,640
 If you run locally, does Meshcat work the same way?

50
00:02:45,640 --> 00:02:48,520
 So if you run locally, Meshcat should just work the same way.

51
00:02:48,520 --> 00:02:52,000
 In fact, you'll see if you look carefully today, you'll just say local host instead

52
00:02:52,000 --> 00:02:53,880
 of the DeepNote URL.

53
00:02:53,880 --> 00:02:59,640
 The start Meshcat script checks if you're on DeepNote and does the right thing.

54
00:02:59,640 --> 00:03:04,560
 So, yeah, Meshcat should work everywhere.

55
00:03:04,560 --> 00:03:05,560
 Good.

56
00:03:05,560 --> 00:03:10,960
 Yeah, there's also a bunch of things that -- a few of you got feedback from me, for

57
00:03:10,960 --> 00:03:15,960
 instance, saying like this thing that you would want could work.

58
00:03:15,960 --> 00:03:19,600
 We might have to help you through that, like the writing example I put.

59
00:03:19,600 --> 00:03:24,640
 If some of you wanted to write on paper, there's a lot of things that we kind of have code

60
00:03:24,640 --> 00:03:30,160
 lying around somewhere to do that in the simulation in Drake, and we can help you.

61
00:03:30,160 --> 00:03:35,240
 Someone wanted to throw objects that would require aerodynamics, and that's actually

62
00:03:35,240 --> 00:03:36,240
 not too hard to add in.

63
00:03:36,240 --> 00:03:41,680
 But I'm trying to now -- for me, I'm in the mode where I'm like, let me figure out what

64
00:03:41,680 --> 00:03:46,800
 features people most need and try to knock them off, and so please -- if you think there's

65
00:03:46,800 --> 00:03:50,120
 like something that you really need for your project, you're not sure if it's there or

66
00:03:50,120 --> 00:03:53,760
 not, that's a really good time to ask me and get that on my list, and I'll try to knock

67
00:03:53,760 --> 00:03:57,440
 off as many of them as I can.

68
00:03:57,440 --> 00:04:02,520
 Actually, it was totally random, but a few people were talking about painting or writing

69
00:04:02,520 --> 00:04:07,880
 or wiping or whatever, and almost by accident, you know, Terry in the lab was writing a paper

70
00:04:07,880 --> 00:04:12,360
 he submitted last night, and I come in and he was writing -- like the robot was writing

71
00:04:12,360 --> 00:04:17,360
 in lab last night when he was making this paper and writing this paper.

72
00:04:17,360 --> 00:04:21,720
 He thought that was a good example for his force control with the soft tactile sensors.

73
00:04:21,720 --> 00:04:28,400
 And if you've noticed a lot of robotic videos at MIT, always do something where, you know,

74
00:04:28,400 --> 00:04:32,720
 we've had quadrotors flying at high speeds through obstacles that happen to be shaped

75
00:04:32,720 --> 00:04:33,720
 like MIT.

76
00:04:33,720 --> 00:04:37,820
 We've got like, you know, carrots moving around the table that end up looking in piles like

77
00:04:37,820 --> 00:04:41,480
 MIT, and if you're handwriting, you have to write MIT.

78
00:04:41,480 --> 00:04:44,240
 But that's actually a pretty cool project.

79
00:04:44,240 --> 00:04:49,000
 He's got one of these Puno soft bubble grippers showing that he could do force control just

80
00:04:49,000 --> 00:04:53,880
 by watching the deflection -- by the cameras inside, watching the deflection of the bubbles

81
00:04:53,880 --> 00:04:58,920
 was sufficient to act like either a stiffness or a force control right at the end effector

82
00:04:58,920 --> 00:05:02,600
 without using the KUKA's joint torque sensors.

83
00:05:02,600 --> 00:05:07,800
 So anyways, you know, I think writing is possible.

84
00:05:07,800 --> 00:05:10,680
 Many of you kind of asked or implied that you'd like to get onto hardware.

85
00:05:10,680 --> 00:05:15,960
 I think if you are able to show us in simulation and you're far enough along, we do have robots

86
00:05:15,960 --> 00:05:19,240
 upstairs that I'm willing to try to, you know, let you guys run things.

87
00:05:19,240 --> 00:05:22,560
 Someone wanted to throw darts on the hardware, that one, and I'm a little afraid of, but,

88
00:05:22,560 --> 00:05:25,560
 you know, that's maybe paper airplanes are safer.

89
00:05:25,560 --> 00:05:28,960
 You know, but within reason, you know, if you're not going to break everything, there

90
00:05:28,960 --> 00:05:31,120
 are robots available.

91
00:05:31,120 --> 00:05:37,560
 And the idea is that you really, if you're able to run in simulation, it's almost just,

92
00:05:37,560 --> 00:05:41,960
 you know, pull that one away, put the real robot in and the code works.

93
00:05:41,960 --> 00:05:47,960
 There's a bunch of setup, but the code should actually mostly work.

94
00:05:47,960 --> 00:05:55,760
 Okay, any big questions about, you know, projects, how that's going, administrative parts of

95
00:05:55,760 --> 00:05:56,760
 projects or?

96
00:05:56,760 --> 00:06:05,120
 Oh yeah, we're going to -- we're trying to figure out -- there's a few of us and a lot

97
00:06:05,120 --> 00:06:12,240
 of you, so we're trying to figure out exactly how much we could like require a face-to-face

98
00:06:12,240 --> 00:06:14,960
 check-in because that's, I think, a great way.

99
00:06:14,960 --> 00:06:18,880
 So we're going to do that at least once, you know, we're aiming for the week of November

100
00:06:18,880 --> 00:06:22,720
 15th, which is, you know, before Thanksgiving, you know, enough time for you to get things

101
00:06:22,720 --> 00:06:23,940
 going from now.

102
00:06:23,940 --> 00:06:28,720
 So we're going to try to schedule, we'll put a sign up for you guys to sort of fill in

103
00:06:28,720 --> 00:06:31,360
 and pick a time to sit with us.

104
00:06:31,360 --> 00:06:36,040
 But we're also going to ask little questions on the P-set just to kind of say, you know,

105
00:06:36,040 --> 00:06:39,160
 we'd love to see, you know, can you just give us a snapshot showing you've got your simulator

106
00:06:39,160 --> 00:06:44,600
 working because if you don't have your simulator working, you know, then things start getting,

107
00:06:44,600 --> 00:06:46,400
 you know, late in the term.

108
00:06:46,400 --> 00:06:51,440
 So we'll try to guide you with a few of our survey questions on the P-set, but one big

109
00:06:51,440 --> 00:06:52,440
 check-in.

110
00:06:52,440 --> 00:06:58,720
 So I think that means you should really reach out if you want to, you know, ask more questions

111
00:06:58,720 --> 00:07:03,000
 because I think some of you could benefit from talking more.

112
00:07:03,000 --> 00:07:04,800
 Good.

113
00:07:04,800 --> 00:07:06,920
 Okay.

114
00:07:06,920 --> 00:07:09,200
 So let's talk about motion planning.

115
00:07:09,200 --> 00:07:15,800
 So we've already, you know, we've done the simple version of motion planning where we

116
00:07:15,800 --> 00:07:22,760
 just designed a handful, hand-designed a handful of end-effector configurations.

117
00:07:22,760 --> 00:07:27,480
 You know, we called inverse kinematics maybe, or we found some initial way, actually I guess

118
00:07:27,480 --> 00:07:31,440
 we just took the initial pose of the robot and we just started interpolating with differential

119
00:07:31,440 --> 00:07:35,600
 IK, right, to get down and to move through them.

120
00:07:35,600 --> 00:07:40,200
 And that works fairly well, but as the world, remember the theme is that the world is getting

121
00:07:40,200 --> 00:07:45,240
 more cluttered, more constrained, and we have to think more about both of our perception

122
00:07:45,240 --> 00:07:49,040
 system but also the plans that come out of our robots.

123
00:07:49,040 --> 00:07:56,040
 So today we're going to try to embrace the more rich versions of planning trajectories,

124
00:07:56,040 --> 00:08:01,880
 which is going to be ultimately the goal is to have a trajectory in Q, the joint angles

125
00:08:01,880 --> 00:08:02,880
 of the robot.

126
00:08:02,880 --> 00:08:08,320
 Q is a function of T that is going to satisfy a bunch of constraints, avoiding obstacles,

127
00:08:08,320 --> 00:08:12,280
 reaching to the mug, you know, doing all the, you know, opening the door.

128
00:08:12,280 --> 00:08:13,280
 Okay.

129
00:08:13,280 --> 00:08:20,880
 There's a bunch of tools that will be available for that, but actually a lot of it starts

130
00:08:20,880 --> 00:08:26,200
 with just understanding more deeply the inverse kinematics problem, right.

131
00:08:26,200 --> 00:08:30,680
 So we've talked about inverse kinematics a few times.

132
00:08:30,680 --> 00:08:34,400
 We talked about the differential view of inverse kinematics.

133
00:08:34,400 --> 00:08:39,700
 We've talked about writing optimization problems that would take clutter and try to pull them

134
00:08:39,700 --> 00:08:44,440
 out of penetration, which in some sense is the simple version of the inverse kinematics

135
00:08:44,440 --> 00:08:45,780
 problem.

136
00:08:45,780 --> 00:08:50,500
 But there's a lot more that you can do in this sort of space of writing optimizations

137
00:08:50,500 --> 00:08:52,480
 to solve inverse kinematics.

138
00:08:52,480 --> 00:08:56,080
 And if we understand that and understand some of the geometry that we're up against with

139
00:08:56,080 --> 00:09:01,240
 our solvers, then actually the rest of it follows pretty quickly.

140
00:09:01,240 --> 00:09:04,800
 The trajectory version of that as an optimization follows pretty quickly.

141
00:09:04,800 --> 00:09:09,360
 I think a lot of the work here is understanding what you can do and what's hard to do in the

142
00:09:09,360 --> 00:09:10,920
 kinematics space.

143
00:09:10,920 --> 00:09:12,120
 Okay.

144
00:09:12,120 --> 00:09:26,840
 So let me walk over here.

145
00:09:26,840 --> 00:09:29,120
 So we've talked about it a few different ways, right.

146
00:09:29,120 --> 00:09:36,080
 We said that in general maybe we have a pose of the gripper, which is some forward kinematics

147
00:09:36,080 --> 00:09:41,800
 of our joint angles Q. And of course inverse kinematics would be to try to find some form

148
00:09:41,800 --> 00:09:46,680
 of the inverse map, which may or may not be unique, may or may not have a solution.

149
00:09:46,680 --> 00:09:52,680
 But if we want a function that takes the pose of the end effector in and returns Q.

150
00:09:52,680 --> 00:09:57,920
 Now, this is the simple version of it.

151
00:09:57,920 --> 00:10:05,640
 If we really have just, let's say, one end effector constraint.

152
00:10:05,640 --> 00:10:13,120
 You'll see why I think of it that way in a second.

153
00:10:13,120 --> 00:10:20,880
 Then there's opportunities to do a lot of nice work in trying to invert that mapping.

154
00:10:20,880 --> 00:10:35,440
 In particular, for the standard robot arm, very commonly we have six degree of freedom

155
00:10:35,440 --> 00:10:40,440
 arms or more common than seven degree of freedom arms.

156
00:10:40,440 --> 00:10:46,160
 And the standard sort of just like what we have with the KUKA, there's sort of a standard

157
00:10:46,160 --> 00:10:52,320
 revolute joint up the arm configuration that accounts for a lot of the different arms that

158
00:10:52,320 --> 00:10:53,320
 you can get out there.

159
00:10:53,320 --> 00:10:57,920
 Of course, the exact kinematics, the lengths of the links, the positions of the joints

160
00:10:57,920 --> 00:10:58,920
 are a little bit different.

161
00:10:58,920 --> 00:11:06,480
 But the kinematic topology is very sort of characteristic across a lot of arms.

162
00:11:06,480 --> 00:11:11,120
 So people, of course, have for decades spent a lot of time thinking about the right way

163
00:11:11,120 --> 00:11:14,080
 to solve the inverse kinematics problem.

164
00:11:14,080 --> 00:11:19,720
 There's a special case of six degree of freedom arms where this, if you have six degree of

165
00:11:19,720 --> 00:11:26,120
 freedom arms, then Q lives in R6.

166
00:11:26,120 --> 00:11:31,920
 And we know that there are some parameterizations of pose, row, pitch, yaw, x, y, z that could

167
00:11:31,920 --> 00:11:34,860
 have six numbers.

168
00:11:34,860 --> 00:11:44,680
 And so for the special case of six degrees of freedom, we can actually know that there's

169
00:11:44,680 --> 00:11:48,040
 a finite number of solutions.

170
00:11:48,040 --> 00:12:01,160
 And we can potentially enumerate them all.

171
00:12:01,160 --> 00:12:07,520
 And those solutions can be written in essentially closed form.

172
00:12:07,520 --> 00:12:10,880
 It involves a bunch of trigonometry.

173
00:12:10,880 --> 00:12:18,280
 It's actually really-- the study of kinematics is the study of polynomials, actually.

174
00:12:18,280 --> 00:12:22,000
 You might be surprised to hear that, I guess.

175
00:12:22,000 --> 00:12:32,160
 But we see a lot of like L1 sine theta 1 plus L2 sine theta 1 plus theta 2.

176
00:12:32,160 --> 00:12:36,680
 So you see a bunch of sines and cosines lying around when you write your kinematics.

177
00:12:36,680 --> 00:12:46,320
 If I'm writing like the position of my end effector, it might be something like this.

178
00:12:46,320 --> 00:12:48,280
 So there's a lot of sines and cosines.

179
00:12:48,280 --> 00:12:54,160
 But you can always do a change of variables that turns those into polynomials.

180
00:12:54,160 --> 00:12:58,880
 You can change sine into s and the like.

181
00:12:58,880 --> 00:13:04,720
 And the way maybe to convince you is that really the fundamental idea here is we have

182
00:13:04,720 --> 00:13:10,640
 rigid bodies.

183
00:13:10,640 --> 00:13:20,800
 And the rigid body assumption says that the distance between these points is a constant.

184
00:13:20,800 --> 00:13:29,640
 So P1 minus P2 squared, which is a polynomial in those joints, is some constant.

185
00:13:29,640 --> 00:13:35,400
 The distance constraint is a polynomial constraint.

186
00:13:35,400 --> 00:13:39,840
 And in fact, you can write the fact that if there's two joints and they're connected by

187
00:13:39,840 --> 00:13:46,640
 a revolute joint, then you could write that as an extra constraint saying point P1 on

188
00:13:46,640 --> 00:13:50,200
 link 2 has to be in the same place as point P2 on link 1.

189
00:13:50,200 --> 00:13:53,880
 That can be written as a polynomial constraint.

190
00:13:53,880 --> 00:13:58,720
 So what you end up with when you think about the detailed mathematical solutions of these

191
00:13:58,720 --> 00:14:04,840
 equations, you end up with actually a list of polynomials.

192
00:14:04,840 --> 00:14:09,040
 And the study of this is actually in the study of algebraic geometry, typically numerical

193
00:14:09,040 --> 00:14:16,560
 algebraic geometry, which is the study of basically trying to find the zeros of a bunch

194
00:14:16,560 --> 00:14:20,600
 of polynomials.

195
00:14:20,600 --> 00:14:26,400
 And there are serious tools out there for that, both mathematical tools and numerical

196
00:14:26,400 --> 00:14:29,400
 tools for algebraic geometry.

197
00:14:29,400 --> 00:14:35,320
 And there's a book that I cite in the notes that I just think is awesome, where they have

198
00:14:35,320 --> 00:14:41,600
 effectively closed form solutions for these ridiculous complicated serial chains of four

199
00:14:41,600 --> 00:14:46,000
 bar linkages or Stewart Go platforms, which are the ones that have a bunch of different

200
00:14:46,000 --> 00:14:47,000
 legs on springs.

201
00:14:47,000 --> 00:14:50,080
 And they're all crazy kinematics.

202
00:14:50,080 --> 00:14:55,840
 I actually put one in the slides, I think, here.

203
00:14:55,840 --> 00:14:58,880
 And this is kind of a four bar linkage.

204
00:14:58,880 --> 00:15:05,800
 But if you think about the path that the links follow when you rotate the joints, they follow

205
00:15:05,800 --> 00:15:11,000
 these pretty crazy curves.

206
00:15:11,000 --> 00:15:15,920
 But those curves, because they are the solution to a set of polynomials, you can actually

207
00:15:15,920 --> 00:15:22,400
 do numerical algebraic geometry to solve, even design the kinematics of your manipulators.

208
00:15:22,400 --> 00:15:28,840
 And this was a big aspect of robotics decades ago.

209
00:15:28,840 --> 00:15:33,480
 It's one of the earlier things that people studied carefully in robotics.

210
00:15:33,480 --> 00:15:37,120
 It's really interesting to understand those tools, if anybody cares.

211
00:15:37,120 --> 00:15:42,960
 So I mean, one of the ways that you find-- like the way that this paper finds the zeros

212
00:15:42,960 --> 00:15:49,560
 for a large set of polynomial equations of high degree is you typically-- you can look

213
00:15:49,560 --> 00:15:54,800
 at your complicated equations, you can put an upper bound on the total number of roots

214
00:15:54,800 --> 00:15:57,620
 of the polynomial system.

215
00:15:57,620 --> 00:16:05,280
 You make the unit circle that has that many zeros around it, which is a trivial polynomial

216
00:16:05,280 --> 00:16:08,120
 system where you know exactly where the zeros are.

217
00:16:08,120 --> 00:16:13,880
 And then you basically morph the trivial polynomials into your polynomials with a continuation.

218
00:16:13,880 --> 00:16:20,920
 Basically just like you say, let's say, my trivial polynomial where I know all the zeros

219
00:16:20,920 --> 00:16:28,840
 are plus 1 minus alpha times my interesting polynomial.

220
00:16:28,840 --> 00:16:30,520
 Interesting.

221
00:16:30,520 --> 00:16:32,000
 OK.

222
00:16:32,000 --> 00:16:38,120
 And you change alpha from being 1 to being 0.

223
00:16:38,120 --> 00:16:41,920
 And you watch, you track where all the zeros of the polynomials are.

224
00:16:41,920 --> 00:16:43,960
 And these are called continuation methods.

225
00:16:43,960 --> 00:16:49,040
 And there's a whole science of this, I guess.

226
00:16:49,040 --> 00:16:56,640
 And you end up writing tools that do variable precision arithmetic.

227
00:16:56,640 --> 00:16:57,640
 Doubles aren't good enough.

228
00:16:57,640 --> 00:17:04,560
 You have to do however many degrees of precision in order to track zeros that go arbitrarily

229
00:17:04,560 --> 00:17:06,960
 close together and then split, and they're complex.

230
00:17:06,960 --> 00:17:13,640
 Anyways, there's a lot to be known about kinematics.

231
00:17:13,640 --> 00:17:20,600
 There's also, in the specific case of 6 degree of freedom arms and 7 degree of freedom arms,

232
00:17:20,600 --> 00:17:23,360
 those tools have been bottled up pretty effectively.

233
00:17:23,360 --> 00:17:25,720
 So you don't actually have to study anything about polynomials.

234
00:17:25,720 --> 00:17:31,320
 You can just download the software and call IKFast or something and use the benefits of

235
00:17:31,320 --> 00:17:32,320
 that.

236
00:17:32,320 --> 00:17:40,840
 And IKFast is a popular open source version of this, which provides the closed form solutions

237
00:17:40,840 --> 00:17:43,800
 for 6 degree of freedom manipulators.

238
00:17:43,800 --> 00:17:48,720
 And that works so well that if you have a 7 degree of freedom manipulator, you just

239
00:17:48,720 --> 00:17:54,000
 sample a bunch in the last link and ask the 6 degree of freedom for a solution.

240
00:17:54,000 --> 00:17:57,360
 And this is just fast enough because it's closed form that people do that.

241
00:17:57,360 --> 00:18:02,600
 And if you're a floating base robot, you might sample around it and just use the 6 degree

242
00:18:02,600 --> 00:18:05,200
 of freedom solution a lot.

243
00:18:05,200 --> 00:18:10,280
 Sorry, I got a little carried away with my kinematics.

244
00:18:10,280 --> 00:18:13,920
 But I think there's good stuff to know here.

245
00:18:13,920 --> 00:18:20,640
 And I cite it, but we're not going to dig into more details than that.

246
00:18:20,640 --> 00:18:26,520
 But I want you to realize that this is somehow not what I mean when I say inverse kinematics.

247
00:18:26,520 --> 00:18:31,120
 This is from Q to one end effector constraint.

248
00:18:31,120 --> 00:18:33,080
 And that is inverse kinematics.

249
00:18:33,080 --> 00:18:40,160
 But there's a much richer version of the inverse kinematics problem, where if I want to pick

250
00:18:40,160 --> 00:18:46,000
 up a mug and simultaneously avoid putting my elbow in the table-- and actually, I don't

251
00:18:46,000 --> 00:18:49,360
 care exactly the pose of my hand relative to the mug.

252
00:18:49,360 --> 00:18:53,920
 As long as I'm somewhere where my fingers are going to get a good grip on the mug, that's

253
00:18:53,920 --> 00:18:58,880
 a different specification than having an exact pose constraint.

254
00:18:58,880 --> 00:19:04,260
 And these non-penetration of my arms into the table, we know a little bit about that.

255
00:19:04,260 --> 00:19:07,680
 You can write that as a non-penetration constraint.

256
00:19:07,680 --> 00:19:14,400
 So we're going to generalize this into the optimization-based solutions and get a bigger

257
00:19:14,400 --> 00:19:36,160
 tool that can solve a lot of problems.

258
00:19:36,160 --> 00:19:41,480
 It's very analogous to the way we generalized our differential IK to add more and more constraints

259
00:19:41,480 --> 00:19:45,760
 like velocity limits, acceleration limits.

260
00:19:45,760 --> 00:19:53,120
 We're going to do the same thing for the actual kinematics, the inverse kinematics problem.

261
00:19:53,120 --> 00:19:59,240
 And this is a tool that we've used a lot over the years, this philosophy, maybe, that we've

262
00:19:59,240 --> 00:20:02,440
 used a lot over the years.

263
00:20:02,440 --> 00:20:05,520
 Even on Atlas, this was a core tool.

264
00:20:05,520 --> 00:20:12,280
 If you think about Atlas, like in our differential IK, we had this comfortable configuration

265
00:20:12,280 --> 00:20:16,280
 that was our happy place for Atlas.

266
00:20:16,280 --> 00:20:19,720
 So the objective was always be as close to this as possible.

267
00:20:19,720 --> 00:20:23,120
 But then you'd start adding constraints, like I'd like my end effector to be in a certain

268
00:20:23,120 --> 00:20:24,120
 position.

269
00:20:24,120 --> 00:20:25,120
 I have joint limits.

270
00:20:25,120 --> 00:20:27,240
 I have collision avoidance.

271
00:20:27,240 --> 00:20:32,280
 In Atlas and also in other manipulation, you might need that your hand stays where your

272
00:20:32,280 --> 00:20:33,280
 cameras can see.

273
00:20:33,280 --> 00:20:35,640
 That's what the gaze constraints were.

274
00:20:35,640 --> 00:20:41,440
 It's particularly important on Atlas because the first version of Atlas they gave us, so

275
00:20:41,440 --> 00:20:45,560
 the cameras could see here and the hands could reach here.

276
00:20:45,560 --> 00:20:46,800
 You couldn't quite see your hands.

277
00:20:46,800 --> 00:20:48,040
 It was just like, I don't know.

278
00:20:48,040 --> 00:20:51,280
 They just didn't think about that part of the problem very much.

279
00:20:51,280 --> 00:20:56,920
 So you had a kinematic workspace that was a little too small and just barely in the

280
00:20:56,920 --> 00:20:57,920
 camera.

281
00:20:57,920 --> 00:20:59,880
 So we spent all of our time trying to make sure we were only doing things where we could

282
00:20:59,880 --> 00:21:02,440
 see.

283
00:21:02,440 --> 00:21:07,200
 For a humanoid, you want to make sure that when you're in the solutions, you're not requiring

284
00:21:07,200 --> 00:21:09,560
 the feet to slide around in order to reach something.

285
00:21:09,560 --> 00:21:11,920
 So you put your feet stay put.

286
00:21:11,920 --> 00:21:15,860
 You want your center of mass to be over your support polygon.

287
00:21:15,860 --> 00:21:22,920
 These are all just constraints that you can put directly on Q.

288
00:21:22,920 --> 00:21:31,800
 In most cases, they are inequality constraints on Q. And if you can put them all into a solver,

289
00:21:31,800 --> 00:21:36,760
 then you can solve these big problems potentially.

290
00:21:36,760 --> 00:21:39,360
 What you'll find out is you can solve these at basically interactive rates.

291
00:21:39,360 --> 00:21:41,680
 And that's what this video showed.

292
00:21:41,680 --> 00:21:44,920
 This is real time.

293
00:21:44,920 --> 00:21:46,240
 That was the plan.

294
00:21:46,240 --> 00:21:49,680
 But you'll see there's a little interactive marker here.

295
00:21:49,680 --> 00:21:55,680
 And you'll see Pat just pulling the hand around and adjusting some constraints.

296
00:21:55,680 --> 00:21:57,400
 And it's just solving in real time.

297
00:21:57,400 --> 00:22:04,160
 And that was back when computers were slow.

298
00:22:04,160 --> 00:22:07,120
 All of these things are available.

299
00:22:07,120 --> 00:22:13,160
 So you should just look that there's a library of these constraints.

300
00:22:13,160 --> 00:22:22,120
 You can add position constraints, saying I've got a point in frame B should correspond with

301
00:22:22,120 --> 00:22:26,440
 a point in frame A with lower bounds and upper bounds.

302
00:22:26,440 --> 00:22:28,480
 We'll use that one in a minute.

303
00:22:28,480 --> 00:22:33,800
 You can add orientation constraints on two points in two different frames-- or two different

304
00:22:33,800 --> 00:22:39,800
 frames being at a different orientation relative to each other with some bound on theta.

305
00:22:39,800 --> 00:22:45,800
 You can add your days constraints, which is really just like this point needs to be inside

306
00:22:45,800 --> 00:22:48,800
 the cone.

307
00:22:48,800 --> 00:22:55,360
 The minimum distance constraints are the non-penetration constraints.

308
00:22:55,360 --> 00:23:02,000
 You can add just a bunch of these different-- there's a rich library of constraints.

309
00:23:02,000 --> 00:23:09,320
 And that's just wrappers that build up, that call the right queries in multi-body plant

310
00:23:09,320 --> 00:23:10,840
 and just give you a mathematical program.

311
00:23:10,840 --> 00:23:11,840
 And then you hit Solve.

312
00:23:11,840 --> 00:23:16,880
 And it'll solve those problems for you most of the time.

313
00:23:16,880 --> 00:23:17,880
 It can get stuck.

314
00:23:17,880 --> 00:23:23,080
 We'll talk about its limitations.

315
00:23:23,080 --> 00:23:27,880
 So I told you, I think, about the big robot in the little car.

316
00:23:27,880 --> 00:23:32,640
 So one of the big jokes was that they gave us this huge 400-pound robot.

317
00:23:32,640 --> 00:23:33,840
 And then they gave us a little Polaris.

318
00:23:33,840 --> 00:23:36,360
 And they said, the big robot has to drive the little car.

319
00:23:36,360 --> 00:23:39,840
 So we spent a long time even figuring out how to get the robot into the car.

320
00:23:39,840 --> 00:23:45,760
 And it turned out the only way it could actually get under the steering column was if it drove

321
00:23:45,760 --> 00:23:51,160
 from the passenger seat and put its foot across and used its left foot to drive and its left

322
00:23:51,160 --> 00:23:52,160
 arm.

323
00:23:52,160 --> 00:23:55,880
 And then it had to get out of the car, which was a real doozy.

324
00:23:55,880 --> 00:24:00,320
 But we solved all that with this interactive inverse kinematics, where we were dropping

325
00:24:00,320 --> 00:24:05,640
 on-- you can see multiple pose constraints.

326
00:24:05,640 --> 00:24:06,640
 And we'd play around.

327
00:24:06,640 --> 00:24:08,560
 And that's how we worked out.

328
00:24:08,560 --> 00:24:10,400
 You can see we didn't have a CAD model for the Polaris.

329
00:24:10,400 --> 00:24:14,360
 But we just took point cloud scans and started working with that.

330
00:24:14,360 --> 00:24:19,680
 And just as a human, we played with this until we understood what happened.

331
00:24:19,680 --> 00:24:26,920
 Now, if you watch super closely at what was just happening there, watch the elbow.

332
00:24:26,920 --> 00:24:30,720
 It was actually pretty good that time.

333
00:24:30,720 --> 00:24:34,960
 Again, this one you'll see.

334
00:24:34,960 --> 00:24:37,920
 He was trying to turn the steering wheel there.

335
00:24:37,920 --> 00:24:42,200
 First of all, the foot's sliding around a little bit, even when he was turning the hand.

336
00:24:42,200 --> 00:24:48,080
 And even the-- you'll see the elbow kind of jumps a little bit.

337
00:24:48,080 --> 00:24:50,700
 So we'll write down the optimization.

338
00:24:50,700 --> 00:24:57,760
 But it's interesting that the solver can solve these really hard problems.

339
00:24:57,760 --> 00:25:01,040
 But sometimes you haven't specified them well enough.

340
00:25:01,040 --> 00:25:03,880
 Sometimes it's solving it approximately.

341
00:25:03,880 --> 00:25:08,840
 So it's not really guaranteed that a small change in your problem will lead to a small

342
00:25:08,840 --> 00:25:12,540
 change in Q. You can do your best to ask for that.

343
00:25:12,540 --> 00:25:18,800
 But compared to differential IK, these are more global solutions.

344
00:25:18,800 --> 00:25:20,900
 But they are not necessarily smooth solutions.

345
00:25:20,900 --> 00:25:27,020
 So it was very rare that we would go straight from this and immediately send the real-time

346
00:25:27,020 --> 00:25:30,480
 output of the solver directly to the robot, because the robot might jump around in order

347
00:25:30,480 --> 00:25:31,920
 to do that.

348
00:25:31,920 --> 00:25:39,320
 We would tend to filter it and check it before we sent it down.

349
00:25:39,320 --> 00:25:41,920
 And this is just another example.

350
00:25:41,920 --> 00:25:45,280
 But the great thing about this is it's really not robot-specific.

351
00:25:45,280 --> 00:25:51,640
 You could put any different-- this was just 10 minutes of effort.

352
00:25:51,640 --> 00:25:55,300
 You put in a different robot in, and you could immediately start making trajectories and

353
00:25:55,300 --> 00:25:56,760
 plans for a very different robot.

354
00:25:56,760 --> 00:26:01,480
 This was the NASA humanoid.

355
00:26:01,480 --> 00:26:09,480
 So we're going to try to generalize this with those richer formulations.

356
00:26:09,480 --> 00:26:13,960
 I want to think about what that solver has to do, because it's going to make you appreciate,

357
00:26:13,960 --> 00:26:20,560
 I think, the problem we're asking for solutions for.

358
00:26:20,560 --> 00:26:33,400
 So let me use a toy problem here, which is-- actually, let me do one more thing before

359
00:26:33,400 --> 00:26:34,400
 I do that.

360
00:26:34,400 --> 00:26:35,400
 Sorry, Rachel.

361
00:26:35,400 --> 00:26:40,480
 I actually have all of this coded up so you can play with it, I hope.

362
00:26:40,480 --> 00:26:43,160
 And you will.

363
00:26:43,160 --> 00:26:48,120
 So for the EWA in the notebook that I just updated to DeepNote and pushed to DeepNote

364
00:26:48,120 --> 00:26:55,000
 this morning, you can just do this interactive kinematics.

365
00:26:55,000 --> 00:27:01,240
 This is it running in my system.

366
00:27:01,240 --> 00:27:13,520
 I forgot to delete the example I ran before.

367
00:27:13,520 --> 00:27:14,800
 So basically the same demo.

368
00:27:14,800 --> 00:27:17,280
 I didn't draw the interactive markers, but I have all the sliders here.

369
00:27:17,280 --> 00:27:19,520
 So you can do the same thing.

370
00:27:19,520 --> 00:27:23,280
 You can move your end effector around.

371
00:27:23,280 --> 00:27:27,960
 It looks a lot like what we did with the kinematic teleop before, but now we're solving the full

372
00:27:27,960 --> 00:27:34,800
 inverse kinematics problem instead of solving the differential inverse kinematics problem.

373
00:27:34,800 --> 00:27:37,680
 So that should all just work.

374
00:27:37,680 --> 00:27:44,200
 Now I want to make that point, though, that this is solving a bigger version of the problem.

375
00:27:44,200 --> 00:27:50,200
 So let me just throw a obstacle in the middle here.

376
00:27:50,200 --> 00:27:51,760
 And let's just look at what's happening here.

377
00:27:51,760 --> 00:28:00,000
 So every time I move a slider, it's making this new inverse kinematics problem.

378
00:28:00,000 --> 00:28:04,520
 It's adding the position and orientation constraints, just saying the pose is exactly what I'm asking

379
00:28:04,520 --> 00:28:06,880
 for in the slider.

380
00:28:06,880 --> 00:28:11,660
 And then it says add minimum distance, basically saying that I'm not in penetration.

381
00:28:11,660 --> 00:28:15,880
 The links of the robot are not in penetration with that column I just put in front of the

382
00:28:15,880 --> 00:28:18,200
 robot.

383
00:28:18,200 --> 00:28:21,320
 And other than that, it's just calling solve, basically.

384
00:28:21,320 --> 00:28:27,280
 I set the last-- or I set the comfortable q as the initial guess.

385
00:28:27,280 --> 00:28:32,660
 And I put that q minus q desired-- q nominal as the cost.

386
00:28:32,660 --> 00:28:38,920
 So it's trying to prefer the sort of default position, but otherwise solve that problem.

387
00:28:38,920 --> 00:28:44,520
 And now I put it in a position here where it's kind of annoying.

388
00:28:44,520 --> 00:28:47,240
 There's a column right in front of my robot.

389
00:28:47,240 --> 00:28:49,240
 Don't do this to your robot.

390
00:28:49,240 --> 00:28:51,600
 It is annoying.

391
00:28:51,600 --> 00:28:54,880
 But now if I move this around, it's all good if I go that way.

392
00:28:54,880 --> 00:28:58,160
 What's going to happen if I go this way?

393
00:28:58,160 --> 00:29:02,560
 So if I go right in the middle, you'll see IK failure.

394
00:29:02,560 --> 00:29:04,640
 It's doing its best effort.

395
00:29:04,640 --> 00:29:06,640
 It's actually trying to do a good job.

396
00:29:06,640 --> 00:29:10,040
 But it's claiming that it can't satisfy the constraints exactly.

397
00:29:10,040 --> 00:29:20,720
 But if I keep going, it actually snaps to the other side and proceeds.

398
00:29:20,720 --> 00:29:24,480
 So that is something you would never have gotten out of the differential IK.

399
00:29:24,480 --> 00:29:25,600
 It would have gotten stuck there.

400
00:29:25,600 --> 00:29:27,860
 It would have refused to go to the other side.

401
00:29:27,860 --> 00:29:31,120
 But this is solving the full inverse kinematics less well.

402
00:29:31,120 --> 00:29:32,800
 It's a non-convex optimization.

403
00:29:32,800 --> 00:29:34,080
 It's not guaranteed to succeed.

404
00:29:34,080 --> 00:29:38,280
 The differential one would find an answer if it existed.

405
00:29:38,280 --> 00:29:40,360
 But it can solve this bigger version of the problem.

406
00:29:40,360 --> 00:29:56,240
 There's a very important point I want to make here,

407
00:29:56,240 --> 00:30:03,680
 which is that you should add the minimal possible constraints.

408
00:30:03,680 --> 00:30:08,120
 So the philosophy that we have in the group-- so I would say,

409
00:30:08,120 --> 00:30:15,080
 in general, I would say the philosophy that I would recommend

410
00:30:15,080 --> 00:30:25,120
 here is keep your cost function simple.

411
00:30:25,120 --> 00:30:32,560
 So for us, it's almost always minimize q, q minus q nominal

412
00:30:32,560 --> 00:30:34,560
 squared.

413
00:30:34,560 --> 00:30:38,120
 So I've got my comfortable position of the EWA.

414
00:30:38,120 --> 00:30:40,120
 I'm just using this like my joint centering.

415
00:30:40,120 --> 00:30:47,600
 And then add the least restrictive constraints you can.

416
00:30:47,600 --> 00:31:03,640
, OK?

417
00:31:03,640 --> 00:31:06,320
 So like I said, if you're reaching for a mug,

418
00:31:06,320 --> 00:31:09,320
 you might have-- it might be that you must pick up

419
00:31:09,320 --> 00:31:11,040
 the mug from exactly this orientation.

420
00:31:11,040 --> 00:31:13,240
 But rarely is that the case.

421
00:31:13,240 --> 00:31:15,600
 Typically, you have some freedom in your choice

422
00:31:15,600 --> 00:31:17,400
 of exactly how to pick up the mug

423
00:31:17,400 --> 00:31:21,880
 if you can leverage that all the way through your pipeline.

424
00:31:21,880 --> 00:31:23,600
 Things are going to be better.

425
00:31:23,600 --> 00:31:26,640
 So let me make that point with another of these examples

426
00:31:26,640 --> 00:31:27,140
 here, OK?

427
00:31:27,140 --> 00:31:35,760
 This one is going to-- oh, I forgot to stop this one.

428
00:31:35,760 --> 00:31:45,200
 This time, it's trying to grasp the cylinder, OK?

429
00:31:45,200 --> 00:31:46,960
 So I actually stopped.

430
00:31:46,960 --> 00:31:48,160
 I'm not commanding.

431
00:31:48,160 --> 00:31:52,120
 If you look at the code here, the pose

432
00:31:52,120 --> 00:31:54,200
 that I'm sending in from the sliders

433
00:31:54,200 --> 00:31:57,800
 is now setting the cylinder's position, not the robot's

434
00:31:57,800 --> 00:31:59,680
 position, not the robot's hand.

435
00:31:59,680 --> 00:32:02,720
 And then I'm just saying, B, I'm going-- we'll

436
00:32:02,720 --> 00:32:04,920
 write this on the board in a second here.

437
00:32:04,920 --> 00:32:09,840
 We're going to constrain the hand relative to the cylinder.

438
00:32:09,840 --> 00:32:12,640
 But I can tell-- all I care about

439
00:32:12,640 --> 00:32:14,480
 is that the cylinder is somehow in the hand.

440
00:32:14,480 --> 00:32:15,920
 I don't care about the orientation

441
00:32:15,920 --> 00:32:17,400
 of the hand around the cylinder.

442
00:32:17,400 --> 00:32:19,440
 And I don't even care about where on the cylinder.

443
00:32:19,440 --> 00:32:22,560
 In this toy example, I don't care where along the cylinder.

444
00:32:22,560 --> 00:32:26,640
 So I can write much less restrictive constraints

445
00:32:26,640 --> 00:32:30,440
 if I embrace that extra ambiguity.

446
00:32:30,440 --> 00:32:34,640
 So if I move the cylinder in x, then the robot's

447
00:32:34,640 --> 00:32:35,600
 going to do a good job.

448
00:32:35,600 --> 00:32:37,640
 You see that the orientation is changing in order

449
00:32:37,640 --> 00:32:40,120
 to satisfy that constraint.

450
00:32:40,120 --> 00:32:43,880
 If I move it in y, when I get to the end,

451
00:32:43,880 --> 00:32:46,880
 it's going to chase because it's constrained to stay

452
00:32:46,880 --> 00:32:48,000
 along the thing in y.

453
00:32:48,000 --> 00:32:51,400
 But if I move this way, it's happy.

454
00:32:51,400 --> 00:32:55,600
 There are multiple solutions, so sometimes it jumps.

455
00:32:55,600 --> 00:32:58,080
 But that's a much less restrictive constraint

456
00:32:58,080 --> 00:33:00,080
 to add on the end effector.

457
00:33:00,080 --> 00:33:03,520
 And any time you can express with less constraints

458
00:33:03,520 --> 00:33:05,880
 the same problem, you win.

459
00:33:05,880 --> 00:33:07,760
 Your solver is going to have a better chance.

460
00:33:07,760 --> 00:33:09,180
 You'll be happier with the results.

461
00:33:09,180 --> 00:33:13,980
 You'll be able to add more other interesting constraints.

462
00:33:13,980 --> 00:33:17,700
 I am continually impressed, too, by just the collision avoidance

463
00:33:17,700 --> 00:33:18,620
 capabilities of this.

464
00:33:18,620 --> 00:33:25,420
 That's the-- it's going to dance around, try to chase.

465
00:33:25,420 --> 00:33:27,040
 I actually even have a version of this.

466
00:33:27,040 --> 00:33:29,100
 If you set grasp cylinder to false

467
00:33:29,100 --> 00:33:31,060
 when you're playing with it, then it's like--

468
00:33:31,060 --> 00:33:32,300
 just tries to avoid the stick.

469
00:33:32,300 --> 00:33:33,820
 And you can make it limbo and stuff.

470
00:33:33,820 --> 00:33:36,500
 But I won't do that here.

471
00:33:36,500 --> 00:33:38,500
 So how do I-- what are these two constraints

472
00:33:38,500 --> 00:33:40,260
 that I wrote do?

473
00:33:40,260 --> 00:33:43,900
 How do you write that version of the constraint?

474
00:33:43,900 --> 00:33:46,020
 There's many ways to write it.

475
00:33:46,020 --> 00:33:51,260
 I chose to add it with two position constraints.

476
00:33:51,260 --> 00:33:53,700
 So how did I do that?

477
00:33:53,700 --> 00:34:02,380
 So basically, I have the gripper in this frame,

478
00:34:02,380 --> 00:34:05,660
 where this-- if you remember the gripper's coordinates--

479
00:34:05,660 --> 00:34:11,940
 sorry, Rachel-- you remember the gripper's coordinates,

480
00:34:11,940 --> 00:34:19,580
 where it's kind of annoying, but x is the-- it's RGB, right?

481
00:34:19,580 --> 00:34:22,300
 x, y, z.

482
00:34:22,300 --> 00:34:24,740
 So if I draw this from the side, then this

483
00:34:24,740 --> 00:34:27,020
 is going to be my z-coordinate.

484
00:34:27,020 --> 00:34:30,420
 This is going to be my y-coordinate.

485
00:34:30,420 --> 00:34:34,980
 And what I want to say is that basically all I care about

486
00:34:34,980 --> 00:34:38,100
 is that the cylinder is somewhere like this.

487
00:34:38,100 --> 00:34:45,820
 I chose to say, let's pick a point in the gripper frame.

488
00:34:45,820 --> 00:34:46,900
 Pick one right here.

489
00:34:46,900 --> 00:34:47,860
 You'll see the numbers.

490
00:34:47,860 --> 00:34:53,220
 It's like 0.1 down, 0.02 to the side.

491
00:34:53,220 --> 00:34:56,900
 And I picked another point in the gripper frame.

492
00:34:56,900 --> 00:34:58,700
 And I just said both of those points

493
00:34:58,700 --> 00:35:01,340
 must be exactly on the center line of the cylinder.

494
00:35:01,340 --> 00:35:11,700
 My claim is that that's a version of that rotation.

495
00:35:11,700 --> 00:35:15,700
 I basically wanted to say I put a rotation around the center.

496
00:35:15,700 --> 00:35:19,820
 You know, the middle of the hand can rotate arbitrarily

497
00:35:19,820 --> 00:35:20,940
 around this.

498
00:35:20,940 --> 00:35:22,580
 And it also gave me a convenient way

499
00:35:22,580 --> 00:35:24,300
 to say that those points actually

500
00:35:24,300 --> 00:35:27,700
 are on the line segment of the cylinder,

501
00:35:27,700 --> 00:35:28,860
 so it didn't go off the end.

502
00:35:29,420 --> 00:35:34,300
 Is that picture clear?

503
00:35:34,300 --> 00:35:35,100
 OK.

504
00:35:35,100 --> 00:35:42,260
 If I were to look at the gripper from the other dimension,

505
00:35:42,260 --> 00:35:44,140
 it's saying that those points are right

506
00:35:44,140 --> 00:35:46,500
 in the middle of the gripper here.

507
00:35:46,500 --> 00:35:48,460
 There's two of them directly there.

508
00:35:48,460 --> 00:35:50,700
 They have to be dead center here.

509
00:35:50,700 --> 00:35:57,540
 So because that's x, y, z, that really just came up

510
00:35:57,540 --> 00:36:05,380
 as being in the code that the gripper frame--

511
00:36:05,380 --> 00:36:10,620
 there's a point in the gripper frame, which is down one

512
00:36:10,620 --> 00:36:15,460
 in y, which is positive y right there.

513
00:36:15,460 --> 00:36:20,820
 And then I did to the left in z and to the right in z.

514
00:36:20,820 --> 00:36:23,540
 And both of those have to be somewhere on the cylinder

515
00:36:23,540 --> 00:36:25,500
 where the x--

516
00:36:25,500 --> 00:36:26,860
 so the cylinder is--

517
00:36:26,860 --> 00:36:30,820
 coordinate frame is the long axis of the cylinder is in z.

518
00:36:30,820 --> 00:36:32,660
 So this is saying that exactly on the center

519
00:36:32,660 --> 00:36:35,320
 line of the cylinder, exactly on the center line of the cylinder

520
00:36:35,320 --> 00:36:37,700
 in the x and y, and in z, it's anywhere

521
00:36:37,700 --> 00:36:39,100
 along the length of the cylinder.

522
00:36:39,100 --> 00:36:45,420
 That's a really rich way to specify the dynamics.

523
00:36:45,420 --> 00:36:47,980
 And it's important-- or to the kinematics, I'm sorry.

524
00:36:47,980 --> 00:36:49,860
 And it's important for things like reaching

525
00:36:49,860 --> 00:36:54,180
 into tight spaces where you get very, very constrained

526
00:36:54,180 --> 00:36:56,980
 very fast.

527
00:36:56,980 --> 00:36:58,500
 Does that example make sense?

528
00:36:58,500 --> 00:37:14,820
 OK, so let's do something a little bit more fancy.

529
00:37:14,820 --> 00:37:17,620
 Let's make the robot now--

530
00:37:17,620 --> 00:37:20,980
 I can even put it up here, I guess.

531
00:37:20,980 --> 00:37:25,420
 Let's think about the robot reaching into a set of shelves.

532
00:37:25,420 --> 00:37:28,840
 So I want to think about this problem for a little bit.

533
00:37:28,840 --> 00:37:30,960
 Now, the reason I want to think about this problem

534
00:37:30,960 --> 00:37:33,660
 is I had to think for a while about what

535
00:37:33,660 --> 00:37:36,380
 would be an interesting geometric problem where

536
00:37:36,380 --> 00:37:37,820
 I could plot everything.

537
00:37:37,820 --> 00:37:39,340
 So what I did here was I--

538
00:37:39,340 --> 00:37:41,460
 this is a three-link KUKA.

539
00:37:41,460 --> 00:37:44,940
 I froze all of the joints that were out of plane.

540
00:37:44,940 --> 00:37:47,980
 And I just kept the ones that were aligned with this axis.

541
00:37:47,980 --> 00:37:49,900
 And we're going to only think about--

542
00:37:49,900 --> 00:37:51,380
 the robot actually can't rotate.

543
00:37:51,380 --> 00:37:53,540
 This version of the robot can't rotate.

544
00:37:53,540 --> 00:37:55,780
 So now I've got Q1, Q2, and Q3.

545
00:37:55,780 --> 00:37:59,020
 And I can make 3D plots for you.

546
00:37:59,020 --> 00:38:02,140
 And I want to think about what the collision geometry

547
00:38:02,140 --> 00:38:05,500
 engine and our optimizer is up against.

548
00:38:05,500 --> 00:38:09,100
 If we just say-- you see, I put a little target inside here.

549
00:38:09,100 --> 00:38:11,060
 And I said, reach the sphere.

550
00:38:11,060 --> 00:38:14,100
 Reach into the shelf and reach the sphere.

551
00:38:14,100 --> 00:38:14,980
 And how do we do that?

552
00:38:19,140 --> 00:38:23,500
 I want you to appreciate the richness of configuration

553
00:38:23,500 --> 00:38:24,000
 space.

554
00:38:24,000 --> 00:38:41,980
 [ Writing on Board ]

555
00:38:41,980 --> 00:38:58,860
 So the configuration space is the set of queues.

556
00:38:58,860 --> 00:39:05,660
 In this case, the set of queues that avoid collision, you know, the standard name would

557
00:39:05,660 --> 00:39:20,420
 be the admissible queues for this robot, which avoid penetration.

558
00:39:20,420 --> 00:39:46,380
 In this case, it's respect joint limits, avoid collisions.

559
00:39:46,380 --> 00:39:52,460
 Our optimizer is hunting inside the configuration space of the problem.

560
00:39:52,460 --> 00:39:56,880
 And it's a potentially very challenging space.

561
00:39:56,880 --> 00:40:03,780
 So let's just even, for a simpler problem, a two-link I can draw on the board.

562
00:40:03,780 --> 00:40:15,180
 It's also-- you'll almost always hear us call it C space, short for configuration space.

563
00:40:15,180 --> 00:40:28,900
 So I'll take a two-link robot, my standard sort of two-link robot, theta 1, theta 2.

564
00:40:28,900 --> 00:40:34,340
 I'm going to pretend that there's no collision geometries here or here.

565
00:40:34,340 --> 00:40:42,860
 And I'll just make a sphere collision geometry with radius r at the hand, OK, just because

566
00:40:42,860 --> 00:40:45,660
 I can do all that on the board here.

567
00:40:45,660 --> 00:40:48,860
 And I'm going to stick it in sort of like it's reaching into a shelf.

568
00:40:48,860 --> 00:40:57,180
 But I'll put it between some walls here.

569
00:40:57,180 --> 00:41:00,060
 So this is length 1, this is length 2.

570
00:41:00,060 --> 00:41:04,300
 And that was supposed to be right dead between the walls.

571
00:41:04,300 --> 00:41:08,900
 But you'll humor me and pretend that was symmetric.

572
00:41:08,900 --> 00:41:10,100
 Those are both w.

573
00:41:10,100 --> 00:41:18,940
 And I'd like to ask, what are the admissible theta 1's and theta 2's?

574
00:41:18,940 --> 00:41:26,980
 What's the admissible q's?

575
00:41:26,980 --> 00:41:32,260
 And the punchline is it's not a simply described set.

576
00:41:32,260 --> 00:41:33,900
 We'll animate it in a second here.

577
00:41:33,900 --> 00:41:37,340
 But it's got sines and cosines floating around in it.

578
00:41:37,340 --> 00:41:40,060
 In fact, it's not hard at all to solve this one.

579
00:41:40,060 --> 00:41:50,540
 In this case, the kinematics, the center position here, is really just L sine theta 1, L1 plus

580
00:41:50,540 --> 00:41:55,220
 L2 sine theta 1 plus theta 2.

581
00:41:55,220 --> 00:42:01,220
 That gets me to the position in the middle at that point of the hand.

582
00:42:01,220 --> 00:42:07,900
 And because there's a sphere geometry here, in that one particular special case, I can

583
00:42:07,900 --> 00:42:13,740
 just think of-- I can take the sphere away and just move the wall in by radius r and

584
00:42:13,740 --> 00:42:16,060
 get the same answer.

585
00:42:16,060 --> 00:42:24,820
 So this has got to be less than the wall minus r and greater than the wall plus r.

586
00:42:24,820 --> 00:42:29,300
 And that's my configuration space for the simplest possible picture I could possibly

587
00:42:29,300 --> 00:42:31,820
 draw.

588
00:42:31,820 --> 00:42:35,620
 And it's already interesting and hard.

589
00:42:35,620 --> 00:42:45,100
 So not super hard, but foreshadowing, let's say.

590
00:42:45,100 --> 00:42:51,100
 You can think about what happens just in the simplest case, then it gets pretty complicated

591
00:42:51,100 --> 00:42:52,460
 pretty fast.

592
00:42:52,460 --> 00:43:00,540
 So if I start moving that wall around, then the overlap here-- I've drawn each of my constraints

593
00:43:00,540 --> 00:43:02,180
 in different colors.

594
00:43:02,180 --> 00:43:05,700
 So the overlap region is the valid configuration space.

595
00:43:05,700 --> 00:43:09,500
 That's the limit of my plotting ability in this program.

596
00:43:09,500 --> 00:43:14,400
 If I move it around, those look-- when it's small, you could almost say, well, that could

597
00:43:14,400 --> 00:43:20,300
 almost look like I could approximate those with lines and have a nice convex constraint

598
00:43:20,300 --> 00:43:21,580
 or something like that.

599
00:43:21,580 --> 00:43:24,100
 But it's really not a convex constraint.

600
00:43:24,100 --> 00:43:26,220
 These are curvy lines.

601
00:43:26,220 --> 00:43:28,020
 The set is interesting and rich.

602
00:43:28,020 --> 00:43:31,860
 If I go too far, it starts wrapping around on itself.

603
00:43:31,860 --> 00:43:35,100
 So what is that?

604
00:43:35,100 --> 00:43:38,900
 That's when the arm goes up again around the top, and it's wrapping around.

605
00:43:38,900 --> 00:43:42,100
 They're valid solutions like that.

606
00:43:42,100 --> 00:43:47,140
 Of course, if I move the wall too small, then I've got no solutions.

607
00:43:47,140 --> 00:43:54,820
 But it's a rich space.

608
00:43:54,820 --> 00:44:00,100
 If I now take the same idea, and what I want to plot is the configuration space of the

609
00:44:00,100 --> 00:44:14,740
 three-link arm reaching into the cupboard, this is what it looks like.

610
00:44:14,740 --> 00:44:15,740
 Sort of.

611
00:44:15,740 --> 00:44:23,180
 I can approximate it with like a merchant cubes, and it's kind of scary and bad.

612
00:44:23,180 --> 00:44:44,780
 So let's just even-- you can run this in your notebook too if you want to play with it.

613
00:44:44,780 --> 00:44:46,700
 So let me-- OK, it looks the same.

614
00:44:46,700 --> 00:44:55,140
 I was worried that it looked out of date.

615
00:44:55,140 --> 00:45:02,700
 Let me turn off the collision constraint first and first just draw this grasp constraint,

616
00:45:02,700 --> 00:45:04,740
 the green region.

617
00:45:04,740 --> 00:45:10,500
 So the green region already looks pretty cool and crazy.

618
00:45:10,500 --> 00:45:11,500
 So what is that?

619
00:45:11,500 --> 00:45:15,700
 This, by the way, is just my initial comfortable configuration.

620
00:45:15,700 --> 00:45:22,780
 The x, y, and z-axes here are my q1, q2, q3 of the robot.

621
00:45:22,780 --> 00:45:30,300
 Why is the successful set of grasps ignoring collisions look like that?

622
00:45:30,300 --> 00:45:34,380
 Do you have a sense for what that geometry is doing?

623
00:45:34,380 --> 00:45:39,980
 Why does it look like this sort of ring?

624
00:45:39,980 --> 00:45:40,980
 There's joint limits.

625
00:45:40,980 --> 00:45:49,580
 It would go all the way around if it didn't have joint limits chopping it off.

626
00:45:49,580 --> 00:45:54,740
 What is that axis if I were to walk along that annulus or whatever?

627
00:45:54,740 --> 00:45:55,740
 Yeah?

628
00:45:55,740 --> 00:46:01,980
 >> Does that look like the elbow moving?

629
00:46:01,980 --> 00:46:03,140
 >> But it's in the plane.

630
00:46:03,140 --> 00:46:06,140
 So a lot of times the elbow would walk out of plane.

631
00:46:06,140 --> 00:46:09,060
 So I hear you, but it's not this one.

632
00:46:09,060 --> 00:46:10,060
 It's in the plane.

633
00:46:10,060 --> 00:46:12,780
 I mean, the elbow is involved, so that's correct.

634
00:46:12,780 --> 00:46:16,780
 But I think that's not the most important feature.

635
00:46:16,780 --> 00:46:21,260
 >> The grasp is when the supposedly going through that shelf?

636
00:46:21,260 --> 00:46:23,660
 >> No, the shelf is not drawn.

637
00:46:23,660 --> 00:46:24,980
 This is as if there was no shelf.

638
00:46:24,980 --> 00:46:29,340
 I'm just trying to reach with my 3-link for that sphere.

639
00:46:29,340 --> 00:46:32,340
 I disabled the shelf constraint for a second.

640
00:46:32,340 --> 00:46:33,340
 Yeah?

641
00:46:33,340 --> 00:46:40,340
 >> Isn't it better to do that at the same time because you have 3 links, so you can

642
00:46:40,340 --> 00:46:41,700
 have multiple solutions?

643
00:46:41,700 --> 00:46:44,860
 >> Yeah, so what are the multiple solutions?

644
00:46:44,860 --> 00:46:47,260
 I didn't specify a position constraint.

645
00:46:47,260 --> 00:46:51,500
 Well, sorry, I actually did specify a position constraint, but a sort of low rank.

646
00:46:51,500 --> 00:46:53,500
 It's not a pose constraint.

647
00:46:53,500 --> 00:46:57,820
 All I said was that the center of the sphere was in the middle of my fingers.

648
00:46:57,820 --> 00:47:02,380
 >> So is it only the elbow?

649
00:47:02,380 --> 00:47:03,380
 >> I mean, yes.

650
00:47:03,380 --> 00:47:07,820
 So I think maybe I have to-- so of course, the elbow is involved.

651
00:47:07,820 --> 00:47:13,700
 But it's really-- it's the hand rotating around all the different possible configurations.

652
00:47:13,700 --> 00:47:22,060
 And the arm will reach or not reach based on-- I think I can draw it better than I can

653
00:47:22,060 --> 00:47:31,220
 say it.

654
00:47:31,220 --> 00:47:39,700
 So if I have the-- there's kind of a solution here.

655
00:47:39,700 --> 00:47:47,660
 But there's also a solution with the hand sort of coming down from on top that maybe

656
00:47:47,660 --> 00:47:50,740
 it has to go a little bit more like this.

657
00:47:50,740 --> 00:47:56,540
 And there's also probably a solution like this where the hand is coming from this way,

658
00:47:56,540 --> 00:48:02,180
 and maybe it's a little bit more like this.

659
00:48:02,180 --> 00:48:10,140
 It's this kind of-- I think of it as the hand orientation that's really being rich, if you

660
00:48:10,140 --> 00:48:11,140
 will.

661
00:48:11,140 --> 00:48:12,140
 OK?

662
00:48:12,140 --> 00:48:14,900
 OK, so that's already a little bit quirky.

663
00:48:14,900 --> 00:48:16,460
 It's just I've only got three links.

664
00:48:16,460 --> 00:48:18,300
 I've got to reach this sphere.

665
00:48:18,300 --> 00:48:22,180
 So that sends this annulus of possible constraints.

666
00:48:22,180 --> 00:48:26,620
 But then if you take the KUKA geometry-- by the way, I think every time I plot something

667
00:48:26,620 --> 00:48:31,060
 like this, I, again, once again, thank my geometry friends because there's a lot of

668
00:48:31,060 --> 00:48:34,660
 stuff going on in all these geometry engines behind the scenes.

669
00:48:34,660 --> 00:48:42,360
 But it can solve these hard problems where it's checking if the KUKA's approximated geometry

670
00:48:42,360 --> 00:48:46,540
 intersects with the shelf, which was a simple geometry.

671
00:48:46,540 --> 00:48:53,900
 And the way I plotted this was I made-- in XYZ, I made a huge grid.

672
00:48:53,900 --> 00:48:57,540
 And every point of the grid, I called the collision checker.

673
00:48:57,540 --> 00:49:01,720
 And I able to either 0 or 1.

674
00:49:01,720 --> 00:49:07,260
 And then I called the marching cubes algorithm, which tries to find the level sets.

675
00:49:07,260 --> 00:49:12,860
 It's trying to draw a smooth curve that interpolates between the 0s and the boundary between 0

676
00:49:12,860 --> 00:49:14,420
 and 1.

677
00:49:14,420 --> 00:49:20,180
 And for like, if you have a sign distance function of the bunny, it gives you these

678
00:49:20,180 --> 00:49:22,100
 beautiful things out.

679
00:49:22,100 --> 00:49:25,620
 When you have the configuration space-- and I sampled it a little coarsely because it

680
00:49:25,620 --> 00:49:29,380
 already takes a long time to run-- it gives you these gross things out, especially with

681
00:49:29,380 --> 00:49:30,380
 the truncations.

682
00:49:30,380 --> 00:49:34,460
 It's not closed.

683
00:49:34,460 --> 00:49:36,460
 But that's what it looks like.

684
00:49:36,460 --> 00:49:37,980
 Crazy.

685
00:49:37,980 --> 00:49:43,380
 So this is the problem that we're going to be trying to solve for paths inside.

686
00:49:43,380 --> 00:49:50,500
 We're going to try to find sets of cues that walk along inside this geometry.

687
00:49:50,500 --> 00:49:52,500
 That's the problem.

688
00:49:52,500 --> 00:49:53,500
 Even if I just solve the-- yeah, please.

689
00:49:53,500 --> 00:49:58,820
 Are the initial and the full [INAUDIBLE]

690
00:49:58,820 --> 00:49:59,820
 Are they what?

691
00:49:59,820 --> 00:50:02,700
 Are they connected by [INAUDIBLE]

692
00:50:02,700 --> 00:50:06,980
 The initial guess was this blue region.

693
00:50:06,980 --> 00:50:07,980
 Let's see.

694
00:50:07,980 --> 00:50:10,620
 Initial guess was that blue region.

695
00:50:10,620 --> 00:50:20,100
 And the IK solution is like hiding-- let me see if I can-- well, I turned the grasp constraint

696
00:50:20,100 --> 00:50:21,220
 up, turned the collision.

697
00:50:21,220 --> 00:50:23,340
 That's the solution.

698
00:50:23,340 --> 00:50:28,140
 It's inside the grasp, the successful constraint, which is what you'd want.

699
00:50:28,140 --> 00:50:31,140
 And it's hiding down here inside that.

700
00:50:31,140 --> 00:50:32,980
 We're not done.

701
00:50:32,980 --> 00:50:34,220
 I like my visualizations here.

702
00:50:34,220 --> 00:50:35,220
 So OK.

703
00:50:35,220 --> 00:50:36,820
 No, not this way.

704
00:50:36,820 --> 00:50:42,740
 This is what the-- if you write the optimization problem that you're asking it to solve, this

705
00:50:42,740 --> 00:50:48,380
 minimize-- wherever I just erased it, I guess-- but minimize q minus q desired, subject to

706
00:50:48,380 --> 00:50:51,380
 nothing from my arm is inside the shelf.

707
00:50:51,380 --> 00:50:56,260
 And the point in my hand is here, is within some tolerance of here.

708
00:50:56,260 --> 00:50:57,780
 I had to make it a little bit of a tolerance.

709
00:50:57,780 --> 00:51:02,060
 That's why you got a whole annulus instead of just a line.

710
00:51:02,060 --> 00:51:04,380
 This is the optimization problem that it's faced with.

711
00:51:04,380 --> 00:51:08,180
 Let me see if I can get it here.

712
00:51:08,180 --> 00:51:14,620
 So I've got my cost function, which is the simple small q minus q desired.

713
00:51:14,620 --> 00:51:16,500
 So that's a nice quadratic form.

714
00:51:16,500 --> 00:51:22,860
 But it's nestled inside these nasty constraints.

715
00:51:22,860 --> 00:51:25,700
 And the optimal solution is hiding right down in there.

716
00:51:25,700 --> 00:51:28,880
 I did a beautiful job solving it.

717
00:51:28,880 --> 00:51:34,100
 But that's the local landscape.

718
00:51:34,100 --> 00:51:37,900
 Even better, this is the global landscape.

719
00:51:37,900 --> 00:51:41,140
 This is what I fed it.

720
00:51:41,140 --> 00:51:47,860
 Here's the cost and constraints that I gave to SNOPT.

721
00:51:47,860 --> 00:51:54,620
 Now you can see-- so first of all, props to SNOPT for finding this in the middle of there.

722
00:51:54,620 --> 00:51:55,980
 It might not have found the optimal one.

723
00:51:55,980 --> 00:52:00,060
 It's possible that it's in the wrong trough or something like that.

724
00:52:00,060 --> 00:52:06,300
 So not guaranteed to find the global optimum, but props for finding any of them.

725
00:52:06,300 --> 00:52:10,620
 And it's not going to guarantee that it'll find that.

726
00:52:10,620 --> 00:52:14,940
 You could have come up with another similar setup, and SNOPT might have failed to find

727
00:52:14,940 --> 00:52:19,460
 a solution even though it existed, because it was hiding in one of these little canyons.

728
00:52:19,460 --> 00:52:27,580
 But that's the kind of geometry we're throwing at these solvers.

729
00:52:27,580 --> 00:52:35,500
 OK, so I think we understand-- I hope we-- if you feel like the sort of rich inverse

730
00:52:35,500 --> 00:52:39,660
 kinematics, it's just adding more types of constraints to the type of optimizations we've

731
00:52:39,660 --> 00:52:41,540
 already been writing.

732
00:52:41,540 --> 00:52:45,720
 But the big difference compared to just the poses and everything is we're really living

733
00:52:45,720 --> 00:52:51,700
 in this configuration space of the arm, curvy, complicated landscapes.

734
00:52:51,700 --> 00:52:58,740
 The inverting the forward kinematics is a lot of non-linear, non-convex constraints.

735
00:52:58,740 --> 00:53:03,100
 OK, like I said, if you've got that, then you're almost done.

736
00:53:03,100 --> 00:53:10,340
 So if I wanted to now reach into the shelf, what I need to do is take my initial conditions,

737
00:53:10,340 --> 00:53:12,980
 which was-- the initial-- let's say the robot was in the initial-- actually, the initial

738
00:53:12,980 --> 00:53:15,940
 guess was in penetration, so I had to move it out a little bit.

739
00:53:15,940 --> 00:53:21,580
 And I just need to find a series of points that gets me from the initial conditions,

740
00:53:21,580 --> 00:53:27,020
 never runs into the shelf, and finds my way to the goal.

741
00:53:27,020 --> 00:53:32,140
 Now again, if I over-specify the goal, if I say-- if I were to, for instance, solve

742
00:53:32,140 --> 00:53:37,820
 the inverse kinematics problem once, take the solution, and then try to find a trajectory,

743
00:53:37,820 --> 00:53:42,100
 that is potentially a harder problem than finding a trajectory that still has all the

744
00:53:42,100 --> 00:53:46,860
 flexibility of the problem given to it.

745
00:53:46,860 --> 00:54:16,380
 So if I draw this configuration space again-- so I had this sort of interesting-- you know,

746
00:54:16,380 --> 00:54:18,220
 configuration space.

747
00:54:18,220 --> 00:54:19,220
 This was the good region.

748
00:54:19,220 --> 00:54:22,900
 And I have some initial guess here, like initial configuration.

749
00:54:22,900 --> 00:54:25,340
 I'll call it q0.

750
00:54:25,340 --> 00:54:32,900
 And I've got some target here, which is-- as the picture shows, I've got some set of

751
00:54:32,900 --> 00:54:36,620
 possible targets that are all admissible, right?

752
00:54:36,620 --> 00:54:40,740
 q goal here.

753
00:54:40,740 --> 00:54:46,260
 And the task now is to basically-- the kinematic trajectory optimization problem is find a

754
00:54:46,260 --> 00:54:55,420
 bunch of q's by solving multiple inverse kinematics problems simultaneously that somehow parameterize

755
00:54:55,420 --> 00:55:06,860
 a path that gets me somewhere-- lands me somewhere in the goal.

756
00:55:06,860 --> 00:55:10,940
 Right?

757
00:55:10,940 --> 00:55:23,700
 Now, they can't be completely independent.

758
00:55:23,700 --> 00:55:27,660
 I'm going to need something that sort of connects the two-- the points together.

759
00:55:27,660 --> 00:55:29,580
 But this is the most important idea.

760
00:55:29,580 --> 00:55:30,580
 OK?

761
00:55:30,580 --> 00:55:40,340
 So now, instead of where I was doing minimize q, q minus q0 squared, now I'm going to minimize

762
00:55:40,340 --> 00:55:42,380
 over a whole bunch of q's.

763
00:55:42,380 --> 00:55:59,260
 I'll say q-- say k equals 0 to capital-- maybe k is a bad-- on the board.

764
00:55:59,260 --> 00:56:02,420
 OK?

765
00:56:02,420 --> 00:56:09,860
 I'm going to try to find many q's simultaneously-- q0 to n, n minus 1.

766
00:56:09,860 --> 00:56:14,100
 Subject to a bunch of constraints, right?

767
00:56:14,100 --> 00:56:30,860
 I'd like that for all n, qn is out of collision-- satisfies joint limits.

768
00:56:30,860 --> 00:56:33,780
 OK?

769
00:56:33,780 --> 00:56:45,900
 And then I'd say that at least one of them is inside my goal region, which for me was

770
00:56:45,900 --> 00:56:51,980
 that the position is within some ball of the middle of the gripper.

771
00:56:51,980 --> 00:56:52,980
 And we're almost done.

772
00:56:52,980 --> 00:56:56,820
 We've done a lot of the work here.

773
00:56:56,820 --> 00:56:59,340
 OK?

774
00:56:59,340 --> 00:57:05,580
 If you just solve this, though-- maybe I also have to say, sorry, q0 is my initial guess--

775
00:57:05,580 --> 00:57:11,420
 or my initial configuration.

776
00:57:11,420 --> 00:57:19,220
 If I just solve this, then I might get a solution that puts like almost all the q's here and

777
00:57:19,220 --> 00:57:22,540
 one q down here, right?

778
00:57:22,540 --> 00:57:26,620
 Or all the q's down here somehow and just one point up there.

779
00:57:26,620 --> 00:57:29,420
 I need something that somehow relates these together.

780
00:57:29,420 --> 00:57:30,420
 OK?

781
00:57:30,420 --> 00:57:34,460
 And there's different ways to do that.

782
00:57:34,460 --> 00:57:38,060
 The most natural way, I think, is to somehow put a constraint saying you can't move too

783
00:57:38,060 --> 00:57:43,260
 much-- if you start thinking about this as time, and you say I'm going to take five seconds

784
00:57:43,260 --> 00:57:48,260
 to go from here to here, and I have a velocity limit, then that constrains those points to

785
00:57:48,260 --> 00:58:02,660
 be somehow close enough together.

786
00:58:02,660 --> 00:58:05,580
 Joint velocity limits.

787
00:58:05,580 --> 00:58:23,860
 So you could say qn plus 1 minus qn is less than-- maybe even every element of it-- qi

788
00:58:23,860 --> 00:58:30,740
 is less than q dot max.

789
00:58:30,740 --> 00:58:36,060
 Something like that.

790
00:58:36,060 --> 00:58:44,060
 I missed the times t, right?

791
00:58:44,060 --> 00:58:46,100
 OK.

792
00:58:46,100 --> 00:58:48,420
 Yes?

793
00:58:48,420 --> 00:58:54,220
 I was just saying the-- so this would be joint 0, 1, or 2.

794
00:58:54,220 --> 00:58:56,380
 So this would be for each joint.

795
00:58:56,380 --> 00:59:00,380
 I could do-- I have some joint limit for each joint.

796
00:59:00,380 --> 00:59:05,140
 You could do it a total velocity if you wanted, but I just did it one at a time, which is

797
00:59:05,140 --> 00:59:07,700
 a more standard-- where the place where the constraints come in.

798
00:59:07,700 --> 00:59:14,520
 Thank you for asking.

799
00:59:14,520 --> 00:59:19,140
 This is enough to do reasonable trajectory optimization.

800
00:59:19,140 --> 00:59:21,640
 OK?

801
00:59:21,640 --> 00:59:30,320
 The extra bonus stuff is about asking for-- trying to parameterize continuum solutions

802
00:59:30,320 --> 00:59:32,200
 through here a little bit better.

803
00:59:32,200 --> 00:59:33,200
 OK?

804
00:59:33,200 --> 00:59:38,920
 So if you want this to be described by a trajectory that maybe has some smoothness properties,

805
00:59:38,920 --> 00:59:43,800
 if you'd like to do extra work saying that even between the points, I don't leave my

806
00:59:43,800 --> 00:59:47,640
 joint limits or joint velocity limits or whatever, then we're going to do a little extra work

807
00:59:47,640 --> 00:59:54,560
 in the last part of lecture here to try to put those into a trajectory formulation.

808
00:59:54,560 --> 00:59:56,120
 OK?

809
00:59:56,120 --> 01:00:02,280
 But the key idea really is that I'm solving many IK problems simultaneously, and I'm doing

810
01:00:02,280 --> 01:00:07,480
 some work to just put some constraints across those different points to make them mutually

811
01:00:07,480 --> 01:00:11,560
 consistent.

812
01:00:11,560 --> 01:00:14,620
 This is-- I mean, this is the same thing in, for instance, autonomous driving or other

813
01:00:14,620 --> 01:00:18,240
 places where you're doing trajectory optimization, right?

814
01:00:18,240 --> 01:00:22,120
 I think the constraints-- the shape of the constraints you get in manipulation tends

815
01:00:22,120 --> 01:00:28,400
 to be richer, and so maybe a little bit more emphasis on the kinematics constraints.

816
01:00:28,400 --> 01:00:32,920
 But the philosophy of this trajectory optimization is similar.

817
01:00:32,920 --> 01:00:38,720
 I will put-- it's different than what we tend to talk about in underactuated, if you have

818
01:00:38,720 --> 01:00:41,840
 taken or will take underactuated with me.

819
01:00:41,840 --> 01:00:46,240
 I'm emphasizing the kinematic nature of this optimization.

820
01:00:46,240 --> 01:00:51,780
 And the choices we make in terms of the trajectory parameterizations are going to be different

821
01:00:51,780 --> 01:00:57,040
 in the kinematic trajectory case, where I'm more worried about saying I'm not in collision,

822
01:00:57,040 --> 01:01:02,440
 and I don't have to put on dynamic constraints on the trajectories.

823
01:01:02,440 --> 01:01:05,920
 I'm going to make slightly-- I'm going to have different preferences on how I specify

824
01:01:05,920 --> 01:01:07,960
 those constraints.

825
01:01:07,960 --> 01:01:09,320
 OK?

826
01:01:09,320 --> 01:01:14,080
 But the tool chain is-- at this level, I've described it so far-- is actually very general,

827
01:01:14,080 --> 01:01:15,080
 right?

828
01:01:15,080 --> 01:01:23,160
 You can make airplanes land on a perch, and you can do all kinds of cool stuff.

829
01:01:23,160 --> 01:01:25,520
 OK.

830
01:01:25,520 --> 01:01:28,720
 So let's think about how to specify this now in terms of a trajectory.

831
01:01:28,720 --> 01:01:31,600
 How do we parameterize a trajectory?

832
01:01:31,600 --> 01:01:41,080
 I'm being inclined towards the middle board, but I promised I would stay here.

833
01:01:41,080 --> 01:01:55,160
 Old habits die hard.

834
01:01:55,160 --> 01:02:07,760
 Trajectory parameterizations.

835
01:02:07,760 --> 01:02:09,500
 We've already seen a few of them, right?

836
01:02:09,500 --> 01:02:14,360
 There's actually-- there's a whole bunch of different ways to parameterize a trajectory,

837
01:02:14,360 --> 01:02:15,360
 right?

838
01:02:15,360 --> 01:02:20,760
 We used piecewise polynomials when we were parameterizing the end effector translation.

839
01:02:20,760 --> 01:02:25,280
 We used quaternion slurp to parameterize the orientation changes.

840
01:02:25,280 --> 01:02:27,120
 Do you remember?

841
01:02:27,120 --> 01:02:37,360
 If you look inside the piecewise polynomial classes inside Drake or other trajectory library

842
01:02:37,360 --> 01:02:42,720
 kind of things, you'll find all kinds of-- even in the class of saying, I'm going to

843
01:02:42,720 --> 01:02:46,760
 have a piecewise polynomial, there's just so many choices.

844
01:02:46,760 --> 01:02:49,800
 There's a standard cubic spline.

845
01:02:49,800 --> 01:02:55,320
 There's Hermite splines.

846
01:02:55,320 --> 01:02:56,320
 Most of them are implemented.

847
01:02:56,320 --> 01:02:59,040
 All the ones that we find useful.

848
01:02:59,040 --> 01:03:00,880
 You can do Chebyshev polynomials.

849
01:03:00,880 --> 01:03:06,040
 You can do-- there's a lot of choices.

850
01:03:06,040 --> 01:03:15,320
 The ones we did before made the choice where if I specified from t, and I had some nominal

851
01:03:15,320 --> 01:03:28,840
 configurations t, q at t3, q at t4, for instance, a lot of these parameterizations try to find

852
01:03:28,840 --> 01:03:36,280
 a path that goes through all the points that I've specified, and maybe has some-- they

853
01:03:36,280 --> 01:03:40,320
 have different properties in terms of smoothness up to some derivative.

854
01:03:40,320 --> 01:03:45,280
 You might want to constrain the derivative at the end effect-- at the end point, or there's

855
01:03:45,280 --> 01:03:48,120
 different ways to spell that.

856
01:03:48,120 --> 01:03:51,400
 There's lots of different polynomials you could choose of certain degree that will go

857
01:03:51,400 --> 01:03:53,360
 through a set of points.

858
01:03:53,360 --> 01:04:00,520
 And a lot of the variation there is just picking the way that you choose that.

859
01:04:00,520 --> 01:04:06,040
 We tend to not use those-- I think there's a slightly better choice for kinematic trajectory

860
01:04:06,040 --> 01:04:10,800
 optimization when you have joint limits, and velocity limits, and acceleration limits.

861
01:04:10,800 --> 01:04:16,280
 There's a different family that I think is probably in most cases the winner, which is

862
01:04:16,280 --> 01:04:17,280
 the Bézier curves.

863
01:04:17,280 --> 01:04:20,920
 I think it's I-E-R, right?

864
01:04:20,920 --> 01:04:29,040
 Bézier splines, B-splines.

865
01:04:29,040 --> 01:04:33,640
 They are also polynomials, but they're parameterized a bit differently.

866
01:04:33,640 --> 01:04:41,160
 You don't think of them as being parameterizing directly the coefficients of a simple polynomial

867
01:04:41,160 --> 01:04:46,120
 expansion, or you don't think of them as being points that you try to go through.

868
01:04:46,120 --> 01:04:47,840
 They're parameterized a little bit differently.

869
01:04:47,840 --> 01:04:53,520
 But they have some properties that are super nice for doing this kind of motion planning.

870
01:04:53,520 --> 01:04:55,240
 People hear about B-splines before?

871
01:04:55,240 --> 01:04:56,240
 Yeah?

872
01:04:56,240 --> 01:04:57,240
 Bézier splines, right?

873
01:04:57,240 --> 01:05:02,400
 So people feel comfortable with them?

874
01:05:02,400 --> 01:05:07,360
 I find many fewer people say yes to that second question.

875
01:05:07,360 --> 01:05:14,360
 Even people who use them a lot, actually, I think the notation is a little bit cumbersome.

876
01:05:14,360 --> 01:05:19,280
 There's a sense of what they're doing, and then there's the details, which are ugly to

877
01:05:19,280 --> 01:05:20,680
 get right, in my opinion.

878
01:05:20,680 --> 01:05:26,200
 Maybe I just don't understand them well enough.

879
01:05:26,200 --> 01:05:33,080
 But it's just a slightly different way to parameterize a curve through time.

880
01:05:33,080 --> 01:05:43,280
 The parameters are-- you have your break points.

881
01:05:43,280 --> 01:05:48,360
 There's an additional thing, the not points, if you know, but I'm going to de-emphasize

882
01:05:48,360 --> 01:05:50,160
 that detail for now.

883
01:05:50,160 --> 01:05:57,520
 The break points and the control points.

884
01:05:57,520 --> 01:06:06,360
 So let me draw two pictures here, one of them in configuration space, Q1 and Q2, and one

885
01:06:06,360 --> 01:06:08,840
 of them in time.

886
01:06:08,840 --> 01:06:10,720
 And I'll just write Q1 here.

887
01:06:10,720 --> 01:06:13,720
 Just pick one of them.

888
01:06:13,720 --> 01:06:22,560
 So I'd like to have a bunch of samples in time, which I'll say Tk, Tk plus 1, and so

889
01:06:22,560 --> 01:06:26,060
 on, Tk plus n, let's say.

890
01:06:26,060 --> 01:06:33,800
 These are my break points, my breaks.

891
01:06:33,800 --> 01:06:39,880
 And then I have my trajectory Q that will evolve in time.

892
01:06:39,880 --> 01:06:44,840
 But different from this, I'm not going to parameterize directly the points that it travels

893
01:06:44,840 --> 01:06:47,760
 through in time.

894
01:06:47,760 --> 01:06:58,080
 Instead I'm going to sprinkle some control points in the configuration space.

895
01:06:58,080 --> 01:07:06,120
 So I'll do Qk, Qk plus 1, plus 2, all the way up.

896
01:07:06,120 --> 01:07:12,480
 I'm going to have a bunch of control points in my configuration space.

897
01:07:12,480 --> 01:07:18,560
 And there's a particular polynomial basis, the B-spline basis, which has some beautiful

898
01:07:18,560 --> 01:07:31,120
 properties, which says that in the configuration space-- I need more colors of chalk.

899
01:07:31,120 --> 01:07:38,000
 In the configuration space, there's a super useful geometric quantity, which is sort of

900
01:07:38,000 --> 01:07:47,080
 the bounding box-- or sorry, the convex hull of my control points.

901
01:07:47,080 --> 01:07:51,680
 And one property that it has is the convex hull property, which says that the trajectory

902
01:07:51,680 --> 01:07:55,960
 here that comes out, it will not go through those points directly, but it will be inside

903
01:07:55,960 --> 01:08:01,520
 the convex hull of those points.

904
01:08:01,520 --> 01:08:12,440
 So it has a super useful convex hull property.

905
01:08:12,440 --> 01:08:16,060
 It also has this very nice locality property.

906
01:08:16,060 --> 01:08:26,820
 So more precisely, if I'm at some sample point in the middle of my trajectory, there is a

907
01:08:26,820 --> 01:08:34,140
 finite set of control points before and after me for which I'm in their convex hull.

908
01:08:34,140 --> 01:08:38,220
 And that set moves in a sliding window as I move through time.

909
01:08:38,220 --> 01:08:45,140
 And the number of points that define that convex set is the order of my spline.

910
01:08:45,140 --> 01:08:50,700
 Just a bunch of terminology, but I think what I want you to get essentially is that this

911
01:08:50,700 --> 01:08:56,100
 is a good choice, first and foremost, because it has this convex hull property.

912
01:08:56,100 --> 01:08:59,060
 Why is that important?

913
01:08:59,060 --> 01:09:11,500
 So if I have joint limits, if I pick sample points in Q and I parameterize with a lot

914
01:09:11,500 --> 01:09:17,220
 of the standard polynomials, there's not a guarantee that my interpolated trajectory

915
01:09:17,220 --> 01:09:22,940
 doesn't do something like this, which badly violates my joint limits.

916
01:09:22,940 --> 01:09:25,820
 In the B-splines, you do have that guarantee.

917
01:09:25,820 --> 01:09:31,420
 As long as all of the points, the control points, satisfy your joint limit constraints,

918
01:09:31,420 --> 01:09:37,860
 then the entire trajectory, the continuous time trajectory at all times, it stays inside

919
01:09:37,860 --> 01:09:40,020
 the convex hull.

920
01:09:40,020 --> 01:09:41,940
 More valuable.

921
01:09:41,940 --> 01:09:48,860
 There's a locality property, which people normally emphasize, but I think I've made

922
01:09:48,860 --> 01:09:50,700
 the point enough.

923
01:09:50,700 --> 01:09:57,020
 And then I think the other one that's super useful for us is there's a derivative-- are

924
01:09:57,020 --> 01:10:12,100
 also B-splines, time derivative, and they are B-splines where the control points still

925
01:10:12,100 --> 01:10:17,220
 enter linearly.

926
01:10:17,220 --> 01:10:19,860
 They're nice B-splines.

927
01:10:19,860 --> 01:10:33,140
 So for joint velocity limits or acceleration inequalities, like limits, bounding box kind

928
01:10:33,140 --> 01:10:38,940
 of limits, you can put them in a convex way onto this parameterization.

929
01:10:38,940 --> 01:10:44,700
 They're easy constraints to guarantee that your joint velocity over all times stays inside

930
01:10:44,700 --> 01:10:49,340
 your joint velocity limits and your acceleration stays inside your acceleration limits.

931
01:10:49,340 --> 01:10:57,460
 So the picture down here is you end up specifying a handful of times.

932
01:10:57,460 --> 01:11:01,700
 The transcription looks almost exactly the same as this.

933
01:11:01,700 --> 01:11:08,700
 It's just that the cues that I'm going to think about here are parameterizing-- they

934
01:11:08,700 --> 01:11:13,500
 are the control points of my trajectory.

935
01:11:13,500 --> 01:11:15,460
 They might look a little different.

936
01:11:15,460 --> 01:11:23,420
 And what I get is that each local convex hull I stay inside of, and that convex hull moves

937
01:11:23,420 --> 01:11:25,700
 on each sample to be a different thing.

938
01:11:25,700 --> 01:11:31,660
 I don't know if I did the geometry carefully enough, but each segment stays inside.

939
01:11:31,660 --> 01:11:37,140
 So I'm not parameterizing-- the cues in this optimization are not the actual points on

940
01:11:37,140 --> 01:11:38,140
 the path.

941
01:11:38,140 --> 01:11:45,100
 They are the-- they define these moving bounding boxes that gets me through that tunnel.

942
01:11:45,100 --> 01:11:50,980
 Like I said, this is just the extra richness in order to guarantee that whole path stays

943
01:11:50,980 --> 01:11:59,100
 inside the configuration-- sorry, the bounding box constraints.

944
01:11:59,100 --> 01:12:07,380
 So question for you-- how does it do on these non-penetration constraints?

945
01:12:07,380 --> 01:12:25,700
 Does that bounding box property protect me from non-penetration constraints?

946
01:12:25,700 --> 01:12:30,700
 Unfortunately not, because these curves, these active constraints that are coming from the

947
01:12:30,700 --> 01:12:34,940
 collisions can be sort of arbitrarily curvy.

948
01:12:34,940 --> 01:12:44,740
 So even if I have points that are-- if I had a bounding or a convex hull that was here,

949
01:12:44,740 --> 01:12:49,300
 and I choose trajectories that stay inside that because they all satisfy my joint limits,

950
01:12:49,300 --> 01:12:55,120
 it could be that my configuration space obstacle snuck inside there.

951
01:12:55,120 --> 01:13:02,540
 So for q less than or equal to q max, q dot less than or equal to q dot max, q double

952
01:13:02,540 --> 01:13:07,540
 dot less than or equal to q double dot max, these are all bounding box constraints.

953
01:13:07,540 --> 01:13:09,300
 This stuff works great.

954
01:13:09,300 --> 01:13:11,020
 It's awesome.

955
01:13:11,020 --> 01:13:16,380
 It's not quite enough to save you from collisions with the complex geometries.

956
01:13:16,380 --> 01:13:23,860
 But it's still a good-- it's still, I think, a natural choice because of these benefits.

957
01:13:23,860 --> 01:13:31,460
 Now for those of you that have taken underactuated, let me just call out that the reason this

958
01:13:31,460 --> 01:13:38,460
 is maybe not as a good choice for the dynamics, you can imagine I'm parameterizing sort of--

959
01:13:38,460 --> 01:13:40,580
 I'm not parameterizing the exact trajectory.

960
01:13:40,580 --> 01:13:46,500
 So if I wanted to say the slope of this line at a certain point is exactly this, if I had

961
01:13:46,500 --> 01:13:52,860
 an equality constraint on the dynamics, q double dot is exactly f of x, u, or whatever,

962
01:13:52,860 --> 01:13:55,100
 then that's not naturally expressed here.

963
01:13:55,100 --> 01:13:57,940
 This is really about knocking out regions.

964
01:13:57,940 --> 01:14:03,140
 So when you have big inequality constraints, that's the natural thing.

965
01:14:03,140 --> 01:14:08,500
 But once you have this sort of library of B-splines, which we have libraries of B-splines,

966
01:14:08,500 --> 01:14:11,980
 you can construct a lot of interesting things.

967
01:14:11,980 --> 01:14:19,980
 For instance, if you'd like the initial trajectory to have zero velocity and to be at a certain

968
01:14:19,980 --> 01:14:25,500
 exact point, which we said we wanted to start at the current position of the robot, I don't

969
01:14:25,500 --> 01:14:29,820
 have to be wishy-washy and have it be inside some region.

970
01:14:29,820 --> 01:14:37,580
 If I just put-- if I have a k-order spline, if I put k points on top of myself at the

971
01:14:37,580 --> 01:14:44,820
 beginning, then there is a first cell, which has a convex hull, which is a point.

972
01:14:44,820 --> 01:14:47,940
 And I can put my initial conditions directly inside that point.

973
01:14:47,940 --> 01:14:53,260
 And I can even leave with a small velocity, with a zero velocity, and interpolate up.

974
01:14:53,260 --> 01:14:56,940
 So there's a lot of richness in this parameterization.

975
01:14:56,940 --> 01:15:00,780
 You just have to work through it.

976
01:15:00,780 --> 01:15:05,460
 In practice, we have kinematic trajectory optimization classes that you can call.

977
01:15:05,460 --> 01:15:10,020
 They take some of the same constraints that you saw in inverse kinematics.

978
01:15:10,020 --> 01:15:19,500
 You load them up, and you solve these sort of problems.

979
01:15:19,500 --> 01:15:21,180
 One more point I want to make here.

980
01:15:21,180 --> 01:15:27,420
 So let's say we're doing something like this.

981
01:15:27,420 --> 01:15:29,700
 So I've got a trajectory.

982
01:15:29,700 --> 01:15:33,020
 When I see this, I almost said my point too quickly.

983
01:15:33,020 --> 01:15:39,220
 But when I see this, I see this broken up into a handful of different trajectories.

984
01:15:39,220 --> 01:15:42,420
 There's the reach down until I touch.

985
01:15:42,420 --> 01:15:48,020
 There's close the hand and then move the arm, the mug, through the world.

986
01:15:48,020 --> 01:15:51,060
 And then maybe I'll move again.

987
01:15:51,060 --> 01:15:56,540
 You could imagine solving that as one big optimization problem, but people often don't.

988
01:15:56,540 --> 01:15:59,700
 And let me illustrate why.

989
01:15:59,700 --> 01:16:03,900
 So the worst case is the plate.

990
01:16:03,900 --> 01:16:09,700
 The collision geometries change when you pick up an obstacle.

991
01:16:09,700 --> 01:16:16,260
 So classic first dishwasher video is like, you reach down, you pick up a plate, you go--

992
01:16:16,260 --> 01:16:20,020
 sorry, didn't mean to scare you.

993
01:16:20,020 --> 01:16:23,340
 And you just move your hand through, and your hand is perfectly collision free.

994
01:16:23,340 --> 01:16:26,940
 And you've got a broken plate in your hand.

995
01:16:26,940 --> 01:16:30,040
 So you really have to think about-- we tend to think about composing.

996
01:16:30,040 --> 01:16:35,700
 You can solve them jointly, but we think about explicitly composing the segment which has

997
01:16:35,700 --> 01:16:41,660
 collision constraints based on just the hand up until a contact, the grasp, and then moving

998
01:16:41,660 --> 01:16:47,500
 with the collision of geometry of the plate welded to the hand in the grasp that I've

999
01:16:47,500 --> 01:16:48,500
 chosen.

1000
01:16:48,500 --> 01:16:51,300
 So this is the standard thing.

1001
01:16:51,300 --> 01:16:53,140
 Make sure that is collision free.

1002
01:16:53,140 --> 01:16:54,140
 Let go.

1003
01:16:54,140 --> 01:16:57,300
 Now it will stay fixed in its final location.

1004
01:16:57,300 --> 01:17:00,180
 And then do that again.

1005
01:17:00,180 --> 01:17:02,180
 That's a little bit-- that's limiting.

1006
01:17:02,180 --> 01:17:07,300
 This is the same way in-- we talk about choosing your footsteps in a certain order or whatever

1007
01:17:07,300 --> 01:17:08,380
 in underactuated.

1008
01:17:08,380 --> 01:17:12,580
 But that's a limiting constraint that I have to pre-specify exactly the order.

1009
01:17:12,580 --> 01:17:16,420
 If I wanted to pick up two plates, maybe one with the left hand, one with the right hand,

1010
01:17:16,420 --> 01:17:17,820
 it gets a little bit more annoying.

1011
01:17:17,820 --> 01:17:22,300
 Do I-- did I have to pick up the left one first or the right one first?

1012
01:17:22,300 --> 01:17:25,940
 Or if I'm doing it with a dexterous hand, you start getting more subtle.

1013
01:17:25,940 --> 01:17:27,580
 So it gets limiting.

1014
01:17:27,580 --> 01:17:33,140
 But for a two-finger gripper picking up a single object, that's a pretty good assumption.

1015
01:17:33,140 --> 01:17:37,940
 You can solve all of those trajectories simultaneously with just putting different constraints on

1016
01:17:37,940 --> 01:17:41,060
 the different parts of the trajectory.

1017
01:17:41,060 --> 01:17:47,540
 A very useful heuristic is to solve a piece of it first.

1018
01:17:47,540 --> 01:17:52,660
 So the first thing you do is you solve two-- a joint inverse kinematic problem, just two

1019
01:17:52,660 --> 01:17:53,740
 points.

1020
01:17:53,740 --> 01:18:00,300
 You solve your pickup configuration, your put-down configuration.

1021
01:18:00,300 --> 01:18:04,380
 You want to solve those at the same time because you want to find a single graph, a single

1022
01:18:04,380 --> 01:18:09,220
 relative pose of the object relative to your hand that works both for picking up and putting

1023
01:18:09,220 --> 01:18:10,220
 down.

1024
01:18:10,220 --> 01:18:13,260
 Otherwise, you're going to find yourself-- you chose-- you made a choice picking it up,

1025
01:18:13,260 --> 01:18:16,980
 and then you can't get there with the plate in my hand and this.

1026
01:18:16,980 --> 01:18:20,940
 You tend to solve those jointly.

1027
01:18:20,940 --> 01:18:25,200
 Once you do that, then that breaks the trajectory into pieces.

1028
01:18:25,200 --> 01:18:29,820
 And I can now plan to get to that, plan to get from here to here, and plan to get the

1029
01:18:29,820 --> 01:18:30,820
 other one.

1030
01:18:30,820 --> 01:18:34,040
 You can parallelize all that, and it's all good.

1031
01:18:34,040 --> 01:18:39,420
 It does defy what I told you-- that's exactly what I told you not to do earlier, which is

1032
01:18:39,420 --> 01:18:43,660
 to try to leave as much richness in your optimizationist problem.

1033
01:18:43,660 --> 01:18:49,660
 So you can do versions of that where you try to leave a little bit of space.

1034
01:18:49,660 --> 01:18:52,780
 That's one way in which it's a conservative heuristic.

1035
01:18:52,780 --> 01:19:02,460
 But it really makes the problem scale bigger, and it doesn't cost too much in some cases.

1036
01:19:02,460 --> 01:19:07,500
 Cool.

1037
01:19:07,500 --> 01:19:08,500
 I'll call that good.

1038
01:19:08,500 --> 01:19:10,020
 Yeah, it's at 55.

1039
01:19:10,020 --> 01:19:11,780
 So I will see you on Thursday, and we'll do--

