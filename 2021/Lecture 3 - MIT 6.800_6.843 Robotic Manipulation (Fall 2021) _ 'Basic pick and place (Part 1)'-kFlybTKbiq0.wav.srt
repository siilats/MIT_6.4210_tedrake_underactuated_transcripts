1
00:00:00,000 --> 00:00:01,760
 OK.

2
00:00:01,760 --> 00:00:03,040
 Welcome back, everybody.

3
00:00:03,040 --> 00:00:05,280
 Let me apologize one more time about last Thursday.

4
00:00:05,280 --> 00:00:08,080
 I promised I wanted to be here, but thank you

5
00:00:08,080 --> 00:00:11,560
 for being flexible with me on that.

6
00:00:11,560 --> 00:00:15,280
 So today, we're going to do the plan from last Thursday.

7
00:00:15,280 --> 00:00:18,080
 And we're going to talk about a basic--

8
00:00:18,080 --> 00:00:20,920
 how do you get the robot moving to do some basic task,

9
00:00:20,920 --> 00:00:24,040
 moving a block from point 1 to point 2.

10
00:00:24,040 --> 00:00:26,360
 Just on the administrative side of things,

11
00:00:26,360 --> 00:00:28,920
 I hope everybody got the note that we

12
00:00:28,920 --> 00:00:32,520
 shifted the PSET schedule because of the PSET that

13
00:00:32,520 --> 00:00:35,480
 would be due Wednesday recovers material from here.

14
00:00:35,480 --> 00:00:39,160
 So there's no PSET due this Wednesday.

15
00:00:39,160 --> 00:00:40,600
 They'll both be due next Wednesday,

16
00:00:40,600 --> 00:00:43,120
 and the next one will be a little lighter.

17
00:00:43,120 --> 00:00:45,240
 The other quick administrative announcement

18
00:00:45,240 --> 00:00:50,960
 is that-- or for those of you in 6800, I hope most of you

19
00:00:50,960 --> 00:00:52,520
 went to the recitation last Friday,

20
00:00:52,520 --> 00:00:55,640
 and you'll be doing the journal clubs in the next recitations

21
00:00:55,640 --> 00:00:57,280
 this week.

22
00:00:57,280 --> 00:00:59,640
 I thought it was awesome.

23
00:00:59,640 --> 00:01:02,240
 Listening to the breakdown of how

24
00:01:02,240 --> 00:01:04,920
 CLIP organized their argument, and CLIP

25
00:01:04,920 --> 00:01:08,360
 being the research paper that we analyzed last week.

26
00:01:08,360 --> 00:01:10,640
 Even if people are in 843 and they

27
00:01:10,640 --> 00:01:15,280
 want to join for the next few weeks, you're welcome to come.

28
00:01:15,280 --> 00:01:18,760
 We've picked out a bunch of manipulation research papers.

29
00:01:18,760 --> 00:01:20,880
 We're going to do a journal club in the next two

30
00:01:20,880 --> 00:01:23,520
 sessions of the recitation.

31
00:01:23,520 --> 00:01:27,520
 It will be a bit on the manipulation content,

32
00:01:27,520 --> 00:01:31,240
 a bit on the rhetorical analysis of how--

33
00:01:31,240 --> 00:01:32,040
 is it a good paper?

34
00:01:32,040 --> 00:01:34,200
 Did they structure their argument?

35
00:01:34,200 --> 00:01:37,320
 I honestly got a lot out of thinking about how

36
00:01:37,320 --> 00:01:40,760
 I'm structuring my arguments.

37
00:01:40,760 --> 00:01:43,520
 Anyways, so that's all going on, and I hope it's working well.

38
00:01:43,520 --> 00:01:45,920
 And I'm actually very eager to hear your feedback

39
00:01:45,920 --> 00:01:48,920
 as you go through that.

40
00:01:48,920 --> 00:01:51,320
 So let me give you the basic story

41
00:01:51,320 --> 00:01:53,680
 for the next couple of lectures here.

42
00:01:53,680 --> 00:01:59,280
 So the goals are somehow modest.

43
00:01:59,280 --> 00:02:00,280
 We've got our KUKA.

44
00:02:00,280 --> 00:02:05,080
 We had it here last time, and I've got my little red brick

45
00:02:05,080 --> 00:02:06,360
 again today.

46
00:02:06,360 --> 00:02:13,560
 And all I'd like to do is help you guys plot a trajectory,

47
00:02:13,560 --> 00:02:15,600
 write the basic controller.

48
00:02:15,600 --> 00:02:17,080
 Thank you so much.

49
00:02:17,080 --> 00:02:17,720
 That's perfect.

50
00:02:17,720 --> 00:02:20,080
 Thank you.

51
00:02:20,080 --> 00:02:24,760
 So you can drive that KUKA to pick up a red brick,

52
00:02:24,760 --> 00:02:27,480
 grasp it, set it down on the other side.

53
00:02:27,480 --> 00:02:29,760
 It's going to touch, actually, a lot of pieces,

54
00:02:29,760 --> 00:02:31,720
 and it's going to lay the foundation for things

55
00:02:31,720 --> 00:02:34,680
 that we're going to use for a long time going forward.

56
00:02:34,680 --> 00:02:38,040
 In particular, I want to introduce you

57
00:02:38,040 --> 00:02:43,600
 to the idea of the spatial algebra.

58
00:02:43,600 --> 00:02:46,400
 So people-- I know lots of people

59
00:02:46,400 --> 00:02:49,920
 who I would consider to be excellent roboticists

60
00:02:49,920 --> 00:02:53,960
 who have a basic sense of kinematics.

61
00:02:53,960 --> 00:02:56,760
 But here's how it goes, roughly, is

62
00:02:56,760 --> 00:02:59,840
 that you'll be working on some kinematics problem.

63
00:02:59,840 --> 00:03:00,880
 Then they're everywhere.

64
00:03:00,880 --> 00:03:02,520
 Even if you're doing deep neural networks

65
00:03:02,520 --> 00:03:04,060
 for a posed estimation, you're going

66
00:03:04,060 --> 00:03:06,240
 to have a kinematics problem at some point.

67
00:03:06,240 --> 00:03:08,240
 And you're going to have a bug, and your vectors

68
00:03:08,240 --> 00:03:11,000
 are pointing the wrong way, or your robot's walking backwards,

69
00:03:11,000 --> 00:03:12,840
 or something's going wrong.

70
00:03:12,840 --> 00:03:15,160
 And you're just going to start flipping signs,

71
00:03:15,160 --> 00:03:18,040
 and taking your matrices, and putting them just like this.

72
00:03:18,040 --> 00:03:21,000
 And maybe if I multiply by that, or inverse that,

73
00:03:21,000 --> 00:03:23,400
 it happens to the best of us.

74
00:03:23,400 --> 00:03:24,960
 But there's-- well, not all of us.

75
00:03:24,960 --> 00:03:29,880
 So there are people out there who actually don't do that.

76
00:03:29,880 --> 00:03:31,920
 And they're like my dynamics friends.

77
00:03:31,920 --> 00:03:34,200
 I have some really good dynamics friends.

78
00:03:34,200 --> 00:03:36,720
 And these are the people that you call when

79
00:03:36,720 --> 00:03:38,120
 you're flipping matrices.

80
00:03:38,120 --> 00:03:40,640
 And they'll say, no, no, the answer is this.

81
00:03:40,640 --> 00:03:44,200
 And they get it right every time, every time.

82
00:03:44,200 --> 00:03:45,560
 So how do they do that?

83
00:03:45,560 --> 00:03:49,440
 So it could be that they spent years--

84
00:03:49,440 --> 00:03:51,360
 like they started off reading Euclid,

85
00:03:51,360 --> 00:03:52,920
 and then they went up to--

86
00:03:52,920 --> 00:03:56,400
 and they spent years with Goldstein, and whatever.

87
00:03:56,400 --> 00:03:58,800
 Maybe they did, but they didn't need to do that.

88
00:03:58,800 --> 00:04:01,360
 In fact, I don't think it would have helped them actually

89
00:04:01,360 --> 00:04:03,080
 get the bugs out.

90
00:04:03,080 --> 00:04:06,320
 What they have that most people don't have

91
00:04:06,320 --> 00:04:09,040
 is really good notation.

92
00:04:09,040 --> 00:04:11,160
 I swear, that's all it takes.

93
00:04:11,160 --> 00:04:14,080
 If you do a little bit of work and commit to the notation

94
00:04:14,080 --> 00:04:16,520
 early, then the notation will save you

95
00:04:16,520 --> 00:04:18,680
 from all of these problems down the line.

96
00:04:18,680 --> 00:04:22,000
 And the only thing that those dynamics friends are doing when

97
00:04:22,000 --> 00:04:25,400
 you come there with your mixed up signs and whatever

98
00:04:25,400 --> 00:04:27,920
 is that they rename your variables,

99
00:04:27,920 --> 00:04:30,080
 and they line them up, and the variables match,

100
00:04:30,080 --> 00:04:32,240
 and everything's good.

101
00:04:32,240 --> 00:04:35,880
 And then the spatial algebra will protect you.

102
00:04:35,880 --> 00:04:39,840
 So I swear, a little bit of work today

103
00:04:39,840 --> 00:04:43,760
 and embracing the basic concept will

104
00:04:43,760 --> 00:04:45,480
 save you down the line.

105
00:04:45,480 --> 00:04:47,720
 It will save you these late night,

106
00:04:47,720 --> 00:04:51,080
 my robot's not quite working, let's slip some signs,

107
00:04:51,080 --> 00:04:54,040
 which we've all done.

108
00:04:54,040 --> 00:04:56,880
 So we're going to introduce that in the context of moving

109
00:04:56,880 --> 00:04:57,520
 a brick around.

110
00:04:57,520 --> 00:05:02,920
 And it's going to go in a couple of pieces.

111
00:05:02,920 --> 00:05:07,200
 So first, we're going to think about just the notion of what

112
00:05:07,200 --> 00:05:09,160
 is a frame, what is an orientation, what

113
00:05:09,160 --> 00:05:11,920
 is a position in space.

114
00:05:11,920 --> 00:05:14,920
 There'll be many important frames on a robot.

115
00:05:14,920 --> 00:05:17,960
 I'm going to try to point on here instead of walking up.

116
00:05:17,960 --> 00:05:22,000
 There'll be many important frames on a robot.

117
00:05:22,000 --> 00:05:25,600
 In particular, we'll have a gripper and a gripper frame.

118
00:05:25,600 --> 00:05:28,320
 We'll have an object and an object frame.

119
00:05:28,320 --> 00:05:32,280
 And we'll think about grasping as getting the gripper

120
00:05:32,280 --> 00:05:35,680
 frame in the right relative orientation and position

121
00:05:35,680 --> 00:05:36,640
 to the object frame.

122
00:05:40,080 --> 00:05:43,960
 And then we're going to compose the bigger, richer behavior

123
00:05:43,960 --> 00:05:48,640
 by taking a bunch of those different position

124
00:05:48,640 --> 00:05:54,560
 relative frames of a gripper and just move it through.

125
00:05:54,560 --> 00:05:59,240
 At first, first pass here is just an open loop trajectory.

126
00:05:59,240 --> 00:06:01,640
 So it's just a trajectory that plays out in time

127
00:06:01,640 --> 00:06:04,080
 like a tape recorder that will move the hand

128
00:06:04,080 --> 00:06:09,520
 through some series of frames, basically, of moving frames

129
00:06:09,520 --> 00:06:11,220
 in order to pick up and drop off the block

130
00:06:11,220 --> 00:06:14,360
 at the desired location.

131
00:06:14,360 --> 00:06:18,440
 And then we're going to wire it all up to the arm

132
00:06:18,440 --> 00:06:22,640
 to turn that gripper plan sketch into a controller that's

133
00:06:22,640 --> 00:06:25,920
 going to move your robot around.

134
00:06:25,920 --> 00:06:30,560
 So that's our first pass at moving the robot.

135
00:06:30,560 --> 00:06:38,280
 So let's start off understanding some frames

136
00:06:38,280 --> 00:06:39,640
 and the spatial algebra.

137
00:06:39,640 --> 00:06:56,800
 So the basic notions we're working with here are very--

138
00:06:56,800 --> 00:06:59,840
 they're geometric, and they live in 3D, typically.

139
00:06:59,840 --> 00:07:03,640
 So the simplest concept is just a point

140
00:07:03,640 --> 00:07:05,360
 in some three-dimensional space.

141
00:07:05,360 --> 00:07:11,400
 Let's say P will be the position of some point of interest.

142
00:07:11,400 --> 00:07:14,280
 Let's have a frame of interest here.

143
00:07:14,280 --> 00:07:23,440
 A is some frame of interest or a point of interest.

144
00:07:26,880 --> 00:07:39,560
 And this P is the position of A.

145
00:07:39,560 --> 00:07:42,200
 Now, here's where-- so this is a superscript notation

146
00:07:42,200 --> 00:07:44,000
 I've used here.

147
00:07:44,000 --> 00:07:47,320
 Positions have to be written in some--

148
00:07:47,320 --> 00:07:48,320
 relative to something.

149
00:07:48,320 --> 00:07:50,920
 If I want to specify a position in space,

150
00:07:50,920 --> 00:07:52,760
 this is where the notation starts.

151
00:07:52,760 --> 00:07:55,040
 I want to say, what's the position of A

152
00:07:55,040 --> 00:07:58,520
 relative to some other point, B?

153
00:07:58,520 --> 00:08:01,320
 So the notation we're going to use for this

154
00:08:01,320 --> 00:08:03,120
 looks a little weird, but I'm going

155
00:08:03,120 --> 00:08:06,800
 to put a superscript that needs the character,

156
00:08:06,800 --> 00:08:12,240
 and then another superscript here, which is now

157
00:08:12,240 --> 00:08:24,400
 position of A relative to B.

158
00:08:24,400 --> 00:08:31,360
 So if I have two points, A and B,

159
00:08:31,360 --> 00:08:36,000
 then P is just the vector between them.

160
00:08:36,000 --> 00:08:38,320
 And this concept, for us, is going

161
00:08:38,320 --> 00:08:43,800
 to live almost exclusively as a three-dimensional vector.

162
00:08:43,800 --> 00:08:45,680
 It just lives in R3.

163
00:08:45,680 --> 00:08:49,880
 It means it's the real numbers, three of them in a vector,

164
00:08:49,880 --> 00:08:51,680
 so a three-by-one vector, if you will.

165
00:08:52,240 --> 00:09:02,080
 Now, there's one more bit of notation that we'll use here,

166
00:09:02,080 --> 00:09:05,400
 and this will be most of it, but we'll carry it

167
00:09:05,400 --> 00:09:07,920
 through for orientations also.

168
00:09:07,920 --> 00:09:13,800
 So I want to be able to describe the position of A

169
00:09:13,800 --> 00:09:18,160
 relative to B in an arbitrary reference frame.

170
00:09:18,160 --> 00:09:23,320
 So your position next to you is some vector,

171
00:09:23,320 --> 00:09:26,880
 but if I turn my reference frame here,

172
00:09:26,880 --> 00:09:28,760
 the vector is still the same length,

173
00:09:28,760 --> 00:09:32,600
 but the three numbers are different.

174
00:09:32,600 --> 00:09:35,600
 So I'm going to put relative to some other reference frame.

175
00:09:35,600 --> 00:09:37,600
 This would be, let's say, w would be--

176
00:09:37,600 --> 00:09:38,920
 I'll just say c, maybe, for now.

177
00:09:38,920 --> 00:10:04,840
 But so-- now, when you see all these weird lines

178
00:10:04,840 --> 00:10:09,240
 on the plots, that's me drawing the reference frame.

179
00:10:09,240 --> 00:10:13,120
 So the point-- a reference frame has a point at its center,

180
00:10:13,120 --> 00:10:16,360
 but it also has an orientation.

181
00:10:16,360 --> 00:10:18,400
 And the orientation is typically drawn

182
00:10:18,400 --> 00:10:22,060
 by drawing the x-axis, the y-axis, and the z-axis.

183
00:10:22,060 --> 00:10:25,680
 We always use a right-hand notation.

184
00:10:25,680 --> 00:10:28,320
 It's vehicle coordinates, if those of you

185
00:10:28,320 --> 00:10:30,960
 think about that.

186
00:10:30,960 --> 00:10:35,240
 And it's always that the x-axis is red.

187
00:10:35,240 --> 00:10:39,720
 So x, y, z goes to RGB, red, green, blue.

188
00:10:39,720 --> 00:10:40,220
 Simple.

189
00:10:52,480 --> 00:11:04,800
 So x, green, y, z.

190
00:11:04,800 --> 00:11:06,320
 So when you see those flying around,

191
00:11:06,320 --> 00:11:08,520
 that's telling you what the orientation of the frame

192
00:11:08,520 --> 00:11:10,480
 is in addition to the position of the frame.

193
00:11:10,480 --> 00:11:13,640
 The center-- the origin of the axis, of course,

194
00:11:13,640 --> 00:11:19,160
 is the position of that frame and the orientation.

195
00:11:19,160 --> 00:11:20,880
 There's a number of ways to represent it,

196
00:11:20,880 --> 00:11:23,480
 but it's visually drawn with these three axes.

197
00:11:23,480 --> 00:11:35,960
 Now, here's where we start to develop the basic algebra.

198
00:11:35,960 --> 00:11:38,280
 We can do it already with positions.

199
00:11:38,280 --> 00:11:40,680
 And the basic idea here is that positions

200
00:11:40,680 --> 00:11:45,400
 add if the frames match.

201
00:11:45,400 --> 00:12:09,600
 So if I can write-- so the standard sort of vector

202
00:12:09,600 --> 00:12:13,480
 addition here of having B going to A

203
00:12:13,480 --> 00:12:18,400
 and having another notion of A going to E,

204
00:12:18,400 --> 00:12:25,200
 that basic vector addition is allowed, is sound,

205
00:12:25,200 --> 00:12:30,240
 it works if the letters match.

206
00:12:30,240 --> 00:12:33,240
 And we're going to be throwing frames around like crazy.

207
00:12:33,240 --> 00:12:35,040
 And the name of the game is going

208
00:12:35,040 --> 00:12:39,360
 to be, how do I transform some position in my gripper frame

209
00:12:39,360 --> 00:12:43,440
 or my elbow frame or something into some other position

210
00:12:43,440 --> 00:12:46,680
 and the trick is I'm going to do algebra

211
00:12:46,680 --> 00:12:48,520
 to make the frames match.

212
00:12:48,520 --> 00:12:50,480
 Once the frames match, it just becomes trivial.

213
00:12:50,480 --> 00:13:00,880
 So this is sort of the basic addition operation is defined.

214
00:13:00,880 --> 00:13:03,360
 The algebraic inverse is defined.

215
00:13:03,360 --> 00:13:06,040
 If those of you that think about--

216
00:13:06,040 --> 00:13:10,560
 they have taken a class in analysis or even in algebra,

217
00:13:10,560 --> 00:13:13,480
 meaning modern algebra, you'll know

218
00:13:13,480 --> 00:13:16,640
 that you can make a basic set of rules that

219
00:13:16,640 --> 00:13:21,240
 define all the operations that form a complete algebra

220
00:13:21,240 --> 00:13:24,280
 on these quantities.

221
00:13:24,280 --> 00:13:27,720
 So the additive inverse is perfectly well defined.

222
00:13:27,720 --> 00:13:36,240
 The negative of that flips the signs.

223
00:13:36,240 --> 00:13:36,740
 OK.

224
00:13:36,740 --> 00:13:50,160
 Positions are the easy case.

225
00:13:50,160 --> 00:13:55,680
 Orientations are where everything gets more dodgy.

226
00:13:55,680 --> 00:13:57,720
 Again, hopefully the notation will save you

227
00:13:57,720 --> 00:14:01,240
 from flipping signs and the like.

228
00:14:01,240 --> 00:14:01,740
 OK.

229
00:14:01,740 --> 00:14:19,280
 There's a number of ways to represent orientation.

230
00:14:19,280 --> 00:14:20,440
 Let me name a few.

231
00:14:20,440 --> 00:14:21,400
 OK.

232
00:14:21,400 --> 00:14:24,200
 You can represent a relative orientation

233
00:14:24,200 --> 00:14:25,160
 with a rotation matrix.

234
00:14:25,160 --> 00:14:36,320
 You can do it with Euler angles, of which there are many.

235
00:14:36,320 --> 00:14:43,600
 But the familiar roll pitch yaw that you might have seen

236
00:14:43,600 --> 00:14:46,680
 or you've piloted an aircraft or something,

237
00:14:46,680 --> 00:14:50,080
 you know roll pitch yaw.

238
00:14:50,080 --> 00:14:51,040
 Quaternions.

239
00:14:51,040 --> 00:14:58,840
 OK.

240
00:14:58,840 --> 00:15:02,120
 In general, we're going to allow you to--

241
00:15:02,120 --> 00:15:04,840
 there's functions that will just let you go back and forth

242
00:15:04,840 --> 00:15:05,540
 in between them.

243
00:15:05,540 --> 00:15:08,040
 And you should use whichever is the right one

244
00:15:08,040 --> 00:15:10,240
 for your particular use case.

245
00:15:10,240 --> 00:15:14,720
 Unfortunately, there's no one representation to rule them all.

246
00:15:14,720 --> 00:15:16,120
 Different parts of the stack will

247
00:15:16,120 --> 00:15:19,240
 use different of these notations,

248
00:15:19,240 --> 00:15:21,080
 different representations.

249
00:15:21,080 --> 00:15:22,920
 But in the spatial algebra, we're

250
00:15:22,920 --> 00:15:25,480
 just going to call the whole thing R.

251
00:15:25,480 --> 00:15:31,080
 We'll say that the orientation of R relative to B--

252
00:15:31,080 --> 00:15:37,320
 of A relative to B, we'll call it R.

253
00:15:37,320 --> 00:15:38,720
 So this is just an orientation now.

254
00:15:38,720 --> 00:15:43,360
 You could choose to represent it on disk

255
00:15:43,360 --> 00:15:45,040
 in any of those formats.

256
00:15:45,040 --> 00:15:47,320
 I'm still going to call it R for the actual purposes

257
00:15:47,320 --> 00:15:48,000
 of the algebra.

258
00:15:48,000 --> 00:15:53,800
 And we don't define the addition operator here.

259
00:15:53,800 --> 00:15:56,360
 We define the multiplication operator here.

260
00:15:56,360 --> 00:16:00,360
 Operators, rotations, orientations multiply.

261
00:16:00,360 --> 00:16:22,720
 So orientations don't have an expressed-in frame.

262
00:16:22,720 --> 00:16:24,000
 You don't need it.

263
00:16:24,000 --> 00:16:28,600
 You'll come to appreciate that, I guess.

264
00:16:28,600 --> 00:16:31,040
 But I can tell you that the only thing--

265
00:16:31,040 --> 00:16:34,680
 A relative to B, you can turn your head around.

266
00:16:34,680 --> 00:16:37,600
 However you want, you can change your current frame.

267
00:16:37,600 --> 00:16:41,320
 And the rotations of A relative to B are the same.

268
00:16:41,320 --> 00:16:43,640
 So you don't need to worry about the expressed-in frame.

269
00:16:43,640 --> 00:16:50,240
 Just like we had an additive inverse for addition,

270
00:16:50,240 --> 00:16:54,000
 we have a multiplicative inverse for rotations,

271
00:16:54,000 --> 00:16:55,280
 for orientations.

272
00:16:55,280 --> 00:17:03,320
 I'll write it with an inverse like this.

273
00:17:03,320 --> 00:17:19,640
 Now, if you want to think about R as a rotation matrix,

274
00:17:19,640 --> 00:17:23,120
 then the inverse is really just the matrix inverse.

275
00:17:23,120 --> 00:17:25,480
 And life is good.

276
00:17:25,480 --> 00:17:27,880
 But again, I'm perfectly happy to define

277
00:17:27,880 --> 00:17:30,440
 the inverse for any representation of orientations.

278
00:17:30,440 --> 00:17:31,880
 We've abstracted a little bit away

279
00:17:31,880 --> 00:17:35,880
 from the underlying numerical representation.

280
00:17:35,880 --> 00:17:37,400
 We're just talking about the ability

281
00:17:37,400 --> 00:17:41,320
 to go back and forth between these rotations.

282
00:17:41,320 --> 00:17:44,760
 It happens that if you have a rotation matrix, a 3

283
00:17:44,760 --> 00:17:48,280
 by 3 matrix representing it, then actually,

284
00:17:48,280 --> 00:17:50,040
 because rotation matrices are orthonormal,

285
00:17:50,040 --> 00:17:52,880
 you can actually just take a transpose too.

286
00:17:52,880 --> 00:17:55,080
 But it's still equivalent to the inverse.

287
00:17:55,080 --> 00:18:08,240
 So the frame, all together, has a position and an orientation.

288
00:18:08,240 --> 00:18:13,080
 Together, we're going to call it the pose of the frame.

289
00:18:13,080 --> 00:18:35,840
 And we're going to use x, big X, as the pose of A relative

290
00:18:35,840 --> 00:18:39,640
 to B.

291
00:18:39,640 --> 00:18:41,400
 Now, there's another word that people

292
00:18:41,400 --> 00:18:43,840
 use a lot for this, which is transform.

293
00:18:43,840 --> 00:18:51,040
 I try to use--

294
00:18:51,040 --> 00:18:53,320
 and throughout, actually, Drake, we

295
00:18:53,320 --> 00:19:01,640
 try to use pose as the noun and transform as the verb.

296
00:19:01,640 --> 00:19:03,160
 English is a little--

297
00:19:03,160 --> 00:19:05,120
 you could use transform as a noun and whatever.

298
00:19:05,120 --> 00:19:08,440
 But we've made the decision that we're

299
00:19:08,440 --> 00:19:10,240
 going to try to be clean about it.

300
00:19:10,240 --> 00:19:11,240
 Pose is a noun.

301
00:19:11,240 --> 00:19:12,360
 Transform is a verb.

302
00:19:12,360 --> 00:19:21,600
 So again, inside here, we have the ability

303
00:19:21,600 --> 00:19:26,200
 to represent this on disk in a number of ways.

304
00:19:26,200 --> 00:19:29,280
 But we'll still be able to define some basic operations.

305
00:19:29,280 --> 00:19:40,200
 We can say, for instance, if I want to transform the verb,

306
00:19:40,200 --> 00:19:45,000
 I can put some points from one frame to another.

307
00:19:45,000 --> 00:20:01,720
 Let me be a little bit careful about this.

308
00:20:01,720 --> 00:20:03,880
 Let me just say one more bit of shorthand

309
00:20:03,880 --> 00:20:08,080
 before I start leaving off symbols and confuse something.

310
00:20:08,080 --> 00:20:11,880
 So there is one important frame out there,

311
00:20:11,880 --> 00:20:13,000
 which is the world frame.

312
00:20:13,000 --> 00:20:23,720
 So we'll define everything in the context

313
00:20:23,720 --> 00:20:27,000
 of some canonical frame, which actually always,

314
00:20:27,000 --> 00:20:31,960
 in my visualizations, you'll see very small red, green, blue

315
00:20:31,960 --> 00:20:34,040
 axes at the origin.

316
00:20:34,040 --> 00:20:37,200
 That's defining the world axis.

317
00:20:37,200 --> 00:20:39,800
 So we'll use a shorthand, which is basically,

318
00:20:39,800 --> 00:20:44,280
 if I write P of A and I leave off

319
00:20:44,280 --> 00:20:47,560
 the relative to or the expressed in frame,

320
00:20:47,560 --> 00:20:55,440
 then that will be shorthand for any time I've left it off.

321
00:20:55,440 --> 00:20:59,640
 The implication is that it's relative to some world frame.

322
00:20:59,640 --> 00:21:00,140
 Yeah?

323
00:21:00,140 --> 00:21:09,820
 [INAUDIBLE]

324
00:21:09,820 --> 00:21:11,180
 Thank you.

325
00:21:11,180 --> 00:21:16,500
 So the question is, what are A and B in this notation here?

326
00:21:16,500 --> 00:21:19,540
 A and B are both frames in this case.

327
00:21:19,540 --> 00:21:22,740
 So it's really the position and orientation

328
00:21:22,740 --> 00:21:25,060
 of A relative to the position orientation of B.

329
00:21:25,060 --> 00:21:28,580
 If it was just a point, then it doesn't make as much sense.

330
00:21:28,580 --> 00:21:31,900
 The pose is the difference of the frames.

331
00:21:31,900 --> 00:21:35,460
 [INAUDIBLE]

332
00:21:35,460 --> 00:21:36,620
 No.

333
00:21:36,620 --> 00:21:37,500
 So good.

334
00:21:37,500 --> 00:21:41,380
 So positions get expressed in.

335
00:21:41,380 --> 00:21:45,100
 But this similarly is safe.

336
00:21:45,100 --> 00:21:51,780
 Let me check that, actually.

337
00:21:51,780 --> 00:21:54,580
 I've got it here coming up.

338
00:21:54,580 --> 00:21:55,900
 I want to say the wrong thing.

339
00:21:56,900 --> 00:22:04,820
 [INAUDIBLE]

340
00:22:04,820 --> 00:22:05,500
 I've got it.

341
00:22:05,500 --> 00:22:07,140
 Well, we're going to get in a second.

342
00:22:07,140 --> 00:22:09,780
 Is there ever a case where you need the expressed in for frame?

343
00:22:09,780 --> 00:22:13,860
 I guess you do actually need the expressed in for frame.

344
00:22:13,860 --> 00:22:16,060
 Because the position can change.

345
00:22:16,060 --> 00:22:18,700
 I think you do need the expressed in for frame

346
00:22:18,700 --> 00:22:20,340
 for pose.

347
00:22:20,340 --> 00:22:25,060
 We'll see it exactly in the examples in a second.

348
00:22:25,060 --> 00:22:27,340
 OK.

349
00:22:27,340 --> 00:22:28,220
 So I can multiply.

350
00:22:28,220 --> 00:22:33,420
 I define a multiplication operator.

351
00:22:33,420 --> 00:22:36,380
 It takes my transform times a position.

352
00:22:36,380 --> 00:22:39,220
 And we'll transform the position from one frame

353
00:22:39,220 --> 00:22:40,020
 to the other frame.

354
00:22:54,940 --> 00:22:56,380
 I will write it more carefully.

355
00:22:56,380 --> 00:22:57,460
 Make sure I get it right.

356
00:22:57,460 --> 00:23:20,020
 This is a composition of the position encoded in that pose

357
00:23:20,020 --> 00:23:22,900
 plus the rotations encoded in that pose.

358
00:23:23,460 --> 00:23:26,380
 [WRITING]

359
00:23:26,380 --> 00:23:33,940
 So when I do a multiplication here,

360
00:23:33,940 --> 00:23:37,860
 it implies transforming both through the position

361
00:23:37,860 --> 00:23:38,860
 and the orientation.

362
00:23:38,860 --> 00:23:46,620
 Now, these poses also have a multiplicative inverse.

363
00:23:46,620 --> 00:23:49,540
 [WRITING]

364
00:23:49,540 --> 00:24:02,820
 But this time, the pose on disk is like--

365
00:24:02,820 --> 00:24:05,740
 you can represent it a handful of different ways.

366
00:24:05,740 --> 00:24:08,340
 But typically, it's not the matrix inverse.

367
00:24:08,340 --> 00:24:12,940
 So this is really just my notation for taking an inverse.

368
00:24:12,940 --> 00:24:14,580
 But the operation, although it's simple,

369
00:24:14,580 --> 00:24:17,500
 it's still a simple function of the elements of a matrix

370
00:24:17,500 --> 00:24:20,460
 representation of this, it's not just the matrix inverse.

371
00:24:20,460 --> 00:24:31,060
 A lot of times, we can represent this as a 3 by 4 matrix,

372
00:24:31,060 --> 00:24:34,340
 for instance.

373
00:24:34,340 --> 00:24:38,140
 Poses are also called rigid transforms.

374
00:24:38,140 --> 00:24:39,460
 So compared to the full--

375
00:24:39,460 --> 00:24:42,900
 if you've heard of homogenous transforms,

376
00:24:42,900 --> 00:24:46,780
 homogenous transforms also allow shear and scaling

377
00:24:46,780 --> 00:24:47,860
 and things like this.

378
00:24:47,860 --> 00:24:49,400
 But a rigid transform, which is just

379
00:24:49,400 --> 00:24:52,980
 changing between frames in the kinematics,

380
00:24:52,980 --> 00:24:55,620
 is only positions and rotations, no scaling or shearing.

381
00:24:55,620 --> 00:25:05,700
 OK, so we're going to use this stuff a lot.

382
00:25:05,700 --> 00:25:06,900
 It happens all the time.

383
00:25:06,900 --> 00:25:09,180
 Whether you're a perception person, a controls person,

384
00:25:09,180 --> 00:25:14,260
 a planning person, these things are core to manipulation.

385
00:25:14,260 --> 00:25:17,420
 One example, for instance, would be if you've got a camera,

386
00:25:17,420 --> 00:25:20,060
 like we did-- you saw the couple cameras were mounted around

387
00:25:20,060 --> 00:25:22,780
 our KUKA, right?

388
00:25:22,780 --> 00:25:24,380
 And each of those cameras are taking,

389
00:25:24,380 --> 00:25:27,940
 let's say, some depth measurements,

390
00:25:27,940 --> 00:25:31,300
 trying to find out where things are in the scene.

391
00:25:31,300 --> 00:25:34,020
 You have a camera in some frame.

392
00:25:34,020 --> 00:25:35,480
 The data coming into that camera are

393
00:25:35,480 --> 00:25:38,220
 going to be in the camera frame, naturally.

394
00:25:38,220 --> 00:25:40,900
 You've got multiple cameras in different frames.

395
00:25:40,900 --> 00:25:43,100
 If you want to coordinate all that data

396
00:25:43,100 --> 00:25:46,340
 into a common representation, then the core operation

397
00:25:46,340 --> 00:25:49,380
 is just going to be converting to some common frame, typically

398
00:25:49,380 --> 00:25:50,180
 a world frame.

399
00:25:50,180 --> 00:25:52,300
 You'll take all your data coming into this camera,

400
00:25:52,300 --> 00:25:54,820
 all the data coming in this camera,

401
00:25:54,820 --> 00:25:59,020
 multiply it by x, basically, to get it

402
00:25:59,020 --> 00:26:02,260
 into some common coordinate frame.

403
00:26:02,260 --> 00:26:05,620
 And you can put them together if the frames match.

404
00:26:05,620 --> 00:26:07,200
 You could do it in a gripper frame.

405
00:26:07,200 --> 00:26:08,980
 You could do it in a world frame.

406
00:26:08,980 --> 00:26:10,780
 The frames matching is what is going

407
00:26:10,780 --> 00:26:11,980
 to make everything stay OK.

408
00:26:11,980 --> 00:26:18,620
 Poses also multiply with the other poses, right?

409
00:26:18,620 --> 00:26:19,820
 All of these things connect.

410
00:26:19,820 --> 00:26:25,180
 And in the sense of--

411
00:26:25,180 --> 00:26:26,640
 I guess I went out of order here.

412
00:26:26,640 --> 00:26:29,740
 But in the sense of an algebra in the notes,

413
00:26:29,740 --> 00:26:32,700
 you'll see that I wrote out, really,

414
00:26:32,700 --> 00:26:34,180
 like this is the inverse--

415
00:26:34,180 --> 00:26:35,580
 this is the addition operator.

416
00:26:35,580 --> 00:26:36,780
 This is the additive inverse.

417
00:26:36,780 --> 00:26:38,820
 This is the multiplication operator.

418
00:26:38,820 --> 00:26:41,740
 There's this sort of n rules you need, which is not--

419
00:26:41,740 --> 00:26:42,940
 n is not large.

420
00:26:42,940 --> 00:26:45,340
 That will sort of completely define that algebra.

421
00:26:45,340 --> 00:26:49,100
 I find myself even looking back at the couple of bullets

422
00:26:49,100 --> 00:26:51,580
 in the notes as a very useful way to compose these things

423
00:26:51,580 --> 00:26:52,820
 to make sure you get it right.

424
00:26:52,820 --> 00:26:53,320
 Mm-hmm?

425
00:26:53,320 --> 00:26:56,300
 [INAUDIBLE]

426
00:26:56,300 --> 00:27:04,060
 Yes, so I did the shorthand here,

427
00:27:04,060 --> 00:27:06,020
 keeping them both in the world frame.

428
00:27:06,020 --> 00:27:07,340
 Everything's in the world frame.

429
00:27:07,340 --> 00:27:11,420
 But absolutely, the way that you change frames here,

430
00:27:11,420 --> 00:27:13,100
 you actually, with a rotation matrix,

431
00:27:13,100 --> 00:27:16,980
 use rotation matrices to express yourself in a different frame.

432
00:27:16,980 --> 00:27:17,480
 Yeah?

433
00:27:17,480 --> 00:27:22,740
 [INAUDIBLE]

434
00:27:22,740 --> 00:27:25,980
 Right, so if they were not in the world frame--

435
00:27:25,980 --> 00:27:31,020
 so if I had, yeah, c, d, and e, this

436
00:27:31,020 --> 00:27:33,380
 would not be a valid equation.

437
00:27:33,380 --> 00:27:35,660
 You would have to transform these things into the same

438
00:27:35,660 --> 00:27:37,340
 thing expressed in frame.

439
00:27:37,340 --> 00:27:42,580
 You can transform this through a rotation matrix, which--

440
00:27:42,580 --> 00:27:44,860
 that is, the basic operation is that rotations

441
00:27:44,860 --> 00:27:48,100
 will take one position and change it expressed in frame.

442
00:27:48,100 --> 00:28:05,500
 OK, so just get your thinking here.

443
00:28:05,500 --> 00:28:11,180
 So if you're in the gripper frame here,

444
00:28:11,180 --> 00:28:14,660
 g is the gripper frame, o is the object frame, which of those

445
00:28:14,660 --> 00:28:20,740
 is the possible value for o expressed--

446
00:28:20,740 --> 00:28:22,660
 relative to g expressed in w?

447
00:28:22,660 --> 00:28:23,160
 Right?

448
00:28:23,160 --> 00:28:33,020
 You know what?

449
00:28:33,020 --> 00:28:33,740
 I lied.

450
00:28:33,740 --> 00:28:37,580
 I made a very silly mistake here.

451
00:28:37,580 --> 00:28:40,380
 There's one other shorthand here that I want to make sure--

452
00:28:40,380 --> 00:28:42,540
 I jumped straight to the w.

453
00:28:42,540 --> 00:28:45,700
 There's one slightly different thing.

454
00:28:45,700 --> 00:28:51,820
 When I write that, actually, and I don't fill in this,

455
00:28:51,820 --> 00:28:53,740
 then I don't assume w.

456
00:28:53,740 --> 00:28:57,340
 If I put relative to g, then I actually

457
00:28:57,340 --> 00:29:02,100
 will assume that this is a g and only assume w if w is not here.

458
00:29:02,100 --> 00:29:03,940
 I really apologize for not getting

459
00:29:03,940 --> 00:29:05,580
 that right the first time.

460
00:29:05,580 --> 00:29:09,260
 So when I write that, I really want p o g g.

461
00:29:09,260 --> 00:29:22,860
 This one?

462
00:29:22,860 --> 00:29:23,340
 Yeah.

463
00:29:23,340 --> 00:29:27,620
 Yes, exactly.

464
00:29:27,620 --> 00:29:28,100
 Right.

465
00:29:28,100 --> 00:29:31,420
 So this one is implied that it's f.

466
00:29:31,420 --> 00:29:33,460
 So this would have to be an f.

467
00:29:33,460 --> 00:29:35,500
 And this actually, because it has

468
00:29:35,500 --> 00:29:38,140
 the position and the rotation, changes it to g.

469
00:29:38,140 --> 00:29:47,660
 The rotation that's inside this changes the expressed entry.

470
00:29:47,660 --> 00:29:49,260
 Good call.

471
00:29:49,260 --> 00:29:52,100
 OK, so you're in the gripper frame.

472
00:29:52,100 --> 00:29:53,680
 You're expressed in the gripper frame,

473
00:29:53,680 --> 00:29:57,300
 and you want the location of o relative to the gripper frame.

474
00:29:57,300 --> 00:29:57,800
 Yeah.

475
00:29:57,800 --> 00:30:09,100
 And x, y, z is RGB.

476
00:30:09,100 --> 00:30:11,340
 Yeah, two.

477
00:30:11,340 --> 00:30:12,740
 OK, anybody else?

478
00:30:12,740 --> 00:30:18,260
 Everybody says it's b.

479
00:30:18,260 --> 00:30:18,760
 OK.

480
00:30:22,620 --> 00:30:27,380
 If I change that and put the w there,

481
00:30:27,380 --> 00:30:29,380
 which I did exactly to remind myself to make sure

482
00:30:29,380 --> 00:30:32,660
 not to make that mistake, then what's the new answer?

483
00:30:32,660 --> 00:30:42,180
 I want to describe the vector from g to the object,

484
00:30:42,180 --> 00:30:43,420
 but in the world frame.

485
00:30:50,540 --> 00:30:54,420
 Robotics has spent a lot of time going like this.

486
00:30:54,420 --> 00:30:57,020
 I have some drinking straws that I tie together

487
00:30:57,020 --> 00:31:00,100
 to make something like this.

488
00:31:00,100 --> 00:31:00,600
 OK?

489
00:31:00,600 --> 00:31:04,400
 All right.

490
00:31:04,400 --> 00:31:10,060
 Getting that notation right, as I

491
00:31:10,060 --> 00:31:14,660
 proved by flubbing it a little bit, makes a big difference.

492
00:31:14,660 --> 00:31:15,620
 Yeah?

493
00:31:15,620 --> 00:31:16,120
 Yeah.

494
00:31:16,120 --> 00:31:18,440
 [INAUDIBLE]

495
00:31:18,440 --> 00:31:18,940
 Yep.

496
00:31:18,940 --> 00:31:21,920
 [INAUDIBLE]

497
00:31:21,920 --> 00:31:24,120
 Ha ha.

498
00:31:24,120 --> 00:31:24,640
 Good call.

499
00:31:24,640 --> 00:31:26,640
 I didn't make them big enough in this picture,

500
00:31:26,640 --> 00:31:29,400
 but they line up with the object frame.

501
00:31:29,400 --> 00:31:30,480
 Yeah.

502
00:31:30,480 --> 00:31:33,200
 There's a red line right there, and a green line right there,

503
00:31:33,200 --> 00:31:34,920
 and a blue line right there.

504
00:31:34,920 --> 00:31:36,360
 Can you see it just barely?

505
00:31:36,360 --> 00:31:37,160
 Yeah.

506
00:31:37,160 --> 00:31:40,600
 I should make those more visible.

507
00:31:40,600 --> 00:31:44,640
 Before I did a screenshot, they looked great.

508
00:31:44,640 --> 00:31:45,140
 Good call.

509
00:31:45,140 --> 00:31:49,740
 OK.

510
00:31:49,740 --> 00:32:00,800
 This is just the point that I hope you'll look at.

511
00:32:00,800 --> 00:32:03,040
 Really, there's just a list of positions

512
00:32:03,040 --> 00:32:04,880
 they had added at inverse.

513
00:32:04,880 --> 00:32:06,480
 Multiplications are defined.

514
00:32:06,480 --> 00:32:11,440
 Multiplications-- you can multiply two rotation matrices.

515
00:32:11,440 --> 00:32:12,920
 You can take the rotation inverse.

516
00:32:12,920 --> 00:32:14,920
 These are just all the rules of the game here.

517
00:32:14,920 --> 00:32:22,480
 I hope they will protect you.

518
00:32:22,480 --> 00:32:32,240
 So how would we-- by the way, if we

519
00:32:32,240 --> 00:32:34,680
 wanted to just go between those two frames--

520
00:32:34,680 --> 00:32:37,160
 so we saw there was a different answer for the two

521
00:32:37,160 --> 00:32:37,920
 different frames.

522
00:32:37,920 --> 00:32:39,560
 Is it OK to go over here?

523
00:32:39,560 --> 00:32:40,060
 Yeah.

524
00:32:41,060 --> 00:32:41,560
 OK.

525
00:32:41,560 --> 00:32:57,060
 If I have POG, and I want to go to PWOG in that picture,

526
00:32:57,060 --> 00:32:59,580
 for instance, then what do I have to do?

527
00:33:07,940 --> 00:33:13,140
 So I've got some vector between Charles and Rachel.

528
00:33:13,140 --> 00:33:17,780
 And I want to express it in some different frame.

529
00:33:17,780 --> 00:33:20,060
 You have to convince yourself that the positions don't

530
00:33:20,060 --> 00:33:22,940
 matter at all, actually.

531
00:33:22,940 --> 00:33:27,060
 But the same way that I can add vectors in any frame,

532
00:33:27,060 --> 00:33:32,540
 positions are invariant to the frame.

533
00:33:32,540 --> 00:33:35,100
 All I need to do is multiply the rotation, which

534
00:33:35,100 --> 00:33:36,780
 changes that relative frame.

535
00:33:36,780 --> 00:33:39,260
 That's one of the rules on the screen there.

536
00:33:39,260 --> 00:33:49,380
 And I did it the opposite way in my--

537
00:33:49,380 --> 00:33:50,380
 no, it's just fine.

538
00:33:50,380 --> 00:33:51,860
 But I could have taken inverse.

539
00:33:51,860 --> 00:33:55,020
 But let's just do the same thing so I don't catch myself

540
00:33:55,020 --> 00:33:55,540
 in a minute.

541
00:34:06,140 --> 00:34:07,940
 I'll write the G here to be careful.

542
00:34:07,940 --> 00:34:17,540
 And on that screen, the way that we could compute R,

543
00:34:17,540 --> 00:34:21,620
 you could think about building R as even

544
00:34:21,620 --> 00:34:24,180
 a handful of simpler rotations.

545
00:34:24,180 --> 00:34:27,340
 So if you were to look back at that example--

546
00:34:27,340 --> 00:34:29,140
 let me put it back up--

547
00:34:29,140 --> 00:34:35,740
 then you could actually think about this as the composition

548
00:34:35,740 --> 00:34:43,340
 of some simpler rotation about the z-axis by pi over 2

549
00:34:43,340 --> 00:34:49,540
 times some rotation about the x-axis of pi over 4.

550
00:34:49,540 --> 00:34:50,860
 These are approximate.

551
00:34:50,860 --> 00:34:52,060
 That's just an eyeball.

552
00:34:52,060 --> 00:34:57,980
 But if you think about taking my point in G,

553
00:34:57,980 --> 00:35:00,500
 how do I get it to be in the other frame?

554
00:35:00,500 --> 00:35:02,020
 Well, I've got to rotate the frames

555
00:35:02,020 --> 00:35:05,580
 to make the orientations of the frames match.

556
00:35:05,580 --> 00:35:11,460
 And you can do that by taking this and just working it

557
00:35:11,460 --> 00:35:14,620
 through these rotations.

558
00:35:14,620 --> 00:35:17,860
 The reason that's important is that if you need to somehow

559
00:35:17,860 --> 00:35:18,460
 write--

560
00:35:18,460 --> 00:35:20,060
 if you need to choose, let's say,

561
00:35:20,060 --> 00:35:23,220
 an approach for your gripper to that object,

562
00:35:23,220 --> 00:35:25,860
 then you're going to find yourself trying to define

563
00:35:25,860 --> 00:35:28,060
 a basic frame by, let's say, oh, I

564
00:35:28,060 --> 00:35:29,580
 want to maybe back off a little bit.

565
00:35:29,580 --> 00:35:31,820
 I'm going to rotate a little bit.

566
00:35:31,820 --> 00:35:35,300
 So you're going to be composing these rotations

567
00:35:35,300 --> 00:35:37,140
 with simpler elements.

568
00:35:37,140 --> 00:35:54,740
 So let's start putting that together into a plan.

569
00:35:54,740 --> 00:35:57,020
 That's enough with just thinking about frames

570
00:35:57,020 --> 00:35:58,420
 and how they relate to each other.

571
00:35:58,420 --> 00:36:01,180
 That's enough for us to start putting together

572
00:36:01,180 --> 00:36:03,660
 our basic plan sketch.

573
00:36:04,180 --> 00:36:05,620
 OK.

574
00:36:05,620 --> 00:36:08,500
 So there's going to be a bunch of useful frames

575
00:36:08,500 --> 00:36:12,020
 if we want to pick up the object.

576
00:36:12,020 --> 00:36:14,100
 So you can call them key.

577
00:36:14,100 --> 00:36:16,380
 They're important for-- let me just call them important frames

578
00:36:16,380 --> 00:36:17,380
 to not sound like that.

579
00:36:17,380 --> 00:36:29,060
 So there's going to be some object frame.

580
00:36:29,060 --> 00:36:32,380
 But I'm going to distinguish between the initial object

581
00:36:32,380 --> 00:36:36,460
 frame and the desired object frame, or let's say,

582
00:36:36,460 --> 00:36:37,940
 the goal object frame.

583
00:36:37,940 --> 00:36:43,740
 I've got a gripper frame.

584
00:36:43,740 --> 00:36:51,380
 I'll call it big G. I've got the initial one.

585
00:36:51,380 --> 00:36:55,540
 I've got maybe the orientation or the frame

586
00:36:55,540 --> 00:37:00,420
 that I want that is, let's say, the right grip to pick it up.

587
00:37:00,420 --> 00:37:04,180
 So let me call it G pick.

588
00:37:04,180 --> 00:37:06,580
 The frame my hand is when I'm actually grabbing the object.

589
00:37:06,580 --> 00:37:16,860
 But in fact, it becomes extremely common

590
00:37:16,860 --> 00:37:20,020
 and extremely useful to not just go--

591
00:37:20,020 --> 00:37:21,500
 if you want to somehow interpolate

592
00:37:21,500 --> 00:37:24,100
 from some initial position of your hand

593
00:37:24,100 --> 00:37:26,220
 to the place where you're picking up the object,

594
00:37:26,220 --> 00:37:30,180
 almost always we think about a pre-pick frame that

595
00:37:30,180 --> 00:37:32,420
 gets us sort of close but a little bit backed off

596
00:37:32,420 --> 00:37:33,060
 from the object.

597
00:37:33,060 --> 00:37:34,480
 And then we do a simpler approach.

598
00:37:34,480 --> 00:37:37,100
 That way you're not somehow interpolating all the way

599
00:37:37,100 --> 00:37:39,700
 from some different position into this frame,

600
00:37:39,700 --> 00:37:42,500
 possibly going through collisions as you do that.

601
00:37:42,500 --> 00:37:51,020
 So almost always we'll think about a pre-pick frame that

602
00:37:51,020 --> 00:37:52,220
 allows me to go--

603
00:37:52,220 --> 00:37:54,460
 when I transition from pre-pick to pick,

604
00:37:54,460 --> 00:37:58,420
 I can sort of guarantee I'm not going to slam into anything.

605
00:37:58,420 --> 00:38:00,700
 And similarly, I might back off, lift off the table

606
00:38:00,700 --> 00:38:02,260
 before I move away.

607
00:38:02,260 --> 00:38:03,540
 So I'll do it.

608
00:38:03,540 --> 00:38:08,340
 I'll have a G post-pick.

609
00:38:08,340 --> 00:38:08,840
 OK?

610
00:38:08,840 --> 00:38:15,740
 I'll have a G for where I'm going to place the object down.

611
00:38:15,740 --> 00:38:27,500
 And similarly, I'll have a pre and a post for that.

612
00:38:27,500 --> 00:38:28,740
 OK?

613
00:38:28,740 --> 00:38:30,860
 And that gets you most of the way there.

614
00:38:30,860 --> 00:38:32,780
 OK?

615
00:38:32,780 --> 00:38:35,860
 It's just sort of diagramming out a bunch of frames

616
00:38:35,860 --> 00:38:39,940
 through the space where we want our hand to end up.

617
00:38:39,940 --> 00:38:42,100
 I believe that I've done that on the next slide here.

618
00:38:42,100 --> 00:38:48,500
 So we're going to just move our hand

619
00:38:48,500 --> 00:38:50,660
 through a series of frames.

620
00:38:50,660 --> 00:38:52,620
 The way that we do that is by building up

621
00:38:52,620 --> 00:38:55,700
 just this set of possible frames.

622
00:38:55,700 --> 00:38:56,200
 OK?

623
00:38:56,200 --> 00:39:00,300
 Which I guess I didn't insert.

624
00:39:00,300 --> 00:39:00,800
 OK.

625
00:39:00,800 --> 00:39:07,420
 Comically, if you only do this, which

626
00:39:07,420 --> 00:39:09,740
 I did the first time I did it-- and I'll show the video

627
00:39:09,740 --> 00:39:10,620
 in a second here--

628
00:39:10,620 --> 00:39:14,180
 then there's one more thing that you need.

629
00:39:14,180 --> 00:39:16,860
 Anybody already see the problem with this that I missed?

630
00:39:16,860 --> 00:39:17,580
 I guess you can't.

631
00:39:17,580 --> 00:39:20,660
 But typically, I've got the object here.

632
00:39:20,660 --> 00:39:22,420
 I'll lift up a little bit to approach.

633
00:39:22,420 --> 00:39:25,660
 So my pre-pick will be just above my pick.

634
00:39:25,660 --> 00:39:26,460
 OK?

635
00:39:26,460 --> 00:39:28,860
 Same with the post.

636
00:39:28,860 --> 00:39:30,100
 I put this all together.

637
00:39:30,100 --> 00:39:31,780
 I ran my simulation.

638
00:39:31,780 --> 00:39:34,340
 And hilarity ensued.

639
00:39:34,340 --> 00:39:37,500
 What did I forget?

640
00:39:37,500 --> 00:39:38,740
 Yeah.

641
00:39:38,740 --> 00:39:40,100
 Clearance, right?

642
00:39:40,100 --> 00:39:42,700
 I went smash right into the side of the bin.

643
00:39:42,700 --> 00:39:44,060
 The fingers bent a little bit.

644
00:39:44,060 --> 00:39:46,220
 And then the brick went flying.

645
00:39:46,220 --> 00:39:47,820
 Right?

646
00:39:47,820 --> 00:39:53,820
 So maybe g for clearance is a good idea also.

647
00:39:53,820 --> 00:39:54,300
 OK?

648
00:39:54,300 --> 00:40:03,300
 Now, these are conceptually the frames.

649
00:40:03,300 --> 00:40:05,700
 I never represent o initial--

650
00:40:05,700 --> 00:40:06,580
 o is a frame.

651
00:40:06,580 --> 00:40:08,580
 So how do I represent o initial on disk?

652
00:40:08,580 --> 00:40:10,020
 I represent its pose, right?

653
00:40:10,020 --> 00:40:16,180
 So what I actually have is some pose of x initial--

654
00:40:16,180 --> 00:40:20,820
 of o initial-- x of o initial on disk, often in the world

655
00:40:20,820 --> 00:40:22,300
 frame, for instance.

656
00:40:22,300 --> 00:40:22,780
 OK?

657
00:40:22,780 --> 00:40:34,540
 So in the hand coordinates, a reasonable thing to do--

658
00:40:34,540 --> 00:40:37,340
 so if you looked at the hand coordinates--

659
00:40:37,340 --> 00:40:40,980
 let me put that picture back up.

660
00:40:40,980 --> 00:40:44,020
 OK, so you see the hands coordinate system

661
00:40:44,020 --> 00:40:47,180
 is centered right in the middle of the body.

662
00:40:47,180 --> 00:40:48,420
 Yeah, yeah.

663
00:40:48,420 --> 00:40:50,060
 Sure.

664
00:40:50,060 --> 00:40:53,780
 What would you say on disk?

665
00:40:53,780 --> 00:40:55,940
 I'm being a programmer, I guess.

666
00:40:55,940 --> 00:40:56,420
 Right?

667
00:40:56,420 --> 00:41:02,220
 So there's a slight gap between going from the math, right,

668
00:41:02,220 --> 00:41:05,260
 to what numbers am I going to use to represent that?

669
00:41:05,260 --> 00:41:07,740
 When I-- I'm being silly when I say on disk.

670
00:41:07,740 --> 00:41:10,060
 That's not common notation in the world,

671
00:41:10,060 --> 00:41:11,780
 or in robotics, or anything.

672
00:41:11,780 --> 00:41:14,940
 I'm just saying that if I wanted to actually implement this,

673
00:41:14,940 --> 00:41:16,820
 I need to choose a representation,

674
00:41:16,820 --> 00:41:18,620
 a numerical representation.

675
00:41:18,620 --> 00:41:22,660
 So o is a conceptual frame.

676
00:41:22,660 --> 00:41:25,260
 It can be represented in my--

677
00:41:25,260 --> 00:41:30,820
 on paper, or on disk, in my code with those numbers that

678
00:41:30,820 --> 00:41:31,980
 represent the orientation.

679
00:41:31,980 --> 00:41:33,180
 Thank you for asking.

680
00:41:33,180 --> 00:41:33,660
 [INAUDIBLE]

681
00:41:39,580 --> 00:41:41,580
 I mean, I think the pose, in some sense,

682
00:41:41,580 --> 00:41:45,020
 captures what o initial is.

683
00:41:45,020 --> 00:41:49,900
 But we think of o as being a frame which

684
00:41:49,900 --> 00:41:52,140
 defines the semantics of whether you can connect

685
00:41:52,140 --> 00:41:54,420
 two poses and the like.

686
00:41:54,420 --> 00:41:59,100
 But it's the pose x is the manifestation

687
00:41:59,100 --> 00:42:01,860
 that holds the position and orientation of that frame

688
00:42:01,860 --> 00:42:04,020
 relative to something else.

689
00:42:04,020 --> 00:42:05,980
 O, in some sense, is absolute, if you will,

690
00:42:05,980 --> 00:42:08,620
 but can't be represented because you have to somehow make

691
00:42:08,620 --> 00:42:10,460
 a pose relative to something else.

692
00:42:10,460 --> 00:42:10,960
 Yes?

693
00:42:10,960 --> 00:42:11,460
 [INAUDIBLE]

694
00:42:11,460 --> 00:42:16,860
 Basically, I have some bins.

695
00:42:16,860 --> 00:42:20,620
 And I'm going to-- instead of going straight from the pick,

696
00:42:20,620 --> 00:42:24,580
 straight across, I need to make sure I go nice and up and down

697
00:42:24,580 --> 00:42:26,100
 to clear the bins.

698
00:42:26,100 --> 00:42:28,780
 Otherwise, I'm going to smash into the bins on the way there.

699
00:42:34,580 --> 00:42:36,020
 So what is a reasonable--

700
00:42:36,020 --> 00:42:42,060
 you have to think about, given the language we have,

701
00:42:42,060 --> 00:42:46,340
 I want to somehow choose the position of the gripper that

702
00:42:46,340 --> 00:42:50,900
 would be a good choice for picking up the object.

703
00:42:50,900 --> 00:42:54,580
 There are lots of frames flying around in the world.

704
00:42:54,580 --> 00:42:57,460
 The natural one to write would be to say,

705
00:42:57,460 --> 00:42:59,660
 I either want to say the position of the--

706
00:42:59,660 --> 00:43:03,420
 or the pose of the gripper relative to the object,

707
00:43:03,420 --> 00:43:06,500
 instead of saying, come up with the pose in the world--

708
00:43:06,500 --> 00:43:08,860
 of the gripper in the world and the object of the world.

709
00:43:08,860 --> 00:43:10,780
 Why not do the relative frame, directly

710
00:43:10,780 --> 00:43:13,300
 from the hand to the object?

711
00:43:13,300 --> 00:43:15,940
 That's the simple place and the robust place

712
00:43:15,940 --> 00:43:17,980
 to write my objective.

713
00:43:17,980 --> 00:43:20,980
 [SIDE CONVERSATION]

714
00:43:20,980 --> 00:43:21,980
 [VIDEO PLAYBACK]

715
00:43:21,980 --> 00:43:24,980
 [SIDE CONVERSATION]

716
00:43:48,580 --> 00:43:53,620
 So if I have the position of the object initially,

717
00:43:53,620 --> 00:43:54,620
 and I want to figure out--

718
00:43:54,620 --> 00:44:01,020
 I want to somehow define my picking grasp,

719
00:44:01,020 --> 00:44:03,460
 I could choose whichever one's easier for me to think about.

720
00:44:03,460 --> 00:44:08,980
 I could think about writing in either direction.

721
00:44:08,980 --> 00:44:13,140
 But in this one, where I want to have the object initial

722
00:44:13,140 --> 00:44:18,420
 relative to the grasp, to the gripper,

723
00:44:18,420 --> 00:44:22,620
 then you can see the y-axis is the green axis.

724
00:44:22,620 --> 00:44:24,780
 I want it to be square in the middle of my fingers.

725
00:44:24,780 --> 00:44:27,420
 I want the object's center to be something

726
00:44:27,420 --> 00:44:29,540
 like a positive y value.

727
00:44:29,540 --> 00:44:34,300
 And x0, z0 seems totally reasonable.

728
00:44:34,300 --> 00:44:38,900
 So it turns out that choosing this to be something like,

729
00:44:38,900 --> 00:44:42,940
 I don't know, 12 centimeters is what we use in the code.

730
00:44:42,940 --> 00:44:45,060
 Puts it squarely right in my finger,

731
00:44:45,060 --> 00:44:48,020
 that the center of the square-- of the object

732
00:44:48,020 --> 00:44:50,660
 gets right into the center of my fingers.

733
00:44:50,660 --> 00:45:00,780
 Similarly, I need to come up with the orientation.

734
00:45:00,780 --> 00:45:08,340
 And the gripper frame is kind of annoying.

735
00:45:08,340 --> 00:45:09,580
 It's in this weird frame.

736
00:45:09,580 --> 00:45:12,180
 But if you want to be coming down from on top,

737
00:45:12,180 --> 00:45:14,820
 then a series of transformations and knowing

738
00:45:14,820 --> 00:45:18,620
 that the object is in a particular orientation,

739
00:45:18,620 --> 00:45:19,940
 the cube--

740
00:45:19,940 --> 00:45:23,500
 knowing that we have a canonical orientation for a little red

741
00:45:23,500 --> 00:45:25,940
 cube is something you will never get from perception,

742
00:45:25,940 --> 00:45:28,260
 because that's symmetric and the like.

743
00:45:28,260 --> 00:45:32,420
 But if we knew this, then for our simplicity for today,

744
00:45:32,420 --> 00:45:35,020
 we can define a relative orientation

745
00:45:35,020 --> 00:45:38,900
 so that the hand comes directly down on top,

746
00:45:38,900 --> 00:45:42,300
 with a handful of just simple rotations.

747
00:45:42,300 --> 00:45:43,820
 And you'll see that in the code.

748
00:45:43,820 --> 00:45:50,700
 So this together defines my pose.

749
00:45:50,700 --> 00:46:02,260
 I can, again, in the relative frames,

750
00:46:02,260 --> 00:46:04,420
 say that in order-- right before I do it,

751
00:46:04,420 --> 00:46:07,300
 I'm going to just back off directly in the gripper frame.

752
00:46:07,300 --> 00:46:11,980
 I'll do, let's say, negative y to define my pre-pick.

753
00:46:11,980 --> 00:46:14,260
 Maybe the same one works for post-pick.

754
00:46:14,260 --> 00:46:14,780
 You see?

755
00:46:14,780 --> 00:46:16,300
 And by just having that extra frame,

756
00:46:16,300 --> 00:46:19,020
 that shows that no matter where I'm coming from, I stop here.

757
00:46:19,020 --> 00:46:20,380
 And then that last little segment

758
00:46:20,380 --> 00:46:23,020
 is sort of simple and doesn't collide with the object.

759
00:46:23,020 --> 00:46:25,180
 My fingers don't go through the brick as I go.

760
00:46:25,180 --> 00:46:28,940
 So this pre-pick planning is very, very common.

761
00:46:28,940 --> 00:46:33,060
 People will do lots of interesting, complicated

762
00:46:33,060 --> 00:46:35,140
 algorithms to figure out how to move through space.

763
00:46:35,140 --> 00:46:37,540
 And then they'll just hand code the last thing often.

764
00:46:40,860 --> 00:46:43,940
 So that's a pretty cool--

765
00:46:43,940 --> 00:46:47,620
 you get pretty far with a little bit of notation

766
00:46:47,620 --> 00:46:51,140
 and the software that will let you go back and forth

767
00:46:51,140 --> 00:46:52,700
 between them without making mistakes.

768
00:46:52,700 --> 00:46:53,200
 Yeah?

769
00:46:53,200 --> 00:46:54,180
 [INAUDIBLE]

770
00:46:54,180 --> 00:47:03,660
 You see the-- yes, the question is, why did I put 0.12--

771
00:47:03,660 --> 00:47:05,340
 the 12 centimeters here?

772
00:47:05,340 --> 00:47:09,740
 My units are always metric in meters.

773
00:47:09,740 --> 00:47:13,540
 Why did I choose 12 centimeters and y-axis here?

774
00:47:13,540 --> 00:47:17,260
 So in the frame of the gripper, which

775
00:47:17,260 --> 00:47:21,420
 is the red, green, blue on the hand there,

776
00:47:21,420 --> 00:47:25,980
 if I want it to be in the middle of the fingers,

777
00:47:25,980 --> 00:47:27,380
 I've measured the fingers.

778
00:47:27,380 --> 00:47:29,300
 And I know that 12 centimeters is

779
00:47:29,300 --> 00:47:30,820
 from the center of the hand to the--

780
00:47:30,820 --> 00:47:33,100
 will put me in the middle of the fingers.

781
00:47:33,100 --> 00:47:36,980
 So that would be a point like here, roughly,

782
00:47:36,980 --> 00:47:39,180
 on that green line.

783
00:47:39,180 --> 00:47:41,300
 So I say, I want the center of the object

784
00:47:41,300 --> 00:47:43,460
 to be in the middle of the fingers there.

785
00:47:43,460 --> 00:47:50,740
 And similarly, I will make sure I'm

786
00:47:50,740 --> 00:47:53,180
 coming from the top with my choice of rotations.

787
00:48:05,300 --> 00:48:10,580
 OK, so the code attempts to make this easy.

788
00:48:10,580 --> 00:48:13,820
 You really just-- we take that same notation

789
00:48:13,820 --> 00:48:18,900
 we put on the board, and we turn this in code.

790
00:48:18,900 --> 00:48:27,660
 If I have P, B, A, C, I'm on the board.

791
00:48:27,660 --> 00:48:33,260
 I mean, I will write this with a subscript notation, B, A, C,

792
00:48:33,260 --> 00:48:34,940
 like this.

793
00:48:34,940 --> 00:48:38,780
 That's the way you take this superscript notation

794
00:48:38,780 --> 00:48:42,140
 and choose a symbol.

795
00:48:42,140 --> 00:48:45,740
 And this will, again, allow you to read the code

796
00:48:45,740 --> 00:48:48,780
 and see that I can only add positions if things match.

797
00:48:48,780 --> 00:48:50,540
 I can only multiply if things match.

798
00:48:50,540 --> 00:48:58,340
 I've seen robot software that demands

799
00:48:58,340 --> 00:49:02,140
 that every time you specify any point or any vector,

800
00:49:02,140 --> 00:49:03,580
 you also specify the frame.

801
00:49:03,580 --> 00:49:05,620
 And it programmatically enforces that you can never

802
00:49:05,620 --> 00:49:07,620
 add things that are in the wrong frames.

803
00:49:07,620 --> 00:49:09,500
 I think that can be super good.

804
00:49:09,500 --> 00:49:12,740
 But the burden, then, of every time you do anything simple,

805
00:49:12,740 --> 00:49:13,980
 you have to express your frame.

806
00:49:13,980 --> 00:49:16,300
 And then you've got two different concepts coming

807
00:49:16,300 --> 00:49:17,460
 from two different places.

808
00:49:17,460 --> 00:49:20,500
 And they-- oh, I didn't tell them the same frame name.

809
00:49:20,500 --> 00:49:21,940
 It tends to be a pain.

810
00:49:21,940 --> 00:49:27,900
 So in our world, we've chosen to have the code author make it

811
00:49:27,900 --> 00:49:29,460
 readable.

812
00:49:29,460 --> 00:49:32,300
 And we programmatically check sizes and other things.

813
00:49:32,300 --> 00:49:35,780
 But you have to not shoot yourself in the foot.

814
00:49:35,780 --> 00:49:41,540
 And then you can just assemble these.

815
00:49:41,540 --> 00:49:44,420
 The pre-grasp is, like I said, the rotation

816
00:49:44,420 --> 00:49:48,220
 I can make out of simple primitives.

817
00:49:48,220 --> 00:49:52,060
 And then I can just start building up my pick,

818
00:49:52,060 --> 00:49:56,500
 pre-pick, place, pre-place, and even my clearance.

819
00:49:59,980 --> 00:50:04,460
 The next step of that is to go ahead and specify the timing.

820
00:50:04,460 --> 00:50:07,940
 So I've now decided a bunch of important frames

821
00:50:07,940 --> 00:50:10,780
 that I'm going to move through, even key frames, if you like.

822
00:50:10,780 --> 00:50:12,580
 And I just need to say, how long is

823
00:50:12,580 --> 00:50:15,780
 it going to take me to go back and forth between them?

824
00:50:15,780 --> 00:50:18,380
 And that's simple enough.

825
00:50:18,380 --> 00:50:20,220
 I just listed out a bunch of times

826
00:50:20,220 --> 00:50:24,580
 for the different segments.

827
00:50:24,580 --> 00:50:27,940
 Sometimes they're just absolute times.

828
00:50:27,940 --> 00:50:30,500
 Sometimes, just for the initial one,

829
00:50:30,500 --> 00:50:32,860
 since I wanted my code to be robust so that it could go

830
00:50:32,860 --> 00:50:36,780
 from any initial pose to here, I just

831
00:50:36,780 --> 00:50:39,380
 scaled it based on the total distance between those two

832
00:50:39,380 --> 00:50:43,220
 frames so that I didn't make that somehow always happen

833
00:50:43,220 --> 00:50:44,660
 in two seconds.

834
00:50:44,660 --> 00:50:46,860
 Depending on how far I have to go,

835
00:50:46,860 --> 00:50:48,460
 I might go slower or faster.

836
00:50:48,460 --> 00:50:53,700
 This is what happens if you forget the clearance

837
00:50:53,700 --> 00:50:54,260
 constraint.

838
00:50:57,140 --> 00:51:04,300
 Beautiful plan from pick up, post pick up,

839
00:51:04,300 --> 00:51:07,860
 start moving across, boom, full physics simulator,

840
00:51:07,860 --> 00:51:11,460
 hands not happy, brick fell out.

841
00:51:11,460 --> 00:51:13,780
 It's going to keep trying because I'm doing an open loop

842
00:51:13,780 --> 00:51:15,140
 position trajectory.

843
00:51:15,140 --> 00:51:18,860
 And this is why we want you to prove in simulation

844
00:51:18,860 --> 00:51:21,300
 that things work before we let it go in the real robot

845
00:51:21,300 --> 00:51:24,500
 because that would either power down the robot or blow a fuse

846
00:51:24,500 --> 00:51:26,940
 or something like that.

847
00:51:26,940 --> 00:51:27,900
 And it happens often.

848
00:51:27,900 --> 00:51:33,540
 So it's interesting actually to ask

849
00:51:33,540 --> 00:51:36,780
 how do I interpolate between the different poses.

850
00:51:36,780 --> 00:51:46,740
 So positions, if I just say in time, I've got time of pick,

851
00:51:46,740 --> 00:51:51,020
 time of place, all my intermediate frames

852
00:51:51,020 --> 00:51:53,380
 specified in time.

853
00:51:53,380 --> 00:51:55,260
 And I have my position of my gripper,

854
00:51:55,260 --> 00:51:57,700
 let's say, figured out that I can--

855
00:51:57,700 --> 00:52:00,060
 through my math, I can put them all in the world frame.

856
00:52:00,060 --> 00:52:04,060
 I can figure out where my gripper needs

857
00:52:04,060 --> 00:52:06,940
 to be at all times.

858
00:52:06,940 --> 00:52:10,180
 And it's a three element vector.

859
00:52:10,180 --> 00:52:12,180
 Let me just plot the x component.

860
00:52:12,180 --> 00:52:17,780
 So the x component of this.

861
00:52:17,780 --> 00:52:21,380
 Maybe I've got a sequence like this.

862
00:52:21,380 --> 00:52:23,460
 How do I interpolate between them?

863
00:52:23,460 --> 00:52:26,020
 There's lots of ways to choose.

864
00:52:26,020 --> 00:52:28,060
 We're just going to do the simplest straight line

865
00:52:28,060 --> 00:52:33,500
 interpolation, which would be called a first order hold.

866
00:52:33,500 --> 00:52:43,100
 Sort of one of the simplest forms of interpolation.

867
00:52:43,100 --> 00:52:47,540
 First order, it's got one degree of freedom for this line,

868
00:52:47,540 --> 00:52:49,260
 the slope of the line.

869
00:52:49,260 --> 00:52:51,020
 Zero order would be--

870
00:52:51,020 --> 00:52:53,740
 you guys know the zero order hold

871
00:52:53,740 --> 00:52:55,200
 would be if I just went like this.

872
00:52:55,200 --> 00:53:02,260
 I just didn't interpolate with the line,

873
00:53:02,260 --> 00:53:04,900
 but I did some staircase.

874
00:53:04,900 --> 00:53:07,820
 I don't want you to run that on the robot.

875
00:53:07,820 --> 00:53:09,460
 That's not so good.

876
00:53:09,460 --> 00:53:11,420
 You can do higher order interpolations

877
00:53:11,420 --> 00:53:14,360
 to get nice curves through there.

878
00:53:14,360 --> 00:53:17,780
 The reason we're only going to do first order for positions

879
00:53:17,780 --> 00:53:22,740
 here is actually more because interpolating orientations

880
00:53:22,740 --> 00:53:24,140
 gets subtle.

881
00:53:24,140 --> 00:53:26,920
 So we're going to do first order for positions, which

882
00:53:26,920 --> 00:53:29,660
 we know how to do trivially, and first order

883
00:53:29,660 --> 00:53:33,260
 for orientations, which requires a little bit more care.

884
00:53:33,260 --> 00:53:46,500
 So how do you interpolate orientations?

885
00:53:46,500 --> 00:53:51,740
 Now, this is one case where your choice of representation

886
00:53:51,740 --> 00:53:52,780
 can make a big difference.

887
00:53:52,780 --> 00:53:55,900
 So some of those representations are easier

888
00:53:55,900 --> 00:53:58,620
 to interpolate than others.

889
00:53:58,620 --> 00:54:02,780
 Some of them look simple to interpolate,

890
00:54:02,780 --> 00:54:04,640
 but then would blow up, could potentially

891
00:54:04,640 --> 00:54:08,980
 go through bad states in the middle.

892
00:54:08,980 --> 00:54:13,100
 So just as an example, let's say the rotation matrix.

893
00:54:14,100 --> 00:54:18,100
 Probably you've all seen rotation matrices in 2D.

894
00:54:18,100 --> 00:54:28,100
 The sort of simplest cases, a 2D example,

895
00:54:28,100 --> 00:54:32,100
 would be if I want to write a 2D rotation

896
00:54:32,100 --> 00:54:35,100
 as a function of some angle theta,

897
00:54:35,100 --> 00:54:36,500
 that would be a 2 by 2 matrix.

898
00:54:41,500 --> 00:54:44,420
 [WRITING ON BOARD]

899
00:54:44,420 --> 00:54:53,100
 Are people familiar with that sort of mechanics?

900
00:54:53,100 --> 00:54:56,380
 And I can take a 2 by 1 vector, and this

901
00:54:56,380 --> 00:55:01,740
 will rotate that vector by theta degrees.

902
00:55:01,740 --> 00:55:09,100
 So just to sort of make the point, if theta equals 0,

903
00:55:09,100 --> 00:55:09,620
 what do I get?

904
00:55:09,620 --> 00:55:15,220
 I get 1, 0, 0, 1, identity matrix.

905
00:55:15,220 --> 00:55:18,140
 That's what you want.

906
00:55:18,140 --> 00:55:26,300
 If theta equals pi over 4, let's say, or pi over 2 even,

907
00:55:26,300 --> 00:55:35,100
 then I can get 0, negative 1, 1, 0.

908
00:55:35,100 --> 00:55:37,900
 That would be, if I've rotated by pi over 2,

909
00:55:37,900 --> 00:55:42,460
 I would take my original axes and put my x-axis here

910
00:55:42,460 --> 00:55:43,700
 and my y-axis here.

911
00:55:43,700 --> 00:55:47,260
 That would be a rotation by 90 degrees.

912
00:55:47,260 --> 00:55:52,260
 But absolutely linearly interpolating between those two

913
00:55:52,260 --> 00:55:55,900
 is not going to give me a rotation in 45 degrees.

914
00:55:55,900 --> 00:56:00,300
 It's going to give me 1 over root 2, which is not half.

915
00:56:00,300 --> 00:56:03,740
 These things don't-- you can't just interpolate orientations

916
00:56:03,740 --> 00:56:04,220
 like that.

917
00:56:06,860 --> 00:56:10,100
 Roll pitch yaw, you think you might be able to interpolate.

918
00:56:10,100 --> 00:56:14,460
 You can get yourself into trouble with things exploding.

919
00:56:14,460 --> 00:56:18,520
 So the way people typically interpolate these

920
00:56:18,520 --> 00:56:20,700
 is with a quaternion representation.

921
00:56:20,700 --> 00:56:31,020
 And they do something called SLURP,

922
00:56:31,020 --> 00:56:34,420
 which is spherical linear interpolation.

923
00:56:34,420 --> 00:56:37,860
 [WRITING]

924
00:56:37,860 --> 00:56:50,900
 And it's a safe way to get a smooth--

925
00:56:50,900 --> 00:56:55,340
 a first-order interpolation in orientations.

926
00:56:55,340 --> 00:57:02,100
 We're toying with a problem that you might do on your problem

927
00:57:02,100 --> 00:57:04,900
 set that just make you understand SLURP a little

928
00:57:04,900 --> 00:57:05,380
 better.

929
00:57:05,380 --> 00:57:11,700
 But that's the basic mechanics, is

930
00:57:11,700 --> 00:57:14,820
 that we can almost do this simple picture of first-order

931
00:57:14,820 --> 00:57:15,980
 interpolations.

932
00:57:15,980 --> 00:57:18,260
 But you need to do it in the quaternion representation,

933
00:57:18,260 --> 00:57:20,740
 and you need to use this spherical interpolation.

934
00:57:20,740 --> 00:57:21,240
 Yes?

935
00:57:21,240 --> 00:57:24,220
 [INAUDIBLE]

936
00:57:30,620 --> 00:57:33,980
 So what do I mean by explode when you use roll pitch yaws?

937
00:57:33,980 --> 00:57:39,020
 So there are roll pitch yaw values

938
00:57:39,020 --> 00:57:43,860
 that represent very similar orientations that

939
00:57:43,860 --> 00:57:47,340
 are actually very far in the values of our roll pitch yaw.

940
00:57:47,340 --> 00:57:50,380
 So trying to go between one and another representation

941
00:57:50,380 --> 00:57:53,580
 of roll pitch yaw might take you through extremely large numbers

942
00:57:53,580 --> 00:57:56,300
 for roll pitch yaw.

943
00:57:56,300 --> 00:57:59,300
 And this goes along with gimbal lock.

944
00:57:59,300 --> 00:58:02,980
 And the quaternions are the way to get around gimbal lock.

945
00:58:02,980 --> 00:58:03,460
 [INAUDIBLE]

946
00:58:03,460 --> 00:58:10,300
 I mean, grinding noises often happen

947
00:58:10,300 --> 00:58:13,060
 when you're chattering or something like that.

948
00:58:13,060 --> 00:58:14,820
 This would probably be a velocity command

949
00:58:14,820 --> 00:58:16,340
 that your robot refuses to execute

950
00:58:16,340 --> 00:58:18,940
 and then goes into a safety mode, and the lights turn on,

951
00:58:18,940 --> 00:58:21,500
 I hope.

952
00:58:21,500 --> 00:58:23,000
 If you built the robot yourself, you

953
00:58:23,000 --> 00:58:25,620
 might throw it across the room.

954
00:58:25,620 --> 00:58:26,220
 Done that, too.

955
00:58:26,820 --> 00:58:28,980
 [INAUDIBLE]

956
00:58:28,980 --> 00:58:30,140
 OK.

957
00:58:30,140 --> 00:58:31,620
 So now the next part of the game is

958
00:58:31,620 --> 00:58:34,780
 how do I get from the end effector coordinates

959
00:58:34,780 --> 00:58:36,660
 back to my joint commands?

960
00:58:36,660 --> 00:58:39,940
 Remember the manipulation station, the whole package

961
00:58:39,940 --> 00:58:41,660
 that we made a diagram for?

962
00:58:41,660 --> 00:58:45,220
 The controller takes joint positions as input.

963
00:58:45,220 --> 00:58:47,540
 So somehow I've got this beautiful plan.

964
00:58:47,540 --> 00:58:49,380
 It tells me what the pose of the gripper

965
00:58:49,380 --> 00:58:51,940
 now should be over time.

966
00:58:51,940 --> 00:58:53,940
 How do I get to joint commands?

967
00:58:53,940 --> 00:58:55,340
 How do I execute that?

968
00:58:55,340 --> 00:58:56,340
 OK.

969
00:58:56,340 --> 00:59:17,220
 So the mapping from joint angles to poses

970
00:59:17,220 --> 00:59:19,180
 is called forward kinematics problem.

971
00:59:19,180 --> 00:59:21,660
 In particular, we're doing the forward kinematics.

972
00:59:21,660 --> 00:59:24,340
 And you can think of it, and you can see already here,

973
00:59:24,340 --> 00:59:26,700
 that if I have joint angles theta,

974
00:59:26,700 --> 00:59:31,420
 and I want to turn that into a rotation or a pose,

975
00:59:31,420 --> 00:59:34,340
 then that's going to be potentially a nonlinear,

976
00:59:34,340 --> 00:59:40,140
 almost always nonlinear map from f into these poses.

977
00:59:40,140 --> 00:59:41,980
 This is maybe the simplest version of it.

978
00:59:41,980 --> 00:59:48,300
 But the math is actually pretty simple,

979
00:59:48,300 --> 00:59:52,540
 because each individual joint is just

980
00:59:52,540 --> 00:59:55,300
 describing a small operation, a rotation matrix

981
00:59:55,300 --> 00:59:59,060
 kind of operation, on a relative transform

982
00:59:59,060 --> 01:00:00,660
 from right before the robot's joint

983
01:00:00,660 --> 01:00:04,580
 and right till right after the robot's joint.

984
01:00:04,580 --> 01:00:06,940
 And the operation of doing forward kinematics

985
01:00:06,940 --> 01:00:09,420
 is almost exactly what we did already,

986
01:00:09,420 --> 01:00:15,220
 which is I wanted to compute the pose of my end effector.

987
01:00:15,220 --> 01:00:18,880
 I do that by computing the pose of my wrist

988
01:00:18,880 --> 01:00:21,300
 relative to that end effector.

989
01:00:21,300 --> 01:00:24,980
 I do a rotation matrix type thing for the rotation joint

990
01:00:24,980 --> 01:00:27,420
 here, which is just a relative pose.

991
01:00:27,420 --> 01:00:29,820
 And then I just keep chaining them backwards

992
01:00:29,820 --> 01:00:33,500
 and can get all the way back to the world coordinates.

993
01:00:33,500 --> 01:00:35,820
 That's exactly how robots are specified.

994
01:00:35,820 --> 01:00:39,420
 Like if you look at the robot description files,

995
01:00:39,420 --> 01:00:45,700
 then pose relative to pose, six numbers right here,

996
01:00:45,700 --> 01:00:48,500
 which is x, y, z, roll pitch, yaw.

997
01:00:48,500 --> 01:00:50,580
 When you type in your basic robot kinematics

998
01:00:50,580 --> 01:00:52,500
 in the robot description files, it's

999
01:00:52,500 --> 01:00:56,740
 just telling you relative poses of each link.

1000
01:00:56,740 --> 01:01:00,300
 And the joints are just operations

1001
01:01:00,300 --> 01:01:04,140
 that will, again, make a transformation

1002
01:01:04,140 --> 01:01:08,140
 from the pre-joint frame to the post-joint frame.

1003
01:01:08,140 --> 01:01:18,900
 So when I write this vector, this idea of x of my,

1004
01:01:18,900 --> 01:01:22,580
 let's say, gripper is some function of my gripper,

1005
01:01:22,580 --> 01:01:29,700
 my kinematics function of q, then you could ask, what is q?

1006
01:01:29,700 --> 01:01:31,060
 What is q going to actually be?

1007
01:01:31,060 --> 01:01:35,100
 So for the IWA, it's a total of seven--

1008
01:01:35,100 --> 01:01:43,340
 it's a 7 by 1 vector of joint angles,

1009
01:01:43,340 --> 01:01:47,020
 all rotational joint angles.

1010
01:01:47,020 --> 01:01:50,020
 They're called revolute joints in the code.

1011
01:01:50,020 --> 01:01:55,740
 And each of them just defines a rotation

1012
01:01:55,740 --> 01:01:58,980
 that happens based on that joint angle.

1013
01:01:58,980 --> 01:02:02,380
 It happens in the 3D.

1014
01:02:02,380 --> 01:02:05,220
 And it could potentially change the positions, too,

1015
01:02:05,220 --> 01:02:07,180
 but a fixed change of positions.

1016
01:02:07,180 --> 01:02:09,940
 And it's just going from a vector,

1017
01:02:09,940 --> 01:02:12,340
 one element of that vector, into one rotation matrix

1018
01:02:12,340 --> 01:02:14,580
 for one joint, and then the next one.

1019
01:02:14,580 --> 01:02:17,700
 And I can compose this through a series of frame transformations

1020
01:02:17,700 --> 01:02:20,660
 into my full kinematics.

1021
01:02:20,660 --> 01:02:23,220
 But it's a little bit more subtle than that.

1022
01:02:23,220 --> 01:02:28,380
 So do you remember the Allegro hand I showed before?

1023
01:02:28,380 --> 01:02:39,180
 My network is not working well.

1024
01:02:39,180 --> 01:02:40,340
 That's what I was afraid of.

1025
01:02:43,820 --> 01:02:45,820
 A lot of my graphics are just refusing to show.

1026
01:02:45,820 --> 01:02:53,500
 There's a beautiful SVG here.

1027
01:02:53,500 --> 01:02:54,500
 Imagine it in your head.

1028
01:02:54,500 --> 01:02:59,420
 I don't know why that could possibly have failed.

1029
01:02:59,420 --> 01:03:02,780
 But the Allegro hand has many links.

1030
01:03:02,780 --> 01:03:05,380
 It also potentially has a location in the world.

1031
01:03:05,380 --> 01:03:09,420
 The base of that Allegro hand has some location in the world.

1032
01:03:09,420 --> 01:03:10,620
 So if I had--

1033
01:03:10,620 --> 01:03:13,340
 I have a little URDF here that had the Allegro hand

1034
01:03:13,340 --> 01:03:16,220
 and the red brick in it.

1035
01:03:16,220 --> 01:03:21,820
 So the question is, how big is Q for a floating Allegro

1036
01:03:21,820 --> 01:03:24,940
 hand and a floating brick?

1037
01:03:24,940 --> 01:03:26,980
 How many numbers do I need to represent

1038
01:03:26,980 --> 01:03:32,100
 the total configuration of that system?

1039
01:03:32,100 --> 01:03:33,980
 So I can tell you the Allegro hand had

1040
01:03:33,980 --> 01:03:36,500
 four degrees of freedom and the beautiful kinematic tree

1041
01:03:36,500 --> 01:03:38,420
 that you would see, hopefully, some people who

1042
01:03:38,420 --> 01:03:39,920
 are looking at it on their computers

1043
01:03:39,920 --> 01:03:41,860
 with better internet see.

1044
01:03:41,860 --> 01:03:42,740
 It came up for you?

1045
01:03:42,740 --> 01:03:45,140
 Awesome.

1046
01:03:45,140 --> 01:03:46,940
 I'm going to make it disappear and come up,

1047
01:03:46,940 --> 01:03:48,380
 but maybe in the hopes--

1048
01:03:48,380 --> 01:03:51,140
 ah, OK.

1049
01:03:51,140 --> 01:03:54,420
 Four links per finger.

1050
01:03:54,420 --> 01:03:56,580
 They actually-- I don't know if anybody's noticed,

1051
01:03:56,580 --> 01:03:58,460
 but I actually have the same number of fingers

1052
01:03:58,460 --> 01:03:59,860
 as the Allegro hand.

1053
01:03:59,860 --> 01:04:05,260
 So I favor the three fingered hands.

1054
01:04:05,260 --> 01:04:07,020
 That's just a weird coincidence.

1055
01:04:11,580 --> 01:04:13,540
 And then there's some number of elements

1056
01:04:13,540 --> 01:04:18,820
 required to move the robot in space.

1057
01:04:18,820 --> 01:04:22,540
 So the total number of joint angles for my Allegro hand

1058
01:04:22,540 --> 01:04:27,780
 is four times four fingers, 16, and then

1059
01:04:27,780 --> 01:04:31,540
 some number of elements for the position in space.

1060
01:04:31,540 --> 01:04:33,540
 How many elements do you think I tend to have

1061
01:04:33,540 --> 01:04:35,460
 to position in space?

1062
01:04:35,460 --> 01:04:41,060
 Six is a great answer.

1063
01:04:41,060 --> 01:04:43,660
 We almost always use seven, because we

1064
01:04:43,660 --> 01:04:46,620
 choose to use quaternions in the coordinate representation

1065
01:04:46,620 --> 01:04:49,580
 instead of x, y, z, roll, pitch, yaw to avoid

1066
01:04:49,580 --> 01:04:52,260
 gimbal locks and singularities.

1067
01:04:52,260 --> 01:05:05,060
 So for the Allegro with a floating base,

1068
01:05:05,060 --> 01:05:11,100
 we get four fingers times four joints plus seven

1069
01:05:11,100 --> 01:05:18,900
 for a quaternion for the floating joint,

1070
01:05:18,900 --> 01:05:20,300
 for a total of what?

1071
01:05:20,300 --> 01:05:21,500
 23.

1072
01:05:21,500 --> 01:05:24,540
 And if I add the brick in, I get another seven.

1073
01:05:24,540 --> 01:05:28,340
 So I get a total of 30 in my diagram.

1074
01:05:28,340 --> 01:05:30,020
 And the kinematics problem then becomes

1075
01:05:30,020 --> 01:05:34,620
 going from those 30 numbers to a pose, some pose

1076
01:05:34,620 --> 01:05:38,620
 that I'm computing in the system, the pose of the brick,

1077
01:05:38,620 --> 01:05:39,500
 the pose of the hand.

1078
01:05:39,500 --> 01:05:49,020
 Of course, we have methods in any robot software,

1079
01:05:49,020 --> 01:05:53,020
 certainly in Drake, to do the kinematics for you here.

1080
01:05:53,020 --> 01:05:57,460
 We just ask you to give which frame

1081
01:05:57,460 --> 01:06:00,500
 you're asking for the kinematics relative to.

1082
01:06:00,500 --> 01:06:02,780
 And we can, in general, go from any frame to any frame.

1083
01:06:02,780 --> 01:06:04,160
 You can do an expressed in frame.

1084
01:06:04,160 --> 01:06:06,580
 You can do all the things we talked about.

1085
01:06:06,580 --> 01:06:08,380
 You can give all of these.

1086
01:06:08,380 --> 01:06:11,740
 But by default, you can just say, for instance,

1087
01:06:11,740 --> 01:06:13,460
 from some body frame to the world,

1088
01:06:13,460 --> 01:06:15,980
 and it will just give out this pose.

1089
01:06:15,980 --> 01:06:23,740
 We don't actually take q as an argument.

1090
01:06:23,740 --> 01:06:27,100
 We take the context as the argument

1091
01:06:27,100 --> 01:06:30,380
 because we actually have the kinematics that could be,

1092
01:06:30,380 --> 01:06:31,820
 for instance, parameterized.

1093
01:06:31,820 --> 01:06:34,460
 If you wanted to design your robot while you're

1094
01:06:34,460 --> 01:06:36,460
 computing your kinematics, and maybe the length

1095
01:06:36,460 --> 01:06:38,340
 could be something that you want to optimize,

1096
01:06:38,340 --> 01:06:40,580
 let's say optimize the link lengths of my robot,

1097
01:06:40,580 --> 01:06:42,460
 for instance, then you'd like this kinematics

1098
01:06:42,460 --> 01:06:45,260
 to also be a function of your link lengths,

1099
01:06:45,260 --> 01:06:47,500
 or some other quantities.

1100
01:06:47,500 --> 01:06:49,700
 So we actually take in the full context.

1101
01:06:49,700 --> 01:06:51,700
 Remember, I talked about the context is just

1102
01:06:51,700 --> 01:06:54,740
 the state plus the parameters plus time,

1103
01:06:54,740 --> 01:06:56,620
 or it's just the structure that wraps that.

1104
01:07:01,300 --> 01:07:05,260
 I'm totally bummed that this isn't working

1105
01:07:05,260 --> 01:07:08,260
 because I had big plans for the next step, which

1106
01:07:08,260 --> 01:07:13,780
 is I'm actually running a notebook in the sky

1107
01:07:13,780 --> 01:07:17,940
 right now, right on deep node, and was

1108
01:07:17,940 --> 01:07:20,660
 hoping that you could all jointly

1109
01:07:20,660 --> 01:07:24,580
 control the robot simultaneously and chaos would ensue.

1110
01:07:24,580 --> 01:07:27,340
 But I think we now have the ability,

1111
01:07:27,340 --> 01:07:29,500
 if I get a better internet connection in here,

1112
01:07:29,500 --> 01:07:34,980
 to have a single robot that everybody can control,

1113
01:07:34,980 --> 01:07:38,140
 and we can watch the kinematics evolve

1114
01:07:38,140 --> 01:07:42,340
 and watch the Jacobians, which I'll talk about next.

1115
01:07:42,340 --> 01:07:43,740
 I was going to have fun with that,

1116
01:07:43,740 --> 01:07:45,620
 but I guess it's not going to happen.

1117
01:07:45,620 --> 01:07:53,940
 One more piece that I want to land today,

1118
01:07:53,940 --> 01:07:55,820
 and then you've got most of what you need

1119
01:07:55,820 --> 01:07:58,580
 to move the robot around.

1120
01:07:58,580 --> 01:08:03,620
 So kinematic frames, I think we're good.

1121
01:08:03,620 --> 01:08:07,240
 The ability to put them together with some simple trajectory

1122
01:08:07,240 --> 01:08:09,240
 based interpolation.

1123
01:08:09,240 --> 01:08:13,260
 I think the concept, I hope, is somehow OK.

1124
01:08:13,260 --> 01:08:15,780
 And I think the code--

1125
01:08:15,780 --> 01:08:17,980
 we're going to ask you to understand SLURP,

1126
01:08:17,980 --> 01:08:20,700
 but the code makes that simple.

1127
01:08:20,700 --> 01:08:22,660
 If you give me a bunch of key frames,

1128
01:08:22,660 --> 01:08:26,180
 you can take different interpolation schemes

1129
01:08:26,180 --> 01:08:26,680
 to do that.

1130
01:08:26,680 --> 01:08:27,180
 Yes?

1131
01:08:27,180 --> 01:08:27,660
 [INAUDIBLE]

1132
01:08:27,660 --> 01:08:28,160
 Yeah.

1133
01:08:28,160 --> 01:08:28,660
 [INAUDIBLE]

1134
01:08:28,660 --> 01:08:57,300
 Yeah, no, that is a central question, which I will repeat.

1135
01:08:57,300 --> 01:08:59,100
 Thank you.

1136
01:08:59,100 --> 01:09:02,260
 Yeah, so how do I know that when I've taken my gripper plan

1137
01:09:02,260 --> 01:09:05,740
 and given something that looks reasonable in gripper

1138
01:09:05,740 --> 01:09:07,900
 coordinates, I don't have something crazy happening

1139
01:09:07,900 --> 01:09:10,700
 in my joint coordinates in order to execute that?

1140
01:09:10,700 --> 01:09:15,420
 All we've done so far is chosen reasonable smooth--

1141
01:09:15,420 --> 01:09:17,140
 continuous, let's say-- not smooth,

1142
01:09:17,140 --> 01:09:19,900
 but continuous trajectories for the hand

1143
01:09:19,900 --> 01:09:22,020
 and had them move at a low velocity

1144
01:09:22,020 --> 01:09:24,740
 right now in the hopes that whatever

1145
01:09:24,740 --> 01:09:26,460
 I do to transform the gripper coordinates

1146
01:09:26,460 --> 01:09:29,860
 to the joint coordinates maintains that smoothness.

1147
01:09:29,860 --> 01:09:32,460
 Getting that right is one of the next topics,

1148
01:09:32,460 --> 01:09:34,740
 because there are ways you can mess that up for sure.

1149
01:09:34,740 --> 01:09:37,220
 [INAUDIBLE]

1150
01:09:37,220 --> 01:09:39,660
 It is also not always true that it's possible.

1151
01:09:39,660 --> 01:09:42,260
 You could-- yeah, so there's a notion

1152
01:09:42,260 --> 01:09:44,140
 of kinematic singularities, I think,

1153
01:09:44,140 --> 01:09:45,220
 is what you're getting at.

1154
01:09:45,220 --> 01:09:46,840
 And we'll make sure we understand that.

1155
01:09:46,840 --> 01:09:49,460
 I've got some cool graphics.

1156
01:09:49,460 --> 01:09:51,500
 Yes, so we're just--

1157
01:09:51,500 --> 01:09:53,100
 we're trying to be reasonable here,

1158
01:09:53,220 --> 01:09:57,340
 but this is actually a great lead-in to the next thing.

1159
01:09:57,340 --> 01:10:02,340
 So one thing you might want to do

1160
01:10:02,340 --> 01:10:05,220
 is to say, if I've got a bunch of these frames

1161
01:10:05,220 --> 01:10:07,820
 and I want to figure out command for positions,

1162
01:10:07,820 --> 01:10:09,780
 then what I could just do is somehow do--

1163
01:10:09,780 --> 01:10:15,140
 take an inverse of this function.

1164
01:10:15,140 --> 01:10:16,940
 This is a nonlinear, complicated function,

1165
01:10:16,940 --> 01:10:19,500
 but if I could somehow define an inverse,

1166
01:10:19,500 --> 01:10:21,700
 then that would be--

1167
01:10:21,700 --> 01:10:24,580
 looks like a very reasonable operation.

1168
01:10:24,580 --> 01:10:27,620
 And that is a well-defined operation in robotics

1169
01:10:27,620 --> 01:10:28,860
 called inverse kinematics.

1170
01:10:28,860 --> 01:10:38,460
 But it is-- you have to do it very carefully,

1171
01:10:38,460 --> 01:10:42,860
 because while this direction is always well-posed,

1172
01:10:42,860 --> 01:10:48,700
 you can always go from a good Q to a valid pose.

1173
01:10:48,700 --> 01:10:50,220
 It tends to be smooth.

1174
01:10:50,220 --> 01:10:53,660
 It tends to-- all these nice behaviors going this way.

1175
01:10:53,660 --> 01:10:55,860
 There are many cases where there are, for instance,

1176
01:10:55,860 --> 01:11:00,260
 multiple solutions, no solutions, going this way.

1177
01:11:00,260 --> 01:11:02,220
 So you have to be-- if you're willing to--

1178
01:11:02,220 --> 01:11:05,540
 sometimes we do actually use the inverse kinematics directly,

1179
01:11:05,540 --> 01:11:07,780
 but oftentimes we do not, because if your inverse

1180
01:11:07,780 --> 01:11:11,500
 kinematics engine gives you slightly different answers

1181
01:11:11,500 --> 01:11:13,500
 for very similar poses, then you might--

1182
01:11:13,500 --> 01:11:16,260
 it might involve crazier movements to do it.

1183
01:11:16,260 --> 01:11:18,680
 An example of a case where you'd have multiple solutions

1184
01:11:18,680 --> 01:11:21,820
 would be if I had enough degrees of freedom in my arm,

1185
01:11:21,820 --> 01:11:22,820
 it could be that I can--

1186
01:11:22,820 --> 01:11:24,260
 I can't keep my wrist very still,

1187
01:11:24,260 --> 01:11:26,060
 but if I could move my elbow, for instance,

1188
01:11:26,060 --> 01:11:28,980
 relative to my arm, it might be that there's many Qs that give

1189
01:11:28,980 --> 01:11:31,460
 me the same hand position.

1190
01:11:31,460 --> 01:11:34,820
 If my inverse kinematics engine told me to take this one

1191
01:11:34,820 --> 01:11:39,900
 at time 1, this one at time 1.111, or 1.1001,

1192
01:11:39,900 --> 01:11:42,380
 then that would cause a huge--

1193
01:11:42,380 --> 01:11:45,660
 so we don't-- when we specify inverse kinematics,

1194
01:11:45,660 --> 01:11:48,840
 we are-- we don't only ask for the inverse.

1195
01:11:48,840 --> 01:11:51,880
 We also put in some additional requirements for continuity,

1196
01:11:51,880 --> 01:11:54,120
 or smoothness, or centering, or something like this.

1197
01:11:54,120 --> 01:12:00,580
 OK.

1198
01:12:00,580 --> 01:12:03,900
 So I want to just introduce the concept of what

1199
01:12:03,900 --> 01:12:08,080
 we are going to do, but we'll go through the richer

1200
01:12:08,080 --> 01:12:09,400
 form of it next time.

1201
01:12:13,920 --> 01:12:18,460
 So in order to sort of encourage this sort of smoothness,

1202
01:12:18,460 --> 01:12:20,580
 instead of looking at inverse kinematics,

1203
01:12:20,580 --> 01:12:22,540
 we're going to look at differential kinematics.

1204
01:12:22,540 --> 01:12:24,540
 So we're going to examine exactly how

1205
01:12:24,540 --> 01:12:30,660
 an incremental change in Q makes an incremental change in X.

1206
01:12:30,660 --> 01:12:31,160
 OK?

1207
01:12:32,160 --> 01:12:35,140
 [WRITING]

1208
01:12:35,140 --> 01:12:47,940
 Roughly, intuitively, what I'd like you to think about

1209
01:12:47,940 --> 01:12:52,120
 is I want an incremental change in my poses, which

1210
01:12:52,120 --> 01:13:03,700
 is some incremental change in my joint angles.

1211
01:13:03,700 --> 01:13:04,200
 OK?

1212
01:13:04,200 --> 01:13:11,260
 And we're going to call this thing,

1213
01:13:11,260 --> 01:13:13,220
 as people do in all kinds of fields,

1214
01:13:13,220 --> 01:13:14,580
 we call that the Jacobian.

1215
01:13:14,580 --> 01:13:20,200
 It's a function of the current--

1216
01:13:20,200 --> 01:13:22,580
 whatever the current joint angles are.

1217
01:13:22,580 --> 01:13:23,080
 OK?

1218
01:13:23,080 --> 01:13:40,340
 Now, in order to start talking about differential quantities,

1219
01:13:40,340 --> 01:13:43,420
 and ultimately we're going to want dQ dt,

1220
01:13:43,420 --> 01:13:45,780
 so the velocities, joint velocities, OK,

1221
01:13:45,780 --> 01:13:51,080
 and some pose velocity, if you will,

1222
01:13:51,080 --> 01:13:54,360
 we need to understand how to represent this pose velocity.

1223
01:13:54,360 --> 01:13:56,000
 OK?

1224
01:13:56,000 --> 01:14:01,400
 So just like we have a spatial algebra for positions

1225
01:14:01,400 --> 01:14:05,000
 and orientations, we have it for velocities,

1226
01:14:05,000 --> 01:14:12,480
 the spatial velocity, which has a translation component

1227
01:14:12,480 --> 01:14:13,920
 and an orientation component.

1228
01:14:13,920 --> 01:14:21,720
 OK, so this is going to be a 6 by 1 vector,

1229
01:14:21,720 --> 01:14:23,720
 where these are angular velocities.

1230
01:14:23,720 --> 01:14:31,560
 These are translational velocities.

1231
01:14:31,560 --> 01:14:37,800
 OK?

1232
01:14:37,800 --> 01:14:40,560
 Now, here's something funny, right?

1233
01:14:40,560 --> 01:14:46,960
 In pose, there's all kinds of problems

1234
01:14:46,960 --> 01:14:50,080
 that come with your choice of representation

1235
01:14:50,080 --> 01:14:52,720
 for orientations, whether it's Euler angles,

1236
01:14:52,720 --> 01:14:56,420
 Rolfe-Jarre, or quaternions, or rotation matrices.

1237
01:14:56,420 --> 01:14:59,860
 There's no canonical choice for the orientation.

1238
01:14:59,860 --> 01:15:04,560
 There is a canonical choice for angular velocity.

1239
01:15:04,560 --> 01:15:12,600
 So you can, with three numbers, have no degenerate--

1240
01:15:12,600 --> 01:15:14,720
 no problems with degeneracy or anything like this.

1241
01:15:14,720 --> 01:15:16,320
 You have a perfectly reasonable--

1242
01:15:16,320 --> 01:15:18,680
 everybody chooses it, everybody agrees

1243
01:15:18,680 --> 01:15:21,520
 that angular velocities shall be three numbers, which

1244
01:15:21,520 --> 01:15:24,840
 are the rotations around the major axes.

1245
01:15:24,840 --> 01:15:25,920
 OK?

1246
01:15:25,920 --> 01:15:28,640
 So this notion of angular velocity

1247
01:15:28,640 --> 01:15:29,580
 simplifies everything.

1248
01:15:29,580 --> 01:15:32,200
 Once you get the velocities and spatial accelerations

1249
01:15:32,200 --> 01:15:34,680
 and the like, you've got to 6 by 1 numbers.

1250
01:15:34,680 --> 01:15:36,680
 Everybody's happy, everybody's good.

1251
01:15:36,680 --> 01:15:39,560
 The representation's collapsed.

1252
01:15:39,560 --> 01:15:46,640
 The problem is that because we have so many different choices

1253
01:15:46,640 --> 01:15:52,040
 for q and even for x, we have many different possible

1254
01:15:52,040 --> 01:15:54,640
 Jacobians to determine how we're going

1255
01:15:54,640 --> 01:15:59,880
 to go from some velocity in joint angles

1256
01:15:59,880 --> 01:16:03,000
 to some velocity in some spatial velocity, for instance.

1257
01:16:03,000 --> 01:16:03,500
 OK?

1258
01:16:03,500 --> 01:16:08,360
 So we define the one that goes--

1259
01:16:08,360 --> 01:16:19,240
 it's typically called a geometric Jacobian, which

1260
01:16:19,240 --> 01:16:29,600
 takes joint velocities and maps that to spatial velocity

1261
01:16:29,600 --> 01:16:30,100
 vectors.

1262
01:16:30,100 --> 01:16:41,840
 It's not quite-- because of this extra change of representation,

1263
01:16:41,840 --> 01:16:46,120
 it's not quite partial f, partial q.

1264
01:16:46,120 --> 01:16:49,000
 But it's that plus a change of coordinates

1265
01:16:49,000 --> 01:16:50,600
 into the spatial vectors.

1266
01:16:50,600 --> 01:16:55,560
 The analytic Jacobian, if you care,

1267
01:16:55,560 --> 01:16:59,040
 is the true partial derivative.

1268
01:16:59,040 --> 01:17:01,160
 But we don't use that.

1269
01:17:01,160 --> 01:17:03,480
 We don't recommend that as much.

1270
01:17:03,480 --> 01:17:05,240
 There's cases where you might want that.

1271
01:17:05,240 --> 01:17:08,440
 But almost always, we recommend working

1272
01:17:08,440 --> 01:17:12,080
 with the spatial velocities.

1273
01:17:12,080 --> 01:17:16,040
 OK, and so there's still more choices.

1274
01:17:16,040 --> 01:17:20,800
 Like, there are still multiple geometric Jacobians.

1275
01:17:20,800 --> 01:17:23,840
 Because while the geometric Jacobian always

1276
01:17:23,840 --> 01:17:31,160
 is a function of q, how do you represent q dot?

1277
01:17:31,160 --> 01:17:38,400
 OK, well, there's a couple of different choices

1278
01:17:38,400 --> 01:17:43,040
 that you've made here in your vector of positions.

1279
01:17:43,040 --> 01:17:46,960
 OK, you've made-- we said we had 30 numbers in our Allegro

1280
01:17:46,960 --> 01:17:49,800
 hand plus red brick.

1281
01:17:49,800 --> 01:17:53,320
 OK, but it turns out, because I had--

1282
01:17:53,320 --> 01:17:54,320
 some of those were extra.

1283
01:17:54,320 --> 01:17:55,780
 They were the Gratonian dimensions,

1284
01:17:55,780 --> 01:17:57,200
 which took seven numbers.

1285
01:17:57,200 --> 01:17:59,080
 I know I have spatial velocities that

1286
01:17:59,080 --> 01:18:01,320
 could take only six numbers.

1287
01:18:01,320 --> 01:18:05,120
 Oftentimes, the velocity vector, the joint velocity vector,

1288
01:18:05,120 --> 01:18:07,760
 is smaller than the joint position vector.

1289
01:18:17,760 --> 01:18:28,800
 And it might not equal dq dt.

1290
01:18:28,800 --> 01:18:30,560
 OK, you can map between them.

1291
01:18:30,560 --> 01:18:33,560
 But in particular, for the Allegro hand floating,

1292
01:18:33,560 --> 01:18:39,040
 or even the red brick, or something like this,

1293
01:18:39,040 --> 01:18:41,840
 I had 23 for just the Allegro hand floating.

1294
01:18:45,640 --> 01:18:57,920
 23 positions, but only 22 velocities.

1295
01:18:57,920 --> 01:19:03,760
 When I write this big vector that

1296
01:19:03,760 --> 01:19:05,820
 keeps track of what's going on in the robot,

1297
01:19:05,820 --> 01:19:08,320
 I use 23 numbers to keep track of the positions,

1298
01:19:08,320 --> 01:19:10,860
 and 22 for velocities.

1299
01:19:10,860 --> 01:19:11,760
 So there's options.

1300
01:19:11,760 --> 01:19:13,040
 There's many Jacobians.

1301
01:19:13,040 --> 01:19:15,880
 Some of them can map from q dot, which

1302
01:19:15,880 --> 01:19:18,440
 is the 23 numbers on the right.

1303
01:19:18,440 --> 01:19:20,320
 Some of them can map from v, which

1304
01:19:20,320 --> 01:19:22,680
 is the 22 numbers on the right.

1305
01:19:22,680 --> 01:19:24,120
 They're all available in code.

1306
01:19:24,120 --> 01:19:32,160
 So the basic strategy that we'll explore next time

1307
01:19:32,160 --> 01:19:36,160
 is that we can, for instance, try

1308
01:19:36,160 --> 01:19:40,760
 to say I've got my x gripper as a function of time

1309
01:19:40,760 --> 01:19:43,760
 that I've designed with my trajectories.

1310
01:19:43,760 --> 01:19:50,320
 And I want to go to some q as a function of time.

1311
01:19:50,320 --> 01:19:56,000
 It's reasonable to start with q0,

1312
01:19:56,000 --> 01:20:02,160
 and then integrate forward a velocity command that

1313
01:20:02,160 --> 01:20:12,240
 is approximately the inverse of this Jacobian times

1314
01:20:12,240 --> 01:20:13,440
 my spatial velocity.

1315
01:20:13,440 --> 01:20:17,600
 Let me shorthand it with--

1316
01:20:17,600 --> 01:20:21,440
 I'll just use the proper v--

1317
01:20:21,440 --> 01:20:25,000
 spatial velocity of the gripper as a function of time.

1318
01:20:25,320 --> 01:20:34,080
 The only catch is that we want to be careful,

1319
01:20:34,080 --> 01:20:39,440
 because we have to guarantee that that matrix is invertible

1320
01:20:39,440 --> 01:20:42,080
 or address it with more sophisticated methods.

1321
01:20:42,080 --> 01:20:45,000
 But intuitively, we're going to design controllers

1322
01:20:45,000 --> 01:20:47,520
 that use the derivative of the kinematics

1323
01:20:47,520 --> 01:20:49,440
 to get this smoothness.

